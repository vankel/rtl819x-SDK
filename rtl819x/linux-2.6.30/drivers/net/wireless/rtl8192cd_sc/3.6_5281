	.file	1 "8192cd_profile.c"
	.section .mdebug.abi32
	.previous
#APP
	.macro _ssnop; sll $0, $0, 1; .endm
	.macro _ehb; sll $0, $0, 3; .endm
	.macro mtc0_tlbw_hazard; nop; nop; .endm
	.macro tlbw_use_hazard; nop; nop; nop; .endm
	.macro tlb_probe_hazard; nop; nop; nop; .endm
	.macro irq_enable_hazard; _ssnop; _ssnop; _ssnop;; .endm
	.macro irq_disable_hazard; nop; nop; nop; .endm
	.macro back_to_back_c0_hazard; _ssnop; _ssnop; _ssnop;; .endm
		.macro	raw_local_irq_enable				
	.set	push						
	.set	reorder						
	.set	noat						
	mfc0	$1,$12						
	ori	$1,0x1f						
	xori	$1,0x1e						
	mtc0	$1,$12						
	irq_enable_hazard					
	.set	pop						
	.endm
		.macro	raw_local_irq_disable
	.set	push						
	.set	noat						
	mfc0	$1,$12						
	ori	$1,0x1f						
	xori	$1,0x1f						
	.set	noreorder					
	mtc0	$1,$12						
	irq_disable_hazard					
	.set	pop						
	.endm							

		.macro	raw_local_save_flags flags			
	.set	push						
	.set	reorder						
	mfc0	\flags, $12					
	.set	pop						
	.endm							

		.macro	raw_local_irq_save result			
	.set	push						
	.set	reorder						
	.set	noat						
	mfc0	\result, $12					
	ori	$1, \result, 0x1f				
	xori	$1, 0x1f					
	.set	noreorder					
	mtc0	$1, $12						
	irq_disable_hazard					
	.set	pop						
	.endm							

		.macro	raw_local_irq_restore flags			
	.set	push						
	.set	noreorder					
	.set	noat						
	mfc0	$1, $12						
	andi	\flags, 1					
	ori	$1, 0x1f					
	xori	$1, 0x1f					
	or	\flags, $1					
	mtc0	\flags, $12					
	irq_disable_hazard					
	.set	pop						
	.endm							

#NO_APP
	.globl	udp_bcast_pin
	.data
	.align	2
	.type	udp_bcast_pin, @object
	.size	udp_bcast_pin, 64
udp_bcast_pin:
	.word	5
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast
	.align	2
	.type	udp_bcast, @object
	.size	udp_bcast, 64
udp_bcast:
	.word	4
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast_pin
	.align	2
	.type	udp_mcast_pin, @object
	.size	udp_mcast_pin, 64
udp_mcast_pin:
	.word	3
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast
	.align	2
	.type	udp_mcast, @object
	.size	udp_mcast, 64
udp_mcast:
	.word	2
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	default_key_iv
	.align	2
	.type	default_key_iv, @object
	.size	default_key_iv, 8
default_key_iv:
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.globl	g_sc_ignore_overlap
	.align	2
	.type	g_sc_ignore_overlap, @object
	.size	g_sc_ignore_overlap, 4
g_sc_ignore_overlap:
	.word	0
	.globl	g_sc_check_level
	.align	2
	.type	g_sc_check_level, @object
	.size	g_sc_check_level, 4
g_sc_check_level:
	.word	0
	.globl	g_sc_debug
	.align	2
	.type	g_sc_debug, @object
	.size	g_sc_debug, 4
g_sc_debug:
	.word	0
	.globl	null_mac
	.align	2
	.type	null_mac, @object
	.size	null_mac, 6
null_mac:
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	g_ios_mac
	.align	2
	.type	g_ios_mac, @object
	.size	g_ios_mac, 6
g_ios_mac:
	.byte	2
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	g_sc_is_vxd
	.align	2
	.type	g_sc_is_vxd, @object
	.size	g_sc_is_vxd, 4
g_sc_is_vxd:
	.word	0
	.globl	g_sc_send_ack_round
	.align	2
	.type	g_sc_send_ack_round, @object
	.size	g_sc_send_ack_round, 4
g_sc_send_ack_round:
	.word	0
	.globl	sequence
	.align	2
	.type	sequence, @object
	.size	sequence, 4
sequence:
	.word	0
	.globl	use_ios7_mac
	.align	2
	.type	use_ios7_mac, @object
	.size	use_ios7_mac, 4
use_ios7_mac:
	.word	0
	.globl	finish_sync
	.align	2
	.type	finish_sync, @object
	.size	finish_sync, 4
finish_sync:
	.word	0
	.globl	profile_pkt_index
	.align	2
	.type	profile_pkt_index, @object
	.size	profile_pkt_index, 4
profile_pkt_index:
	.word	0
	.globl	sync_pkt_index
	.align	2
	.type	sync_pkt_index, @object
	.size	sync_pkt_index, 4
sync_pkt_index:
	.word	0
	.align	2
	.type	radom_value, @object
	.size	radom_value, 4
radom_value:
	.byte	0
	.space	3
	.align	2
	.type	mcast_udp_buffer, @object
	.size	mcast_udp_buffer, 65
mcast_udp_buffer:
	.ascii	"8CmT/ J(3_aE R_UFR}`mtwF=)Qfjtn^S_1/ffg<_C7yw's}?'_'n&2~"
	.ascii	"Blm&_k?6\000"
	.section	.text.bytecopy,"ax",@progbits
	.align	2
	.globl	bytecopy
	.ent	bytecopy
	.type	bytecopy, @function
bytecopy:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$8,$4
	beq	$6,$0,$L7
	move	$7,$0

$L5:
	addu	$2,$8,$7
	addu	$4,$5,$7
	lbu	$3,0($2)
	addiu	$7,$7,1
	sltu	$2,$7,$6
	bne	$2,$0,$L5
	sb	$3,0($4)

$L7:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	bytecopy
	.rdata
	.align	2
$LC0:
	.ascii	"    \000"
	.align	2
$LC1:
	.ascii	"%02x\000"
	.align	2
$LC2:
	.ascii	"\n\000"
	.section	.text.bytedump,"ax",@progbits
	.align	2
	.globl	bytedump
	.ent	bytedump
	.type	bytedump, @function
bytedump:
	.set	nomips16
	.frame	$sp,32,$31		# vars= 0, regs= 4/0, args= 16, gp= 0
	.mask	0x80070000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$18,24($sp)
	move	$18,$4
	sw	$17,20($sp)
	move	$17,$5
	sw	$16,16($sp)
	move	$16,$0
	beq	$5,$0,$L18
	sw	$31,28($sp)

	li	$3,715784192			# 0x2aaa0000
$L20:
	sra	$2,$16,31
	ori	$3,$3,0xaaab
	mult	$16,$3
	mfhi	$3
	subu	$3,$3,$2
	sll	$2,$3,1
	addu	$2,$2,$3
	sll	$2,$2,1
	bne	$16,$2,$L19
	addu	$2,$18,$16

	lui	$4,%hi($LC0)
	blez	$16,$L19
	addiu	$4,$4,%lo($LC0)

	jal	panic_printk
	nop

	addu	$2,$18,$16
$L19:
	lui	$4,%hi($LC1)
	lbu	$5,0($2)
	addiu	$4,$4,%lo($LC1)
	jal	panic_printk
	addiu	$16,$16,1

	sltu	$2,$16,$17
	bne	$2,$0,$L20
	li	$3,715784192			# 0x2aaa0000

$L18:
	lui	$4,%hi($LC2)
	jal	panic_printk
	addiu	$4,$4,%lo($LC2)

	move	$2,$0
	lw	$31,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	bytedump
	.section	.text.get_bssid,"ax",@progbits
	.align	2
	.globl	get_bssid
	.ent	get_bssid
	.type	get_bssid, @function
get_bssid:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lhu	$2,0($4)
	srl	$3,$2,1
	andi	$2,$2,0x1
	sll	$2,$2,1
	andi	$3,$3,0x1
	or	$3,$2,$3
	li	$2,1			# 0x1
	beq	$3,$2,$L22
	addiu	$5,$4,10

	beq	$3,$0,$L22
	addiu	$5,$4,16

	li	$2,2			# 0x2
	beq	$3,$2,$L22
	addiu	$5,$4,4

	addiu	$5,$4,10
$L22:
	j	$31
	move	$2,$5

	.set	macro
	.set	reorder
	.end	get_bssid
	.section	.text.rtk_sc_register_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_register_pattern
	.ent	rtk_sc_register_pattern
	.type	rtk_sc_register_pattern, @function
rtk_sc_register_pattern:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(g_sc_ctx)
	move	$7,$4
	addiu	$5,$2,%lo(g_sc_ctx)
	lw	$3,2672($5)
	sll	$4,$3,2
	addiu	$6,$3,1
	addu	$4,$4,$5
	lw	$3,2416($4)
	bne	$3,$0,$L28
	move	$2,$0

	sw	$7,2416($4)
$L28:
	j	$31
	sw	$6,2672($5)

	.set	macro
	.set	reorder
	.end	rtk_sc_register_pattern
	.section	.text.CHECKSUM_OK,"ax",@progbits
	.align	2
	.globl	CHECKSUM_OK
	.ent	CHECKSUM_OK
	.type	CHECKSUM_OK, @function
CHECKSUM_OK:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$7,$0
	blez	$5,$L38
	move	$6,$0

$L33:
	addu	$2,$4,$6
	addiu	$6,$6,1
	lbu	$2,0($2)
	slt	$3,$6,$5
	addu	$2,$7,$2
	bne	$3,$0,$L33
	andi	$7,$2,0x00ff

	bne	$7,$0,$L39
	move	$2,$0

$L38:
	li	$2,1			# 0x1
$L39:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	CHECKSUM_OK
	.section	.text.checksum,"ax",@progbits
	.align	2
	.globl	checksum
	.ent	checksum
	.type	checksum, @function
checksum:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	slt	$2,$5,2
	bne	$2,$0,$L46
	move	$6,$0

$L43:
	lhu	$2,0($4)
	addiu	$5,$5,-2
	slt	$3,$5,2
	addiu	$4,$4,2
	beq	$3,$0,$L43
	addu	$6,$6,$2

$L46:
	beq	$5,$0,$L47
	andi	$3,$6,0xffff

	lbu	$2,0($4)
	addu	$6,$6,$2
	andi	$3,$6,0xffff
$L47:
	srl	$2,$6,16
	addu	$6,$2,$3
	srl	$2,$6,16
	addu	$6,$6,$2
	nor	$2,$0,$6
	j	$31
	andi	$2,$2,0xffff

	.set	macro
	.set	reorder
	.end	checksum
	.section	.text.rtk_sc_set_ack_pkt,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_pkt
	.ent	rtk_sc_set_ack_pkt
	.type	rtk_sc_set_ack_pkt, @function
rtk_sc_set_ack_pkt:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_pkt
	.section	.text.send_simple_config_ack,"ax",@progbits
	.align	2
	.globl	send_simple_config_ack
	.ent	send_simple_config_ack
	.type	send_simple_config_ack, @function
send_simple_config_ack:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	send_simple_config_ack
	.section	.text.rtk_sc_check_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_pattern
	.ent	rtk_sc_check_pattern
	.type	rtk_sc_check_pattern, @function
rtk_sc_check_pattern:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,40($4)
	beq	$3,$0,$L51
	move	$2,$0

	jal	$3
	nop

$L51:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_check_pattern
	.section	.text.rtk_sc_generate_key,"ax",@progbits
	.align	2
	.globl	rtk_sc_generate_key
	.ent	rtk_sc_generate_key
	.type	rtk_sc_generate_key, @function
rtk_sc_generate_key:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,48($4)
	beq	$3,$0,$L53
	move	$2,$0

	jal	$3
	nop

$L53:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_generate_key
	.section	.text.rtk_sc_get_cipher_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_cipher_info
	.ent	rtk_sc_get_cipher_info
	.type	rtk_sc_get_cipher_info, @function
rtk_sc_get_cipher_info:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,44($4)
	beq	$3,$0,$L55
	move	$2,$0

	jal	$3
	nop

$L55:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_get_cipher_info
	.section	.text.rtk_sc_decode_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_decode_profile
	.ent	rtk_sc_decode_profile
	.type	rtk_sc_decode_profile, @function
rtk_sc_decode_profile:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,52($4)
	beq	$3,$0,$L57
	move	$2,$0

	jal	$3
	nop

$L57:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_decode_profile
	.section	.text.rtk_sc_get_tlv_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_tlv_info
	.ent	rtk_sc_get_tlv_info
	.type	rtk_sc_get_tlv_info, @function
rtk_sc_get_tlv_info:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,56($4)
	beq	$3,$0,$L59
	move	$2,$0

	jal	$3
	nop

$L59:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_get_tlv_info
	.section	.text.rtk_sc_set_ack_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_info
	.ent	rtk_sc_set_ack_info
	.type	rtk_sc_set_ack_info, @function
rtk_sc_set_ack_info:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,16($sp)
	lw	$3,60($4)
	beq	$3,$0,$L61
	move	$2,$0

	jal	$3
	nop

$L61:
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_info
	.rdata
	.align	2
$LC3:
	.ascii	"The simple config don't support this type in prifole now"
	.ascii	"\n\000"
	.align	2
$LC4:
	.ascii	"the profile don't include necessary info\n\000"
	.section	.text.parse_tlv_info,"ax",@progbits
	.align	2
	.globl	parse_tlv_info
	.ent	parse_tlv_info
	.type	parse_tlv_info, @function
parse_tlv_info:
	.set	nomips16
	.frame	$sp,56,$31		# vars= 0, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-56
	andi	$7,$7,0x00ff
	li	$2,1			# 0x1
	sw	$fp,48($sp)
	move	$fp,$0
	sw	$23,44($sp)
	move	$23,$0
	sw	$22,40($sp)
	move	$22,$0
	sw	$21,36($sp)
	move	$21,$4
	sw	$20,32($sp)
	andi	$20,$6,0x00ff
	sw	$19,28($sp)
	move	$19,$0
	sw	$18,24($sp)
	move	$18,$5
	sw	$31,52($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	bne	$7,$2,$L63
	sw	$5,60($sp)

	beq	$20,$0,$L123
	slt	$2,$19,$20

$L84:
	lbu	$6,0($18)
	li	$2,1			# 0x1
	andi	$3,$6,0x3
	bne	$3,$2,$L66
	li	$2,2			# 0x2

	bne	$fp,$0,$L119
	srl	$17,$6,2

	slt	$2,$17,33
	beq	$2,$0,$L119
	li	$fp,1			# 0x1

	addiu	$16,$21,30
	addiu	$18,$18,1
	move	$4,$16
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	move	$4,$18
	move	$5,$16
	jal	bytecopy
	move	$6,$17

	addu	$2,$19,$17
	addu	$18,$18,$17
	j	$L70
	addiu	$19,$2,1

$L66:
	bne	$3,$2,$L71
	li	$2,3			# 0x3

	bne	$22,$0,$L119
	srl	$17,$6,2

	addiu	$16,$21,94
	li	$2,64			# 0x40
	addiu	$18,$18,1
	movz	$17,$2,$17		#conditional move
	move	$4,$16
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	move	$4,$18
	move	$5,$16
	jal	bytecopy
	move	$6,$17

	addu	$2,$19,$17
	addu	$18,$18,$17
	addiu	$19,$2,1
	j	$L70
	li	$22,1			# 0x1

$L71:
	bne	$3,$2,$L76
	nop

	bne	$23,$0,$L119
	srl	$17,$6,2

	li	$2,4			# 0x4
	bne	$17,$2,$L119
	li	$23,1			# 0x1

	addiu	$18,$18,1
	addiu	$5,$21,256
	move	$4,$18
	jal	bytecopy
	li	$6,4			# 0x4

	addiu	$18,$18,4
	j	$L70
	addiu	$19,$19,5

$L76:
	bne	$6,$0,$L62
	li	$2,-1			# 0xffffffff

	j	$L123
	slt	$2,$19,$20

$L70:
	slt	$2,$20,$19
	bne	$2,$0,$L62
	li	$2,-1			# 0xffffffff

	slt	$2,$19,$20
	bne	$2,$0,$L84
	nop

$L123:
	beq	$2,$0,$L89
	nop

$L88:
	lw	$3,60($sp)
	addu	$2,$19,$3
	addiu	$19,$19,1
	lbu	$2,0($2)
	bne	$2,$0,$L119
	slt	$3,$19,$20

	bne	$3,$0,$L88
	nop

	j	$L89
	nop

$L63:
	bne	$7,$0,$L89
	nop

	beq	$20,$0,$L89
	nop

$L102:
	lbu	$3,0($18)
	addiu	$16,$21,30
	li	$2,1			# 0x1
	move	$5,$0
	move	$4,$16
	beq	$3,$2,$L121
	li	$6,64			# 0x40

	addiu	$16,$21,94
	li	$2,2			# 0x2
	move	$5,$0
	bne	$3,$2,$L95
	move	$4,$16

$L121:
	addiu	$18,$18,1
	lbu	$17,0($18)
	jal	memset
	addiu	$18,$18,1

	move	$4,$18
	move	$5,$16
	jal	bytecopy
	move	$6,$17

	addu	$18,$18,$17
	j	$L120
	addu	$2,$19,$17

$L95:
	li	$2,3			# 0x3
	addiu	$18,$18,1
	bne	$3,$2,$L97
	addiu	$5,$21,256

	lbu	$17,0($18)
	addiu	$18,$18,1
	move	$4,$18
	move	$6,$17
	jal	bytecopy
	addu	$18,$18,$17

	j	$L120
	addu	$2,$19,$17

$L97:
	beq	$3,$0,$L89
	lui	$4,%hi($LC3)

	j	$L122
	addiu	$4,$4,%lo($LC3)

$L120:
	addiu	$19,$2,2
	slt	$2,$19,$20
	bne	$2,$0,$L102
	nop

$L89:
	lw	$5,256($21)
	bne	$5,$0,$L103
	lui	$4,%hi($LC4)

	addiu	$4,$4,%lo($LC4)
$L122:
	jal	panic_printk
	nop

$L119:
	j	$L62
	li	$2,-1			# 0xffffffff

$L103:
	jal	rtk_sc_set_value
	li	$4,12			# 0xc

	move	$2,$0
$L62:
	lw	$31,52($sp)
	lw	$fp,48($sp)
	lw	$23,44($sp)
	lw	$22,40($sp)
	lw	$21,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,56

	.set	macro
	.set	reorder
	.end	parse_tlv_info
	.section	.text.mcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_cipher_info
	.ent	mcast_udp_get_cipher_info
	.type	mcast_udp_get_cipher_info, @function
mcast_udp_get_cipher_info:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$7,1852($5)
	beq	$7,$0,$L130
	move	$8,$0

	addiu	$6,$5,319
$L128:
	addu	$2,$8,$5
	addiu	$8,$8,1
	lbu	$3,0($6)
	sltu	$4,$8,$7
	addiu	$6,$6,6
	bne	$4,$0,$L128
	sb	$3,2152($2)

$L130:
	move	$2,$0
	j	$31
	sw	$7,2408($5)

	.set	macro
	.set	reorder
	.end	mcast_udp_get_cipher_info
	.section	.text.bcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_cipher_info
	.ent	bcast_udp_get_cipher_info
	.type	bcast_udp_get_cipher_info, @function
bcast_udp_get_cipher_info:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$8,1852($5)
	beq	$8,$0,$L143
	move	$6,$0

$L135:
	addu	$3,$6,$5
	addiu	$6,$6,1
	sltu	$2,$6,$8
	bne	$2,$0,$L135
	sb	$0,2152($3)

$L143:
	beq	$8,$0,$L145
	move	$6,$0

	li	$10,1			# 0x1
	li	$9,-16
$L141:
	srl	$2,$6,31
	addu	$7,$6,$5
	addu	$2,$6,$2
	sra	$2,$2,1
	sll	$3,$2,1
	subu	$3,$6,$3
	bne	$3,$10,$L139
	addu	$4,$2,$5

	lbu	$2,2874($7)
	lbu	$3,2152($4)
	j	$L146
	andi	$2,$2,0xf

$L139:
	lbu	$2,2874($7)
	lbu	$3,2152($4)
	sll	$2,$2,4
	and	$2,$2,$9
$L146:
	or	$2,$2,$3
	addiu	$6,$6,1
	sb	$2,2152($4)
	sltu	$2,$6,$8
	bne	$2,$0,$L141
	nop

$L145:
	lw	$3,1852($5)
	move	$2,$0
	srl	$3,$3,1
	j	$31
	sw	$3,2408($5)

	.set	macro
	.set	reorder
	.end	bcast_udp_get_cipher_info
	.section	.text.mcast_udp_generate_key,"ax",@progbits
	.align	2
	.globl	mcast_udp_generate_key
	.ent	mcast_udp_generate_key
	.type	mcast_udp_generate_key, @function
mcast_udp_generate_key:
	.set	nomips16
	.frame	$sp,416,$31		# vars= 360, regs= 8/0, args= 24, gp= 0
	.mask	0x807f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-416
	li	$6,256			# 0x100
	sw	$22,408($sp)
	move	$22,$5
	sw	$20,400($sp)
	move	$5,$0
	move	$20,$4
	addiu	$4,$sp,24
	sw	$31,412($sp)
	sw	$21,404($sp)
	sw	$19,396($sp)
	sw	$18,392($sp)
	sw	$17,388($sp)
	jal	memset
	sw	$16,384($sp)

	lui	$2,%hi(use_ios7_mac)
	lw	$2,%lo(use_ios7_mac)($2)
	lui	$5,%hi(g_ios_mac)
	addiu	$4,$sp,24
	addiu	$5,$5,%lo(g_ios_mac)
	bne	$2,$0,$L152
	li	$6,6			# 0x6

	addiu	$4,$sp,24
	addiu	$5,$22,12
	li	$6,6			# 0x6
$L152:
	jal	memcpy
	nop

	addiu	$4,$sp,30
	lbu	$2,2806($22)
	addiu	$5,$22,2676
	beq	$2,$0,$L150
	lui	$3,%hi(g_sc_pin_len)

	lw	$6,%lo(g_sc_pin_len)($3)
	j	$L153
	nop

$L150:
	lw	$6,%lo(g_sc_pin_len)($3)
	addiu	$5,$22,2741
	addiu	$4,$sp,30
$L153:
	jal	memcpy
	lui	$17,%hi(mcast_udp_buffer)

	lui	$2,%hi(g_sc_pin_len)
	addiu	$18,$sp,24
	lw	$16,%lo(g_sc_pin_len)($2)
	jal	strlen
	addiu	$4,$17,%lo(mcast_udp_buffer)

	addiu	$5,$17,%lo(mcast_udp_buffer)
	addiu	$16,$16,6
	move	$6,$2
	addu	$4,$18,$16
	jal	memcpy
	addiu	$19,$sp,296

	jal	strlen
	addiu	$4,$17,%lo(mcast_udp_buffer)

	lui	$5,%hi(radom_value)
	addu	$16,$16,$2
	addiu	$5,$5,%lo(radom_value)
	addu	$4,$18,$16
	jal	memcpy
	li	$6,4			# 0x4

	addiu	$16,$16,4
	move	$4,$19
	jal	wlan_MD5_Init
	addiu	$21,$sp,280

	move	$6,$16
	move	$4,$19
	jal	wlan_MD5_Update
	move	$5,$18

	addiu	$20,$20,8
	move	$5,$19
	jal	wlan_MD5_Final
	move	$4,$21

	jal	strlen
	move	$4,$20

	move	$5,$20
	addu	$4,$18,$16
	jal	memcpy
	move	$6,$2

	jal	strlen
	move	$4,$20

	move	$4,$18
	addu	$5,$16,$2
	move	$6,$21
	addiu	$2,$22,2116
	li	$7,16			# 0x10
	jal	hmac_sha1
	sw	$2,16($sp)

	li	$2,16			# 0x10
	sw	$2,2148($22)
	move	$2,$0
	lw	$31,412($sp)
	lw	$22,408($sp)
	lw	$21,404($sp)
	lw	$20,400($sp)
	lw	$19,396($sp)
	lw	$18,392($sp)
	lw	$17,388($sp)
	lw	$16,384($sp)
	j	$31
	addiu	$sp,$sp,416

	.set	macro
	.set	reorder
	.end	mcast_udp_generate_key
	.rdata
	.align	2
$LC5:
	.ascii	"the pin code is %s, the pin length is %d\n\000"
	.align	2
$LC6:
	.ascii	"It is not invalid pattern\n\000"
	.align	2
$LC7:
	.ascii	"this client MUST have pin\n\000"
	.section	.text.mcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_pattern
	.ent	mcast_udp_get_pattern
	.type	mcast_udp_get_pattern, @function
mcast_udp_get_pattern:
	.set	nomips16
	.frame	$sp,256,$31		# vars= 208, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-8
	.fmask	0x00000000,0
	addiu	$sp,$sp,-256
	li	$4,6			# 0x6
	sw	$31,248($sp)
	sw	$21,244($sp)
	sw	$20,240($sp)
	addiu	$20,$sp,160
	sw	$19,236($sp)
	addiu	$19,$sp,88
	sw	$16,224($sp)
	move	$16,$5
	sw	$18,232($sp)
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	sw	$17,228($sp)
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	addiu	$5,$sp,16
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$21,$2
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$19
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$20
	.set	macro
	.set	reorder

	li	$7,2			# 0x2
	lbu	$2,271($16)
	lbu	$4,277($16)
	lbu	$3,265($16)
	sll	$2,$2,8
	addu	$2,$4,$2
	sll	$3,$3,16
	addu	$5,$2,$3
	bne	$5,$7,$L155
	lbu	$2,263($16)
	lbu	$3,270($16)
	lbu	$6,283($16)
	addu	$2,$2,$3
	addu	$2,$2,$4
	addu	$5,$2,$6
	lbu	$2,289($16)
	andi	$5,$5,0x00ff
	.set	noreorder
	.set	nomacro
	bne	$5,$2,$L181
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

	addiu	$2,$6,-9
	addiu	$4,$sp,16
	sw	$7,8($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	sw	$2,1852($16)
	.set	macro
	.set	reorder

	addiu	$4,$16,2741
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,16
	.set	macro
	.set	reorder

	lui	$3,%hi(g_sc_pin_len)
	addu	$4,$2,$16
	sw	$2,%lo(g_sc_pin_len)($3)
	sb	$0,2741($4)
	.set	noreorder
	.set	nomacro
	j	$L158
	sb	$0,2806($16)
	.set	macro
	.set	reorder

$L155:
	li	$7,3			# 0x3
	.set	noreorder
	.set	nomacro
	bne	$5,$7,$L159
	lui	$2,%hi(g_sc_debug)
	.set	macro
	.set	reorder

	lbu	$2,263($16)
	lbu	$3,270($16)
	lbu	$6,283($16)
	addu	$2,$2,$3
	addu	$2,$2,$4
	addu	$5,$2,$6
	lbu	$2,289($16)
	andi	$5,$5,0x00ff
	.set	noreorder
	.set	nomacro
	bne	$5,$2,$L181
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

	addiu	$2,$6,-9
	move	$4,$19
	sw	$2,1852($16)
	li	$2,1
	sw	$7,8($16)
	lui	$18,%hi(g_sc_pin_len)
	sb	$2,2806($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$17,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L162
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,16
	.set	macro
	.set	reorder

	move	$4,$17
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,16
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L163
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

$L162:
	move	$4,$17
	move	$5,$19
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

$L163:
	lw	$2,%lo(g_sc_pin_len)($18)
	addu	$2,$2,$16
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$3,$2,$L158
	lui	$4,%hi($LC5)
	.set	macro
	.set	reorder

	lw	$6,%lo(g_sc_pin_len)($18)
	addiu	$4,$4,%lo($LC5)
	.set	noreorder
	.set	nomacro
	jal	panic_printk
	addiu	$5,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L181
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

$L159:
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L170
	lui	$4,%hi($LC6)
	.set	noreorder
	.set	nomacro
	j	$L180
	addiu	$4,$4,%lo($LC6)
	.set	macro
	.set	reorder

$L158:
	li	$2,1			# 0x1
$L181:
	.set	noreorder
	.set	nomacro
	bne	$21,$2,$L182
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

	lbu	$2,2806($16)
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L169
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L170
	lui	$4,%hi($LC7)
	addiu	$4,$4,%lo($LC7)
$L180:
	jal	panic_printk
$L170:
	.set	noreorder
	.set	nomacro
	j	$L154
	li	$2,-1			# 0xffffffff
	.set	macro
	.set	reorder

$L169:
$L182:
	li	$5,5			# 0x5
	addiu	$7,$2,%lo(radom_value)
	addiu	$6,$16,295
$L176:
	addu	$2,$5,$7
	addiu	$5,$5,1
	lbu	$3,0($6)
	slt	$4,$5,9
	addiu	$6,$6,6
	.set	noreorder
	.set	nomacro
	bne	$4,$0,$L176
	sb	$3,-5($2)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	addiu	$3,$16,2810
	sh	$2,2808($16)
#APP
	.set	noreorder
	.set	noat
1:	lbu	$1,($20)
	addiu	$20,1
	sb	$1,($3)
	bnez	$1,1b
	addiu	$3,1
	.set	at
	.set	reorder
#NO_APP
	move	$2,$0
$L154:
	lw	$31,248($sp)
	lw	$21,244($sp)
	lw	$20,240($sp)
	lw	$19,236($sp)
	lw	$18,232($sp)
	lw	$17,228($sp)
	lw	$16,224($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,256
	.set	macro
	.set	reorder

	.end	mcast_udp_get_pattern
	.section	.text.bcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_pattern
	.ent	bcast_udp_get_pattern
	.type	bcast_udp_get_pattern, @function
bcast_udp_get_pattern:
	.set	nomips16
	.frame	$sp,256,$31		# vars= 208, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-8
	.fmask	0x00000000,0
	addiu	$sp,$sp,-256
	li	$4,6			# 0x6
	sw	$31,248($sp)
	sw	$21,244($sp)
	addiu	$21,$sp,160
	sw	$20,240($sp)
	lui	$20,%hi(g_sc_pin_len)
	sw	$19,236($sp)
	move	$19,$5
	sw	$18,232($sp)
	addiu	$18,$19,2676
	sw	$17,228($sp)
	sw	$16,224($sp)
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	addiu	$16,$sp,88
	.set	macro
	.set	reorder

	addiu	$5,$sp,16
	li	$4,21			# 0x15
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$17,$2
	.set	macro
	.set	reorder

	move	$5,$16
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	li	$4,20			# 0x14
	.set	macro
	.set	reorder

	move	$5,$21
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	li	$4,23			# 0x17
	.set	macro
	.set	reorder

	lui	$2,%hi(g_sc_ctx+1852)
	lw	$3,%lo(g_sc_ctx+1852)($2)
	li	$2,5			# 0x5
	move	$4,$16
	sw	$2,8($19)
	sw	$3,1852($19)
	.set	noreorder
	.set	nomacro
	jal	strlen
	sb	$17,2806($19)
	.set	macro
	.set	reorder

	addiu	$4,$sp,16
	move	$5,$16
	move	$6,$2
	.set	noreorder
	.set	nomacro
	bne	$17,$0,$L184
	sw	$2,%lo(g_sc_pin_len)($20)
	.set	macro
	.set	reorder

	jal	strlen
	addiu	$5,$sp,16
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$18
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,16
	.set	macro
	.set	reorder

	addiu	$4,$19,2741
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,16
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L185
	sw	$2,%lo(g_sc_pin_len)($20)
	.set	macro
	.set	reorder

$L184:
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$18
	.set	macro
	.set	reorder

$L185:
	lw	$2,%lo(g_sc_pin_len)($20)
	lui	$4,%hi($LC5)
	addiu	$5,$19,2676
	addu	$2,$2,$19
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$3,$2,$L186
	addiu	$4,$4,%lo($LC5)
	.set	macro
	.set	reorder

	lw	$6,%lo(g_sc_pin_len)($20)
	jal	panic_printk
$L186:
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	sh	$2,2808($19)
	addiu	$2,$19,2810
#APP
	.set	noreorder
	.set	noat
1:	lbu	$1,($21)
	addiu	$21,1
	sb	$1,($2)
	bnez	$1,1b
	addiu	$2,1
	.set	at
	.set	reorder
#NO_APP
	lui	$5,%hi(radom_value)
	li	$3,50
	addiu	$4,$5,%lo(radom_value)
	li	$2,53
	sb	$3,%lo(radom_value)($5)
	li	$3,51
	lw	$31,248($sp)
	lw	$21,244($sp)
	lw	$20,240($sp)
	lw	$19,236($sp)
	lw	$18,232($sp)
	lw	$17,228($sp)
	lw	$16,224($sp)
	addiu	$sp,$sp,256
	sb	$2,3($4)
	move	$2,$0
	sb	$3,1($4)
	li	$3,52
	.set	noreorder
	.set	nomacro
	j	$31
	sb	$3,2($4)
	.set	macro
	.set	reorder

	.end	bcast_udp_get_pattern
	.rdata
	.align	2
$LC8:
	.ascii	"sc_mcast_udp\000"
	.section	.text.mcast_udp_get_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_profile
	.ent	mcast_udp_get_profile
	.type	mcast_udp_get_profile, @function
mcast_udp_get_profile:
	.set	nomips16
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-8
	.fmask	0x00000000,0
	addiu	$sp,$sp,-32
	addiu	$3,$4,8
	sw	$17,20($sp)
	move	$17,$5
	lui	$5,%hi($LC8)
	addiu	$9,$17,1856
	sw	$31,24($sp)
	addiu	$2,$5,%lo($LC8)
	sw	$16,16($sp)
#APP
	.set	noreorder
	.set	noat
	lbu	$8,($3)
1:	lbu	$1,($2)
	addiu	$3,1
	bne	$1,$8,2f
	addiu	$2,1
	bnez	$8,1b
	lbu	$8,($3)
	move	$8,$1
2:	subu	$8,$1
3:	.set	at
	.set	reorder
#NO_APP
	lui	$5,%hi(default_key_iv)
	move	$4,$9
	addiu	$5,$5,%lo(default_key_iv)
	li	$6,8			# 0x8
	lw	$16,2112($17)
	.set	noreorder
	.set	nomacro
	bne	$8,$0,$L190
	li	$7,1			# 0x1
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	memcmp
	addiu	$16,$16,-8
	.set	macro
	.set	reorder

	move	$4,$17
	andi	$6,$16,0x00ff
	addiu	$5,$17,1864
	move	$7,$0
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L189
	li	$3,-1			# 0xffffffff
	.set	macro
	.set	reorder

	j	$L194
$L190:
	move	$4,$17
	move	$5,$9
	andi	$6,$16,0x00ff
$L194:
	jal	parse_tlv_info
	move	$3,$2
$L189:
	lw	$31,24($sp)
	move	$2,$3
	lw	$17,20($sp)
	lw	$16,16($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

	.end	mcast_udp_get_profile
	.section	.text.mcast_udp_decode_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_decode_profile
	.ent	mcast_udp_decode_profile
	.type	mcast_udp_decode_profile, @function
mcast_udp_decode_profile:
	.set	nomips16
	.frame	$sp,32,$31		# vars= 0, regs= 2/0, args= 24, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$16,24($sp)
	move	$16,$5
	lw	$7,2148($16)
	addiu	$2,$16,1856
	lw	$5,2408($5)
	addiu	$4,$16,2152
	addiu	$6,$16,2116
	jal	AES_UnWRAP
	sw	$2,16($sp)

	move	$2,$0
	lw	$3,2408($16)
	lw	$31,28($sp)
	sw	$3,2112($16)
	lw	$16,24($sp)
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	mcast_udp_decode_profile
	.section	.text.mcast_udp_send_ack,"ax",@progbits
	.align	2
	.globl	mcast_udp_send_ack
	.ent	mcast_udp_send_ack
	.type	mcast_udp_send_ack, @function
mcast_udp_send_ack:
	.set	nomips16
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_send_ack
	.section	.text.rtk_sc_clean_profile_value,"ax",@progbits
	.align	2
	.globl	rtk_sc_clean_profile_value
	.ent	rtk_sc_clean_profile_value
	.type	rtk_sc_clean_profile_value, @function
rtk_sc_clean_profile_value:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	li	$3,-1			# 0xffffffff
	lui	$2,%hi(g_p4_group)
	sw	$3,%lo(g_p4_group)($2)
	lui	$2,%hi(fix_sa)
	sw	$0,%lo(fix_sa)($2)
	lui	$2,%hi(finish_sync)
	sw	$0,%lo(finish_sync)($2)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$7,%hi(g_sc_ctx)
	lui	$2,%hi(g_pkt_type)
	addiu	$7,$7,%lo(g_sc_ctx)
	sw	$0,%lo(g_pkt_type)($2)
	lui	$4,%hi(g_sc_ctx+12)
	lui	$2,%hi(g_p4_last_seq)
	addiu	$sp,$sp,-24
	sw	$0,2412($7)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	sw	$0,8($7)
	move	$5,$0
	sw	$0,2112($7)
	li	$6,6			# 0x6
	sw	$0,2148($7)
	sw	$0,2408($7)
	sw	$0,%lo(g_p4_last_seq)($2)
	lui	$2,%hi(g_p4_to_ds_hrate)
	sw	$31,16($sp)
	jal	memset
	sw	$0,%lo(g_p4_to_ds_hrate)($2)

	lui	$4,%hi(g_sc_ctx+18)
	addiu	$4,$4,%lo(g_sc_ctx+18)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+24)
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+30)
	addiu	$4,$4,%lo(g_sc_ctx+30)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+94)
	addiu	$4,$4,%lo(g_sc_ctx+94)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+2741)
	addiu	$4,$4,%lo(g_sc_ctx+2741)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2676)
	addiu	$4,$4,%lo(g_sc_ctx+2676)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2810)
	addiu	$4,$4,%lo(g_sc_ctx+2810)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+260)
	addiu	$4,$4,%lo(g_sc_ctx+260)
	move	$5,$0
	jal	memset
	li	$6,54			# 0x36

	lui	$4,%hi(g_sc_ctx+314)
	addiu	$4,$4,%lo(g_sc_ctx+314)
	move	$5,$0
	jal	memset
	li	$6,1536			# 0x600

	lui	$4,%hi(g_sc_ctx+2874)
	addiu	$4,$4,%lo(g_sc_ctx+2874)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_sc_ctx+3130)
	addiu	$4,$4,%lo(g_sc_ctx+3130)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_option_sa)
	addiu	$4,$4,%lo(g_option_sa)
	move	$5,$0
	jal	memset
	li	$6,80			# 0x50

	move	$2,$0
	lw	$31,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_clean_profile_value
	.rdata
	.align	2
$LC9:
	.ascii	"try to clean profile!\n\000"
	.align	2
$LC10:
	.ascii	"df*r43^fdjakfo\000"
	.section	.text.rtk_sc_restart_simple_config,"ax",@progbits
	.align	2
	.globl	rtk_sc_restart_simple_config
	.ent	rtk_sc_restart_simple_config
	.type	rtk_sc_restart_simple_config, @function
rtk_sc_restart_simple_config:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	lui	$2,%hi(g_sc_debug)
	sw	$16,16($sp)
	move	$16,$4
	sw	$31,20($sp)
	lui	$4,%hi($LC9)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L199
	addiu	$4,$4,%lo($LC9)

	jal	panic_printk
	nop

$L199:
	jal	rtk_sc_clean_profile_value
	nop

	lui	$5,%hi($LC10)
	li	$4,25			# 0x19
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo($LC10)

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1000			# 0x3e8

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,18			# 0x12
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,28			# 0x1c
	jal	rtk_sc_set_value
	move	$5,$0

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	move	$2,$0
	lw	$31,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_restart_simple_config
	.rdata
	.align	2
$LC11:
	.ascii	"Register Realtek Simple Config\n\000"
	.section	.text.rtk_sc_init,"ax",@progbits
	.align	2
	.globl	rtk_sc_init
	.ent	rtk_sc_init
	.type	rtk_sc_init, @function
rtk_sc_init:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	move	$5,$0
	sw	$16,16($sp)
	lui	$16,%hi(g_sc_ctx)
	li	$6,3388			# 0xd3c
	addiu	$4,$16,%lo(g_sc_ctx)
	sw	$31,20($sp)
	jal	memset
	addiu	$16,$16,%lo(g_sc_ctx)

	li	$2,256			# 0x100
	lui	$4,%hi(udp_mcast)
	addiu	$4,$4,%lo(udp_mcast)
	jal	rtk_sc_register_pattern
	sw	$2,2112($16)

	lui	$4,%hi(udp_mcast_pin)
	jal	rtk_sc_register_pattern
	addiu	$4,$4,%lo(udp_mcast_pin)

	lui	$4,%hi(udp_bcast_pin)
	jal	rtk_sc_register_pattern
	addiu	$4,$4,%lo(udp_bcast_pin)

	lui	$4,%hi($LC11)
	jal	panic_printk
	addiu	$4,$4,%lo($LC11)

	move	$2,$0
	lw	$31,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_init
	.rdata
	.align	2
$LC12:
	.ascii	"get the profile info fail\n\000"
	.align	2
$LC13:
	.ascii	"get the profile\n\000"
	.align	2
$LC14:
	.ascii	"get the profile and encrypt info now, try to connect rem"
	.ascii	"ote AP\n\000"
	.section	.text.rtk_sc_check_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_profile
	.ent	rtk_sc_check_profile
	.type	rtk_sc_check_profile, @function
rtk_sc_check_profile:
	.set	nomips16
	.frame	$sp,40,$31		# vars= 0, regs= 5/0, args= 16, gp= 0
	.mask	0x800f0000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-40
	sw	$17,20($sp)
	lui	$17,%hi(pp)
	sw	$19,28($sp)
	move	$19,$4
	sw	$16,16($sp)
	lui	$16,%hi(g_sc_ctx)
	lw	$4,%lo(pp)($17)
	addiu	$5,$16,%lo(g_sc_ctx)
	sw	$18,24($sp)
	lui	$18,%hi(use_ios7_mac)
	sw	$31,32($sp)
	jal	rtk_sc_get_cipher_info
	sw	$0,%lo(use_ios7_mac)($18)

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_generate_key
	addiu	$5,$16,%lo(g_sc_ctx)

	bne	$2,$0,$L224
	nop

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_decode_profile
	addiu	$5,$16,%lo(g_sc_ctx)

	bne	$2,$0,$L224
	nop

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$16,%lo(g_sc_ctx)

	beq	$2,$0,$L228
	lui	$5,%hi(g_sc_ctx+94)

$L224:
	lw	$4,%lo(pp)($17)
	li	$2,1			# 0x1
	addiu	$5,$16,%lo(g_sc_ctx)
	jal	rtk_sc_generate_key
	sw	$2,%lo(use_ios7_mac)($18)

	bne	$2,$0,$L207
	nop

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_decode_profile
	addiu	$5,$16,%lo(g_sc_ctx)

	bne	$2,$0,$L207
	nop

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$16,%lo(g_sc_ctx)

$L207:
	beq	$2,$0,$L206
	sw	$0,%lo(use_ios7_mac)($18)

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L210
	lui	$4,%hi($LC12)

	jal	panic_printk
	addiu	$4,$4,%lo($LC12)

$L210:
	lw	$2,%lo(pp)($17)
	lw	$3,0($2)
	li	$2,5			# 0x5
	beq	$3,$2,$L203
	li	$4,-1			# 0xffffffff

	jal	rtk_sc_restart_simple_config
	move	$4,$19

	j	$L203
	li	$4,-1			# 0xffffffff

$L206:
	lui	$5,%hi(g_sc_ctx+94)
$L228:
	li	$4,22			# 0x16
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_ctx+94)

	jal	rtk_sc_get_value
	li	$4,28			# 0x1c

	li	$4,28			# 0x1c
	move	$16,$2
	jal	rtk_sc_set_value
	move	$5,$0

	bne	$16,$0,$L213
	lui	$2,%hi(g_sc_debug)

	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L214
	lui	$4,%hi($LC13)

	jal	panic_printk
	addiu	$4,$4,%lo($LC13)

$L214:
	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	lui	$2,%hi(g_sc_ctx+30)
	lbu	$2,%lo(g_sc_ctx+30)($2)
	beq	$2,$0,$L216
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L225
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L216:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L225:
	jal	rtk_sc_set_string_value
	nop

	move	$4,$19
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	j	$L203
	move	$4,$0

$L213:
	blez	$16,$L203
	move	$4,$0

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L229
	lui	$2,%hi(g_sc_ctx+30)

	lui	$4,%hi($LC14)
	jal	panic_printk
	addiu	$4,$4,%lo($LC14)

	lui	$2,%hi(g_sc_ctx+30)
$L229:
	lbu	$2,%lo(g_sc_ctx+30)($2)
	beq	$2,$0,$L222
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L226
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L222:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L226:
	jal	rtk_sc_set_string_value
	nop

	jal	rtk_sc_set_passwd
	move	$4,$19

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,4			# 0x4

	li	$5,4			# 0x4
	jal	rtk_sc_set_value
	li	$4,7			# 0x7

	jal	rtk_sc_sync_vxd_to_root
	move	$4,$19

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	jal	rtk_sc_start_connect_target
	move	$4,$19

	move	$4,$0
$L203:
	lw	$31,32($sp)
	move	$2,$4
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,40

	.set	macro
	.set	reorder
	.end	rtk_sc_check_profile
	.rdata
	.align	2
$LC15:
	.ascii	"this packet is not profile packet\n\000"
	.section	.text.rtk_sc_valid_profile_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_valid_profile_packet
	.ent	rtk_sc_valid_profile_packet
	.type	rtk_sc_valid_profile_packet, @function
rtk_sc_valid_profile_packet:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-8
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	lui	$2,%hi(g_sc_magic)
	sw	$31,16($sp)
	addiu	$5,$2,%lo(g_sc_magic)
	lw	$3,24($4)
	lw	$6,12($4)
	move	$4,$0
	lbu	$3,3($3)
$L235:
	lw	$2,0($5)
	addu	$2,$2,$3
	beq	$6,$2,$L232
	addiu	$5,$5,4

	addiu	$4,$4,1
	slt	$2,$4,8
	bne	$2,$0,$L235
	nop

$L232:
	li	$2,8			# 0x8
	bne	$4,$2,$L230
	li	$3,1			# 0x1

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L230
	move	$3,$0

	lui	$4,%hi($LC15)
	jal	panic_printk
	addiu	$4,$4,%lo($LC15)

	move	$3,$0
$L230:
	lw	$31,16($sp)
	move	$2,$3
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_valid_profile_packet
	.section	.text.rtk_sc_set_para,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_para
	.ent	rtk_sc_set_para
	.type	rtk_sc_set_para, @function
rtk_sc_set_para:
	.set	nomips16
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	li	$4,8			# 0x8
	sw	$31,20($sp)
	sw	$16,16($sp)
	jal	rtk_sc_get_value
	lui	$16,%hi(g_sc_check_level)

	lui	$3,%hi(g_sc_debug)
	li	$4,16			# 0x10
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_debug)($3)

	li	$4,17			# 0x11
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_check_level)($16)

	lui	$3,%hi(g_sc_ignore_overlap)
	li	$4,29			# 0x1d
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_ignore_overlap)($3)

	lui	$4,%hi(g_sc_magic)
	lw	$6,%lo(g_sc_check_level)($16)
	lui	$3,%hi(g_sc_config_type)
	addiu	$4,$4,%lo(g_sc_magic)
	li	$5,8			# 0x8
	beq	$6,$0,$L241
	sw	$2,%lo(g_sc_config_type)($3)

	jal	rtk_sc_get_magic
	nop

$L241:
	lw	$31,20($sp)
	move	$2,$0
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_set_para
	.rdata
	.align	2
$LC16:
	.ascii	"index is %d, received packet number is %d\n\000"
	.align	2
$LC17:
	.ascii	"sync index is %d\n\000"
	.align	2
$LC18:
	.ascii	"the BSSID is \000"
	.align	2
$LC19:
	.ascii	"the Control Device MAC is \000"
	.align	2
$LC20:
	.ascii	"the option Control Device MAC is \000"
	.align	2
$LC21:
	.ascii	"the option Control Device number is %d, the pkt len is %"
	.ascii	"d\n\000"
	.align	2
$LC22:
	.ascii	"the magic number 1 is %d, the magic number 2 is %d\n\000"
	.align	2
$LC23:
	.ascii	"the total profile packet num is %d\n\000"
	.align	2
$LC24:
	.ascii	"index is %d, total is %d, received %d now!\n\000"
	.align	2
$LC25:
	.ascii	"don't add this data to profile\n\000"
	.align	2
$LC26:
	.ascii	"seq %d is over max length\n\000"
	.align	2
$LC27:
	.ascii	"index is %d, tatal is %d, received %d now!\n\000"
	.align	2
$LC28:
	.ascii	"seq %d is NULL\n\000"
	.section	.text.rtk_sc_start_parse_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_start_parse_packet
	.ent	rtk_sc_start_parse_packet
	.type	rtk_sc_start_parse_packet, @function
rtk_sc_start_parse_packet:
	.set	nomips16
	.frame	$sp,56,$31		# vars= 0, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-56
	sw	$4,56($sp)
	li	$4,13			# 0xd
	sw	$23,44($sp)
	li	$23,-1			# 0xffffffff
	sw	$22,40($sp)
	lui	$22,%hi(g_sc_debug)
	sw	$21,36($sp)
	move	$21,$5
	sw	$18,24($sp)
	sw	$31,52($sp)
	sw	$fp,48($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$17,20($sp)
	jal	rtk_sc_get_value
	sw	$16,16($sp)

	move	$18,$2
	lw	$2,%lo(g_sc_debug)($22)
	bne	$2,$23,$L243
	nop

	lw	$4,24($21)
	jal	bytedump
	li	$5,6			# 0x6

$L243:
	lw	$4,24($21)
	li	$2,1			# 0x1
	lbu	$3,0($4)
	bne	$3,$2,$L504
	addiu	$2,$18,-1

	lbu	$2,1($4)
	bne	$2,$0,$L504
	addiu	$2,$18,-1

	lbu	$3,2($4)
	li	$2,94			# 0x5e
	bne	$3,$2,$L504
	addiu	$2,$18,-1

	lbu	$2,3($4)
	bne	$2,$0,$L504
	addiu	$2,$18,-1

	lbu	$2,5($4)
	beq	$2,$0,$L504
	addiu	$2,$18,-1

	li	$2,-128
	sb	$2,3($4)
	addiu	$2,$18,-1
$L504:
	sltu	$2,$2,2
	beq	$2,$0,$L505
	li	$2,2			# 0x2

	lui	$3,%hi(finish_sync)
	lw	$2,%lo(finish_sync)($3)
	bne	$2,$0,$L245
	li	$2,2			# 0x2

	lw	$4,24($21)
	li	$2,1			# 0x1
	lbu	$16,0($4)
	bne	$16,$2,$L246
	nop

	lbu	$2,1($4)
	bne	$2,$0,$L246
	li	$2,94			# 0x5e

	lbu	$3,2($4)
	bne	$3,$2,$L246
	nop

	jal	CHECKSUM_OK
	li	$5,6			# 0x6

	beq	$2,$0,$L246
	lui	$4,%hi(g_pkt_type)

	li	$3,2			# 0x2
	lw	$2,%lo(g_pkt_type)($4)
	beq	$2,$3,$L246
	lui	$2,%hi(g_sc_config_type)

	lw	$2,%lo(g_sc_config_type)($2)
	andi	$2,$2,0x1
	beq	$2,$0,$L246
	lui	$17,%hi(g_sc_check_level)

	lw	$2,%lo(g_sc_check_level)($17)
	bne	$2,$3,$L506
	lui	$23,%hi(fix_sa)

	jal	rtk_sc_valid_profile_packet
	move	$4,$21

	beq	$2,$0,$L242
	lui	$23,%hi(fix_sa)

$L506:
	lw	$2,%lo(fix_sa)($23)
	bne	$2,$16,$L507
	li	$fp,1			# 0x1

	lui	$4,%hi(g_sc_ctx+12)
	li	$6,6			# 0x6
	lw	$5,28($21)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L249
	li	$fp,1			# 0x1

	lw	$2,24($21)
	lbu	$17,3($2)
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	sll	$3,$17,1
	addu	$3,$3,$17
	sll	$3,$3,1
	addu	$3,$3,$2
	lbu	$2,260($3)
	bne	$2,$0,$L242
	slt	$2,$17,9

	bne	$2,$0,$L252
	move	$5,$3

	move	$19,$0
$L258:
	lw	$2,24($21)
	addu	$4,$5,$19
	addu	$2,$2,$19
	addiu	$19,$19,1
	lbu	$2,0($2)
	slt	$3,$19,6
	bne	$3,$0,$L258
	sb	$2,260($4)

	lui	$5,%hi(profile_pkt_index)
	lw	$2,%lo(profile_pkt_index)($5)
	lw	$3,%lo(g_sc_debug)($22)
	addiu	$4,$2,1
	li	$2,2			# 0x2
	bne	$3,$2,$L251
	sw	$4,%lo(profile_pkt_index)($5)

	li	$3,1717960704			# 0x66660000
	sra	$2,$4,31
	ori	$3,$3,0x6667
	mult	$4,$3
	mfhi	$3
	sra	$3,$3,2
	subu	$3,$3,$2
	sll	$2,$3,2
	addu	$2,$2,$3
	sll	$2,$2,1
	bne	$4,$2,$L260
	li	$2,-1207959552			# 0xb8000000

	li	$4,8388608			# 0x800000
	ori	$2,$2,0x311c
	lw	$3,0($2)
	or	$3,$3,$4
	sw	$3,0($2)
$L260:
	lw	$6,%lo(profile_pkt_index)($5)
	lui	$4,%hi($LC16)
	addiu	$4,$4,%lo($LC16)
	jal	panic_printk
	move	$5,$17

	j	$L502
	lui	$18,%hi(sync_pkt_index)

$L252:
	move	$19,$0
$L267:
	lw	$2,24($21)
	addu	$4,$5,$19
	addu	$2,$2,$19
	addiu	$19,$19,1
	lbu	$2,0($2)
	slt	$3,$19,6
	bne	$3,$0,$L267
	sb	$2,260($4)

	lui	$3,%hi(sync_pkt_index)
	li	$2,1			# 0x1
	lw	$4,%lo(sync_pkt_index)($3)
	sll	$2,$2,$17
	lw	$5,%lo(g_sc_debug)($22)
	or	$4,$4,$2
	li	$2,2			# 0x2
	bne	$5,$2,$L251
	sw	$4,%lo(sync_pkt_index)($3)

	move	$5,$4
	lui	$4,%hi($LC17)
	jal	panic_printk
	addiu	$4,$4,%lo($LC17)

$L251:
	lui	$18,%hi(sync_pkt_index)
$L502:
	li	$3,511			# 0x1ff
	lw	$2,%lo(sync_pkt_index)($18)
	andi	$2,$2,0x1ff
	bne	$2,$3,$L242
	lui	$5,%hi(g_sc_ctx)

	addiu	$2,$5,%lo(g_sc_ctx)
	lw	$2,2672($2)
	blez	$2,$L469
	move	$17,$0

	sll	$2,$17,2
$L510:
	addiu	$16,$5,%lo(g_sc_ctx)
	addu	$2,$2,$16
	addiu	$17,$17,1
	lw	$4,2416($2)
	lui	$2,%hi(pp)
	beq	$4,$0,$L273
	sw	$4,%lo(pp)($2)

	lw	$2,4($4)
	lw	$6,56($sp)
	andi	$2,$2,0x2
	beq	$2,$0,$L273
	move	$5,$16

	jal	rtk_sc_check_pattern
	nop

	bne	$2,$0,$L508
	lui	$5,%hi(g_sc_ctx)

	move	$5,$0
	li	$2,1			# 0x1
	lui	$3,%hi(finish_sync)
	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	sw	$2,%lo(finish_sync)($3)

	lui	$2,%hi(profile_pkt_index)
	lw	$2,%lo(profile_pkt_index)($2)
	lw	$5,1852($16)
	sltu	$2,$2,$5
	bne	$2,$0,$L242
	sw	$0,%lo(sync_pkt_index)($18)

	li	$19,9			# 0x9
	sltu	$2,$19,$5
	beq	$2,$0,$L509
	lui	$2,%hi(g_sc_ctx+1852)

	lui	$2,%hi(g_sc_ctx+314)
	addiu	$2,$2,%lo(g_sc_ctx+314)
	addiu	$3,$2,54
$L281:
	beq	$3,$0,$L509
	lui	$2,%hi(g_sc_ctx+1852)

	addiu	$19,$19,1
	sltu	$2,$19,$5
	bne	$2,$0,$L281
	addiu	$3,$3,6

	lui	$2,%hi(g_sc_ctx+1852)
$L509:
	lw	$2,%lo(g_sc_ctx+1852)($2)
	j	$L501
	nop

$L273:
	lui	$5,%hi(g_sc_ctx)
$L508:
	addiu	$2,$5,%lo(g_sc_ctx)
	lw	$2,2672($2)
	slt	$2,$17,$2
	bne	$2,$0,$L510
	sll	$2,$17,2

$L469:
	lw	$4,56($sp)
	j	$L499
	sw	$0,%lo(fix_sa)($23)

$L249:
	lw	$2,%lo(fix_sa)($23)
$L507:
	bne	$2,$fp,$L285
	lui	$2,%hi(g_sc_ignore_overlap)

	lw	$2,%lo(g_sc_ignore_overlap)($2)
	bne	$2,$0,$L242
	nop

$L285:
	lw	$2,%lo(g_sc_check_level)($17)
	beq	$2,$0,$L286
	nop

	jal	rtk_sc_valid_profile_packet
	move	$4,$21

	beq	$2,$0,$L242
	nop

$L286:
	lw	$5,28($21)
	lui	$18,%hi(g_sc_ctx+12)
	addiu	$4,$18,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lui	$4,%hi(g_smac)
	lw	$5,28($21)
	li	$6,6			# 0x6
	addiu	$4,$4,%lo(g_smac)
	jal	memcpy
	lui	$20,%hi(g_sc_ctx+24)

	lui	$16,%hi(g_sc_bssid)
	lw	$2,0($21)
	lw	$4,188($2)
	jal	get_bssid
	lui	$19,%hi(null_mac)

	addiu	$4,$20,%lo(g_sc_ctx+24)
	move	$17,$2
	move	$5,$2
	jal	memcpy
	li	$6,6			# 0x6

	li	$6,6			# 0x6
	addiu	$4,$16,%lo(g_sc_bssid)
	jal	memcpy
	move	$5,$17

	addiu	$5,$16,%lo(g_sc_bssid)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	move	$4,$17
	addiu	$5,$19,%lo(null_mac)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L511
	lui	$2,%hi(sync_pkt_index)

	addiu	$5,$19,%lo(null_mac)
	addiu	$4,$18,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L511
	lui	$2,%hi(sync_pkt_index)

	move	$4,$17
	addiu	$5,$18,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L511
	lui	$2,%hi(sync_pkt_index)

	lw	$2,%lo(g_sc_debug)($22)
	lui	$4,%hi(finish_sync)
	beq	$2,$0,$L289
	sw	$0,%lo(finish_sync)($4)

	lui	$4,%hi($LC18)
	jal	panic_printk
	addiu	$4,$4,%lo($LC18)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$20,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC19)
	jal	panic_printk
	addiu	$4,$4,%lo($LC19)

	addiu	$4,$18,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L289:
	lbu	$5,40($21)
	jal	rtk_sc_set_value
	li	$4,19			# 0x13

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	addiu	$5,$20,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	li	$2,1			# 0x1
	lui	$3,%hi(g_pkt_type)
	sw	$fp,%lo(fix_sa)($23)
	sw	$2,%lo(g_pkt_type)($3)
	lui	$2,%hi(sync_pkt_index)
$L511:
	li	$4,14			# 0xe
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	move	$5,$0
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$2,%hi(sequence)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	j	$L242
	nop

$L246:
	lw	$3,24($21)
	li	$2,255			# 0xff
	lbu	$4,0($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,1($3)
	bne	$2,$4,$L242
	nop

	lbu	$4,2($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,3($3)
	bne	$2,$4,$L242
	nop

	lbu	$4,4($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,5($3)
	bne	$2,$4,$L242
	nop

	lbu	$2,40($21)
	addiu	$2,$2,-1
	andi	$2,$2,0x00ff
	sltu	$2,$2,2
	beq	$2,$0,$L242
	lui	$4,%hi(g_pkt_type)

	li	$2,1			# 0x1
	lw	$3,%lo(g_pkt_type)($4)
	beq	$3,$2,$L242
	lui	$2,%hi(g_sc_config_type)

	lw	$2,%lo(g_sc_config_type)($2)
	andi	$2,$2,0x2
	beq	$2,$0,$L242
	move	$17,$0

	lui	$20,%hi(g_sc_magic)
$L524:
	sll	$18,$17,2
	addiu	$2,$20,%lo(g_sc_magic)
	addu	$2,$18,$2
	lw	$2,0($2)
	lw	$3,12($21)
	addiu	$2,$2,3
	bne	$3,$2,$L512
	move	$19,$0

	lui	$fp,%hi(g_option_sa)
$L515:
	sll	$23,$19,4
	addiu	$22,$fp,%lo(g_option_sa)
	li	$6,6			# 0x6
	addu	$16,$23,$22
	addiu	$19,$19,1
	lw	$5,28($21)
	jal	memcmp
	move	$4,$16

	lui	$5,%hi(null_mac)
	addiu	$5,$5,%lo(null_mac)
	move	$4,$16
	bne	$2,$0,$L301
	li	$6,6			# 0x6

	lbu	$3,40($21)
	li	$5,1			# 0x1
	bne	$3,$5,$L513
	li	$2,2			# 0x2

	lw	$2,8($16)
	beq	$2,$0,$L490
	addiu	$2,$20,%lo(g_sc_magic)

	li	$2,2			# 0x2
$L513:
	bne	$3,$2,$L242
	nop

	lw	$2,12($16)
	bne	$2,$0,$L242
	addiu	$2,$20,%lo(g_sc_magic)

	lui	$4,%hi(g_p4_to_ds_hrate)
	addu	$2,$18,$2
	lw	$2,0($2)
	lw	$3,%lo(g_p4_to_ds_hrate)($4)
	bne	$3,$0,$L242
	sw	$2,12($16)

	lbu	$2,56($21)
	sltu	$2,$2,55
	bne	$2,$0,$L242
	nop

	j	$L242
	sw	$5,%lo(g_p4_to_ds_hrate)($4)

$L301:
	jal	memcmp
	nop

	bne	$2,$0,$L300
	slt	$3,$19,5

	lbu	$3,40($21)
	li	$2,1			# 0x1
	bne	$3,$2,$L308
	li	$2,2			# 0x2

	addiu	$2,$20,%lo(g_sc_magic)
	addu	$2,$18,$2
	lw	$2,0($2)
	j	$L309
	sw	$2,8($16)

$L308:
	bne	$3,$2,$L514
	addiu	$2,$fp,%lo(g_option_sa)

	addiu	$2,$20,%lo(g_sc_magic)
	lui	$4,%hi(g_p4_to_ds_hrate)
	addu	$2,$18,$2
	lw	$2,0($2)
	lw	$3,%lo(g_p4_to_ds_hrate)($4)
	bne	$3,$0,$L309
	sw	$2,12($16)

	lbu	$2,56($21)
	sltu	$2,$2,55
	sltu	$2,$2,1
	sw	$2,%lo(g_p4_to_ds_hrate)($4)
$L309:
	addiu	$2,$fp,%lo(g_option_sa)
$L514:
	li	$6,6			# 0x6
	addu	$16,$23,$2
	lw	$5,28($21)
	jal	memcpy
	move	$4,$16

	lui	$4,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($4)
	lui	$3,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$2,$2,1
	beq	$3,$0,$L242
	sw	$2,%lo(g_p4_option_num)($4)

	lui	$4,%hi($LC20)
	jal	panic_printk
	addiu	$4,$4,%lo($LC20)

	move	$4,$16
	jal	bytedump
	li	$5,6			# 0x6

	j	$L242
	nop

$L300:
	bne	$3,$0,$L515
	lui	$fp,%hi(g_option_sa)

	li	$2,5			# 0x5
	bne	$19,$2,$L512
	move	$19,$0

	lbu	$3,40($21)
	li	$2,1			# 0x1
	bne	$3,$2,$L316
	li	$2,2			# 0x2

	lui	$2,%hi(g_p4_option_num)
	li	$3,-859045888			# 0xcccc0000
	lw	$4,%lo(g_p4_option_num)($2)
	ori	$3,$3,0xcccd
	addiu	$2,$20,%lo(g_sc_magic)
	multu	$4,$3
	addu	$2,$18,$2
	lw	$5,0($2)
	mfhi	$3
	srl	$3,$3,2
	sll	$2,$3,2
	addu	$2,$2,$3
	subu	$4,$4,$2
	sll	$4,$4,4
	addu	$4,$4,$22
	j	$L317
	sw	$5,8($4)

$L316:
	bne	$3,$2,$L516
	lui	$16,%hi(g_p4_option_num)

	lui	$2,%hi(g_p4_option_num)
	li	$3,-859045888			# 0xcccc0000
	lw	$4,%lo(g_p4_option_num)($2)
	ori	$3,$3,0xcccd
	addiu	$2,$20,%lo(g_sc_magic)
	multu	$4,$3
	addu	$2,$18,$2
	lw	$5,0($2)
	mfhi	$3
	srl	$3,$3,2
	sll	$2,$3,2
	addu	$2,$2,$3
	subu	$4,$4,$2
	sll	$4,$4,4
	addu	$4,$4,$22
	sw	$5,12($4)
$L317:
	lui	$16,%hi(g_p4_option_num)
$L516:
	li	$2,-859045888			# 0xcccc0000
	lw	$4,%lo(g_p4_option_num)($16)
	ori	$18,$2,0xcccd
	lui	$2,%hi(g_option_sa)
	li	$6,6			# 0x6
	multu	$4,$18
	addiu	$19,$2,%lo(g_option_sa)
	lw	$5,28($21)
	mfhi	$3
	srl	$3,$3,2
	sll	$2,$3,2
	addu	$2,$2,$3
	subu	$4,$4,$2
	sll	$4,$4,4
	jal	memcpy
	addu	$4,$4,$19

	lui	$3,%hi(g_sc_debug)
	lw	$2,%lo(g_p4_option_num)($16)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$2,$2,1
	beq	$3,$0,$L297
	sw	$2,%lo(g_p4_option_num)($16)

	lui	$4,%hi($LC20)
	jal	panic_printk
	addiu	$4,$4,%lo($LC20)

	li	$5,6			# 0x6
	lw	$4,%lo(g_p4_option_num)($16)
	multu	$4,$18
	mfhi	$3
	srl	$3,$3,2
	sll	$2,$3,2
	addu	$2,$2,$3
	subu	$4,$4,$2
	sll	$4,$4,4
	jal	bytedump
	addu	$4,$4,$19

	lui	$4,%hi($LC21)
	lw	$5,%lo(g_p4_option_num)($16)
	lw	$6,12($21)
	jal	panic_printk
	addiu	$4,$4,%lo($LC21)

	lui	$4,%hi($LC22)
	lw	$5,%lo(g_p4_option_num)($16)
	multu	$5,$18
	mfhi	$3
	srl	$3,$3,2
	sll	$2,$3,2
	addu	$2,$2,$3
	subu	$5,$5,$2
	sll	$5,$5,4
	addu	$5,$5,$19
	lw	$6,12($5)
	lw	$5,8($5)
	jal	panic_printk
	addiu	$4,$4,%lo($LC22)

$L297:
	move	$19,$0
$L512:
	move	$20,$0
$L362:
	lui	$18,%hi(g_option_sa)
	li	$6,6			# 0x6
	addiu	$2,$18,%lo(g_option_sa)
	addu	$16,$20,$2
	lw	$5,28($21)
	jal	memcmp
	move	$4,$16

	bne	$2,$0,$L325
	nop

	lw	$3,8($16)
	bne	$3,$0,$L327
	nop

	lw	$2,12($16)
	beq	$2,$0,$L325
	nop

$L327:
	lw	$4,12($16)
	lw	$5,12($21)
	sltu	$2,$4,$3
	movn	$4,$3,$2		#conditional move
	addiu	$2,$4,1094
	sltu	$2,$2,$5
	beq	$2,$0,$L517
	addiu	$2,$4,1070

	addiu	$2,$4,1111
	sltu	$2,$2,$5
	beq	$2,$0,$L495
	li	$7,4			# 0x4

	addiu	$2,$4,1070
$L517:
	sltu	$2,$2,$5
	beq	$2,$0,$L518
	addiu	$2,$4,1046

	addiu	$2,$4,1087
	sltu	$2,$2,$5
	beq	$2,$0,$L495
	li	$7,3			# 0x3

	addiu	$2,$4,1046
$L518:
	sltu	$2,$2,$5
	beq	$2,$0,$L519
	addiu	$2,$4,1022

	addiu	$2,$4,1063
	sltu	$2,$2,$5
	beq	$2,$0,$L495
	li	$7,2			# 0x2

	addiu	$2,$4,1022
$L519:
	sltu	$2,$2,$5
	beq	$2,$0,$L325
	addiu	$2,$4,1039

	sltu	$2,$2,$5
	bne	$2,$0,$L325
	li	$7,1			# 0x1

$L495:
	addiu	$2,$18,%lo(g_option_sa)
	addu	$2,$20,$2
	lw	$4,12($2)
	lw	$3,8($2)
	lui	$2,%hi(g_p4_magic_2)
	sw	$4,%lo(g_p4_magic_2)($2)
	lui	$2,%hi(g_p4_magic_1)
	beq	$3,$0,$L338
	sw	$3,%lo(g_p4_magic_1)($2)

	beq	$4,$0,$L338
	nop

	beq	$4,$3,$L338
	sltu	$2,$4,$3

	beq	$2,$0,$L520
	sltu	$2,$3,$4

	addiu	$2,$3,-2
	bne	$4,$2,$L242
	sltu	$2,$3,$4

$L520:
	beq	$2,$0,$L338
	addiu	$2,$4,-2

	bne	$3,$2,$L242
	nop

$L338:
	lbu	$3,40($21)
	li	$2,1			# 0x1
	bne	$3,$2,$L521
	li	$2,2			# 0x2

	lui	$2,%hi(g_p4_magic_1)
	lw	$2,%lo(g_p4_magic_1)($2)
	beq	$2,$0,$L521
	li	$2,2			# 0x2

	lw	$6,12($21)
	bne	$7,$3,$L343
	lui	$5,%hi(g_sc_ctx)

	addiu	$2,$18,%lo(g_option_sa)
	addiu	$3,$5,%lo(g_sc_ctx)
	addu	$2,$20,$2
	lw	$2,8($2)
	subu	$2,$6,$2
	sll	$2,$2,4
	addiu	$2,$2,-16368
	j	$L342
	sw	$2,1852($3)

$L343:
	addiu	$2,$18,%lo(g_option_sa)
	sll	$4,$7,1
	addu	$2,$20,$2
	addu	$4,$4,$7
	lw	$2,8($2)
	sll	$4,$4,3
	sll	$3,$7,6
	addiu	$5,$5,%lo(g_sc_ctx)
	subu	$2,$6,$2
	subu	$2,$2,$4
	sll	$2,$2,4
	addu	$3,$3,$2
	addiu	$3,$3,-16064
	sw	$3,1852($5)
$L342:
	lbu	$3,40($21)
	li	$2,2			# 0x2
$L521:
	bne	$3,$2,$L522
	lui	$2,%hi(g_sc_ctx)

	lui	$2,%hi(g_p4_magic_2)
	lw	$2,%lo(g_p4_magic_2)($2)
	beq	$2,$0,$L522
	lui	$2,%hi(g_sc_ctx)

	li	$2,1			# 0x1
	lui	$5,%hi(g_sc_ctx)
	lw	$6,12($21)
	bne	$7,$2,$L346
	lui	$3,%hi(g_option_sa)

	addiu	$2,$3,%lo(g_option_sa)
	addiu	$3,$5,%lo(g_sc_ctx)
	addu	$2,$20,$2
	lw	$2,12($2)
	subu	$2,$6,$2
	sll	$2,$2,4
	addiu	$2,$2,-16368
	j	$L347
	sw	$2,1852($3)

$L346:
	addiu	$2,$3,%lo(g_option_sa)
	sll	$4,$7,1
	addu	$2,$20,$2
	addu	$4,$4,$7
	lw	$2,12($2)
	sll	$4,$4,3
	sll	$3,$7,6
	addiu	$5,$5,%lo(g_sc_ctx)
	subu	$2,$6,$2
	subu	$2,$2,$4
	sll	$2,$2,4
	addu	$3,$3,$2
	addiu	$3,$3,-16064
	sw	$3,1852($5)
$L347:
	lui	$3,%hi(g_p4_to_ds_hrate)
	lw	$2,%lo(g_p4_to_ds_hrate)($3)
	bne	$2,$0,$L522
	lui	$2,%hi(g_sc_ctx)

	lbu	$2,56($21)
	sltu	$2,$2,55
	bne	$2,$0,$L522
	lui	$2,%hi(g_sc_ctx)

	li	$2,1			# 0x1
	sw	$2,%lo(g_p4_to_ds_hrate)($3)
	lui	$2,%hi(g_sc_ctx)
$L522:
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$5,1852($2)
	sltu	$2,$5,257
	beq	$2,$0,$L491
	nop

	beq	$5,$0,$L242
	lui	$22,%hi(g_sc_debug)

	li	$2,2			# 0x2
	lw	$3,%lo(g_sc_debug)($22)
	bne	$3,$2,$L351
	nop

	lui	$4,%hi($LC23)
	jal	panic_printk
	addiu	$4,$4,%lo($LC23)

$L351:
	lw	$5,28($21)
	lui	$23,%hi(g_sc_ctx+12)
	addiu	$4,$23,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lui	$4,%hi(g_smac)
	lw	$5,28($21)
	li	$6,6			# 0x6
	addiu	$4,$4,%lo(g_smac)
	jal	memcpy
	lui	$18,%hi(g_sc_ctx+24)

	lui	$16,%hi(g_sc_bssid)
	lw	$2,0($21)
	lw	$4,188($2)
	jal	get_bssid
	li	$fp,1			# 0x1

	addiu	$4,$18,%lo(g_sc_ctx+24)
	move	$17,$2
	move	$5,$2
	jal	memcpy
	li	$6,6			# 0x6

	move	$5,$17
	addiu	$4,$16,%lo(g_sc_bssid)
	jal	memcpy
	li	$6,6			# 0x6

	addiu	$5,$16,%lo(g_sc_bssid)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	lui	$3,%hi(finish_sync)
	lw	$2,%lo(g_sc_debug)($22)
	beq	$2,$0,$L353
	sw	$fp,%lo(finish_sync)($3)

	lui	$4,%hi($LC18)
	jal	panic_printk
	addiu	$4,$4,%lo($LC18)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$18,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC19)
	jal	panic_printk
	addiu	$4,$4,%lo($LC19)

	addiu	$4,$23,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L353:
	lbu	$5,40($21)
	li	$4,19			# 0x13
	lui	$22,%hi(fix_sa)
	jal	rtk_sc_set_value
	li	$17,2			# 0x2

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	addiu	$5,$18,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	li	$4,14			# 0xe
	move	$5,$0
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$2,%hi(sequence)
	sw	$fp,%lo(fix_sa)($22)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	lui	$4,%hi(g_sc_ctx)
	addiu	$4,$4,%lo(g_sc_ctx)
	lw	$2,2672($4)
	slt	$2,$17,$2
$L503:
	beq	$2,$0,$L325
	lui	$16,%hi(g_sc_ctx)

	sll	$2,$17,2
	addiu	$5,$16,%lo(g_sc_ctx)
	addiu	$17,$17,1
	addu	$2,$2,$5
	lw	$4,2416($2)
	lui	$2,%hi(pp)
	beq	$4,$0,$L358
	sw	$4,%lo(pp)($2)

	lw	$2,4($4)
	lw	$6,56($sp)
	andi	$2,$2,0x2
	beq	$2,$0,$L523
	addiu	$2,$16,%lo(g_sc_ctx)

	jal	rtk_sc_check_pattern
	nop

	beq	$2,$0,$L492
	lui	$4,%hi(g_pkt_type)

$L358:
	addiu	$2,$16,%lo(g_sc_ctx)
$L523:
	lw	$2,2672($2)
	j	$L503
	slt	$2,$17,$2

$L325:
	addiu	$19,$19,1
	slt	$2,$19,5
	bne	$2,$0,$L362
	addiu	$20,$20,16

	addiu	$17,$17,1
	slt	$2,$17,8
	bne	$2,$0,$L524
	lui	$20,%hi(g_sc_magic)

	j	$L242
	nop

$L245:
$L505:
	bne	$18,$2,$L242
	lui	$2,%hi(finish_sync)

	lw	$3,%lo(finish_sync)($2)
	li	$2,1			# 0x1
	bne	$3,$2,$L242
	nop

	lw	$4,24($21)
	lbu	$16,0($4)
	bne	$16,$3,$L366
	nop

	lbu	$2,1($4)
	bne	$2,$0,$L366
	li	$2,94			# 0x5e

	lbu	$3,2($4)
	bne	$3,$2,$L366
	nop

	jal	CHECKSUM_OK
	li	$5,6			# 0x6

	beq	$2,$0,$L366
	lui	$4,%hi(g_sc_ctx+12)

	li	$6,6			# 0x6
	lw	$5,28($21)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L366
	lui	$2,%hi(g_pkt_type)

	lw	$2,%lo(g_pkt_type)($2)
	bne	$2,$16,$L366
	nop

	lw	$2,24($21)
	lbu	$17,3($2)
	slt	$2,$17,9
	bne	$2,$0,$L242
	sll	$2,$17,1

	lui	$20,%hi(g_sc_ctx)
	addu	$2,$2,$17
	addiu	$3,$20,%lo(g_sc_ctx)
	sll	$2,$2,1
	addu	$16,$2,$3
	lbu	$2,260($16)
	bne	$2,$0,$L242
	lui	$2,%hi(g_sc_check_level)

	lw	$2,%lo(g_sc_check_level)($2)
	bne	$2,$18,$L525
	move	$5,$16

	jal	rtk_sc_valid_profile_packet
	move	$4,$21

	beq	$2,$0,$L242
	move	$5,$16

$L525:
	move	$19,$0
$L375:
	lw	$2,24($21)
	addu	$4,$5,$19
	addu	$2,$2,$19
	addiu	$19,$19,1
	lbu	$2,0($2)
	slt	$3,$19,6
	bne	$3,$0,$L375
	sb	$2,260($4)

	lui	$16,%hi(profile_pkt_index)
	lw	$2,%lo(profile_pkt_index)($16)
	lw	$3,%lo(g_sc_debug)($22)
	addiu	$4,$2,1
	li	$2,2			# 0x2
	bne	$3,$2,$L369
	sw	$4,%lo(profile_pkt_index)($16)

	li	$3,1717960704			# 0x66660000
	sra	$2,$4,31
	ori	$3,$3,0x6667
	mult	$4,$3
	mfhi	$3
	sra	$3,$3,2
	subu	$3,$3,$2
	sll	$2,$3,2
	addu	$2,$2,$3
	sll	$2,$2,1
	bne	$4,$2,$L526
	addiu	$2,$20,%lo(g_sc_ctx)

	li	$2,-1207959552			# 0xb8000000
	li	$4,8388608			# 0x800000
	ori	$2,$2,0x311c
	lw	$3,0($2)
	or	$3,$3,$4
	sw	$3,0($2)
	addiu	$2,$20,%lo(g_sc_ctx)
$L526:
	lui	$4,%hi($LC24)
	lw	$6,1852($2)
	addiu	$4,$4,%lo($LC24)
	lw	$7,%lo(profile_pkt_index)($16)
	jal	panic_printk
	move	$5,$17

$L369:
	lui	$5,%hi(g_sc_ctx)
	addiu	$3,$5,%lo(g_sc_ctx)
	lw	$2,%lo(profile_pkt_index)($16)
	lw	$3,1852($3)
	sltu	$2,$2,$3
	bne	$2,$0,$L242
	li	$19,9			# 0x9

	sltu	$2,$19,$3
	beq	$2,$0,$L382
	lui	$2,%hi(g_sc_ctx+314)

	move	$4,$3
	addiu	$2,$2,%lo(g_sc_ctx+314)
	addiu	$3,$2,54
$L385:
	beq	$3,$0,$L527
	addiu	$2,$5,%lo(g_sc_ctx)

	addiu	$19,$19,1
	sltu	$2,$19,$4
	bne	$2,$0,$L385
	addiu	$3,$3,6

$L382:
	addiu	$2,$5,%lo(g_sc_ctx)
$L527:
	lw	$2,1852($2)
$L501:
	bne	$19,$2,$L242
	nop

	lw	$4,56($sp)
	jal	rtk_sc_check_profile
	nop

	j	$L242
	nop

$L366:
	lw	$3,24($21)
	li	$2,255			# 0xff
	lbu	$4,0($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,1($3)
	bne	$2,$4,$L242
	nop

	lbu	$4,2($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,3($3)
	bne	$2,$4,$L242
	nop

	lbu	$4,4($3)
	bne	$4,$2,$L242
	nop

	lbu	$2,5($3)
	bne	$2,$4,$L242
	lui	$4,%hi(g_sc_ctx+12)

	li	$6,6			# 0x6
	lw	$5,28($21)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L242
	nop

	lw	$4,56($sp)
	jal	rtk_sc_is_channel_fixed
	nop

	beq	$2,$0,$L242
	lui	$2,%hi(g_pkt_type)

	lw	$4,%lo(g_pkt_type)($2)
	li	$2,2			# 0x2
	bne	$4,$2,$L242
	lui	$5,%hi(g_p4_magic_len)

	li	$2,1			# 0x1
	sw	$0,%lo(g_p4_magic_len)($5)
	lbu	$3,40($21)
	bne	$3,$2,$L389
	lui	$8,%hi(g_p4_magic_1)

	lw	$2,%lo(g_p4_magic_1)($8)
	bne	$2,$0,$L497
	nop

	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$2,%lo(g_p4_to_ds_hrate)($2)
	beq	$2,$0,$L528
	lui	$2,%hi(g_sc_magic)

	lui	$2,%hi(g_sc_ctx+1852)
	lw	$2,%lo(g_sc_ctx+1852)($2)
	sltu	$2,$2,63
	beq	$2,$0,$L399
	lui	$2,%hi(g_sc_magic)

$L528:
	move	$17,$0
	lw	$4,12($21)
	addiu	$7,$2,%lo(g_sc_magic)
$L398:
	lw	$3,0($7)
	addiu	$17,$17,1
	slt	$6,$17,8
	addiu	$2,$3,3
	beq	$4,$2,$L493
	addiu	$7,$7,4

	bne	$6,$0,$L398
	nop

	j	$L242
	nop

$L389:
	bne	$3,$4,$L242
	lui	$8,%hi(g_p4_magic_2)

	lw	$2,%lo(g_p4_magic_2)($8)
	beq	$2,$0,$L401
	lui	$3,%hi(g_p4_to_ds_hrate)

$L497:
	j	$L399
	sw	$2,%lo(g_p4_magic_len)($5)

$L401:
	lw	$2,%lo(g_p4_to_ds_hrate)($3)
	bne	$2,$0,$L529
	lui	$2,%hi(g_sc_magic)

	lbu	$2,56($21)
	sltu	$2,$2,55
	sltu	$2,$2,1
	sw	$2,%lo(g_p4_to_ds_hrate)($3)
	lui	$2,%hi(g_sc_magic)
$L529:
	move	$17,$0
	lw	$4,12($21)
	addiu	$7,$2,%lo(g_sc_magic)
$L408:
	lw	$3,0($7)
	addiu	$17,$17,1
	slt	$6,$17,8
	addiu	$2,$3,3
	beq	$4,$2,$L494
	addiu	$7,$7,4

	bne	$6,$0,$L408
	nop

	j	$L242
	nop

$L399:
	lw	$3,%lo(g_p4_magic_len)($5)
	beq	$3,$0,$L242
	nop

	lw	$2,12($21)
	subu	$17,$2,$3
	andi	$2,$17,0x3f0
	sra	$5,$2,4
	beq	$5,$0,$L530
	lui	$4,%hi(g_p4_group)

	slt	$2,$17,1025
	bne	$2,$0,$L411
	lui	$20,%hi(g_p4_group)

	lui	$4,%hi(g_p4_group)
$L530:
	li	$2,-1			# 0xffffffff
	li	$6,3			# 0x3
	beq	$17,$6,$L414
	sw	$2,%lo(g_p4_group)($4)

	lui	$2,%hi(g_sc_ctx+1852)
	lw	$3,%lo(g_sc_ctx+1852)($2)
	srl	$2,$3,4
	addiu	$2,$2,1023
	bne	$17,$2,$L413
	nop

$L414:
	j	$L242
	sw	$0,%lo(g_p4_group)($4)

$L413:
	li	$5,2			# 0x2
	beq	$17,$5,$L417
	addiu	$2,$3,-63

	srl	$2,$2,4
	addiu	$2,$2,1048
	bne	$17,$2,$L416
	li	$2,11			# 0xb

$L417:
	li	$2,1			# 0x1
	j	$L242
	sw	$2,%lo(g_p4_group)($4)

$L416:
	beq	$17,$2,$L420
	addiu	$2,$3,-126

	srl	$2,$2,4
	addiu	$2,$2,1072
	bne	$17,$2,$L419
	li	$2,10			# 0xa

$L420:
	j	$L242
	sw	$5,%lo(g_p4_group)($4)

$L419:
	beq	$17,$2,$L423
	addiu	$2,$3,-189

	srl	$2,$2,4
	addiu	$2,$2,1096
	bne	$17,$2,$L242
	nop

$L423:
	j	$L242
	sw	$6,%lo(g_p4_group)($4)

$L411:
	lw	$3,%lo(g_p4_group)($20)
	bltz	$3,$L242
	addiu	$5,$5,-1

	sll	$2,$3,6
	lui	$18,%hi(g_p4_last_seq)
	subu	$2,$2,$3
	addu	$5,$5,$2
	lw	$3,%lo(g_p4_last_seq)($18)
	addiu	$2,$5,15
	slt	$2,$2,$3
	beq	$2,$0,$L426
	andi	$4,$17,0xf

	slt	$2,$5,64
	bne	$2,$0,$L426
	lui	$2,%hi(g_sc_ctx+1852)

	lw	$2,%lo(g_sc_ctx+1852)($2)
	sltu	$2,$2,127
	bne	$2,$0,$L531
	lui	$17,%hi(g_sc_ctx)

	lw	$3,%lo(g_sc_debug)($22)
	li	$2,2			# 0x2
	bne	$3,$2,$L532
	li	$2,-1			# 0xffffffff

	lui	$4,%hi($LC25)
	jal	panic_printk
	addiu	$4,$4,%lo($LC25)

	li	$2,-1			# 0xffffffff
$L532:
	j	$L498
	sw	$2,%lo(g_p4_group)($20)

$L426:
	lui	$17,%hi(g_sc_ctx)
$L531:
	addiu	$16,$17,%lo(g_sc_ctx)
	lw	$6,1852($16)
	sltu	$2,$6,$5
	beq	$2,$0,$L429
	addu	$7,$5,$16

	lw	$3,%lo(g_sc_debug)($22)
	li	$2,2			# 0x2
	bne	$3,$2,$L430
	lui	$4,%hi($LC26)

	jal	panic_printk
	addiu	$4,$4,%lo($LC26)

$L430:
	move	$4,$16
	move	$17,$0
$L435:
	addu	$2,$17,$4
	addiu	$17,$17,1
	slt	$3,$17,256
	sb	$0,3130($2)
	bne	$3,$0,$L435
	sb	$0,2874($2)

	li	$2,-1			# 0xffffffff
	sw	$2,%lo(g_p4_group)($20)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
$L498:
	j	$L242
	sw	$0,%lo(g_p4_last_seq)($18)

$L429:
	lbu	$2,3130($7)
	bne	$2,$0,$L436
	sw	$5,%lo(g_p4_last_seq)($18)

	lui	$9,%hi(profile_pkt_index)
	lw	$2,%lo(profile_pkt_index)($9)
	lw	$3,%lo(g_sc_debug)($22)
	addiu	$8,$2,1
	li	$2,1
	sb	$2,3130($7)
	li	$2,2			# 0x2
	sb	$4,2874($7)
	bne	$3,$2,$L436
	sw	$8,%lo(profile_pkt_index)($9)

	li	$3,1717960704			# 0x66660000
	sra	$2,$8,31
	ori	$3,$3,0x6667
	mult	$8,$3
	mfhi	$3
	sra	$3,$3,2
	subu	$3,$3,$2
	sll	$2,$3,2
	addu	$2,$2,$3
	sll	$2,$2,1
	bne	$8,$2,$L438
	li	$2,-1207959552			# 0xb8000000

	li	$4,8388608			# 0x800000
	ori	$2,$2,0x311c
	lw	$3,0($2)
	or	$3,$3,$4
	sw	$3,0($2)
$L438:
	lui	$4,%hi($LC27)
	lw	$7,%lo(profile_pkt_index)($9)
	jal	panic_printk
	addiu	$4,$4,%lo($LC27)

$L436:
	addiu	$2,$17,%lo(g_sc_ctx)
	lui	$16,%hi(profile_pkt_index)
	lw	$3,1852($2)
	lw	$2,%lo(profile_pkt_index)($16)
	sltu	$2,$2,$3
	bne	$2,$0,$L441
	lui	$4,%hi(g_sc_ctx)

	beq	$3,$0,$L443
	move	$19,$0

	addiu	$3,$4,%lo(g_sc_ctx)
$L533:
	addu	$2,$19,$3
	lbu	$2,3130($2)
	bne	$2,$0,$L444
	lui	$4,%hi(g_sc_ctx)

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L446
	move	$5,$19

	lui	$4,%hi($LC28)
	jal	panic_printk
	addiu	$4,$4,%lo($LC28)

$L446:
	j	$L443
	sw	$0,%lo(profile_pkt_index)($16)

$L444:
	lw	$2,1852($3)
	addiu	$19,$19,1
	sltu	$2,$19,$2
	bne	$2,$0,$L533
	addiu	$3,$4,%lo(g_sc_ctx)

$L443:
	lui	$2,%hi(g_sc_ctx)
	addiu	$3,$2,%lo(g_sc_ctx)
	lw	$2,1852($3)
	bne	$19,$2,$L441
	lui	$2,%hi(pp)

	lw	$3,2424($3)
	beq	$3,$0,$L450
	sw	$3,%lo(pp)($2)

	lw	$2,4($3)
	andi	$2,$2,0x2
	beq	$2,$0,$L534
	li	$2,-1			# 0xffffffff

	lw	$4,56($sp)
	jal	rtk_sc_check_profile
	nop

	move	$23,$2
$L450:
	li	$2,-1			# 0xffffffff
$L534:
	bne	$23,$2,$L451
	lui	$3,%hi(profile_pkt_index)

	lui	$2,%hi(g_sc_ctx)
	move	$17,$0
	sw	$23,%lo(g_p4_group)($20)
	addiu	$4,$2,%lo(g_sc_ctx)
	sw	$0,%lo(profile_pkt_index)($3)
$L455:
	addu	$2,$17,$4
	addiu	$17,$17,1
	slt	$3,$17,256
	sb	$0,3130($2)
	bne	$3,$0,$L455
	sb	$0,2874($2)

	j	$L242
	nop

$L490:
	addu	$2,$18,$2
	lw	$2,0($2)
	j	$L242
	sw	$2,8($16)

$L491:
	lw	$4,56($sp)
$L499:
	jal	rtk_sc_restart_simple_config
	nop

	j	$L242
	nop

$L492:
	li	$2,2			# 0x2
	li	$3,1			# 0x1
	sw	$2,%lo(g_pkt_type)($4)
	lui	$2,%hi(finish_sync)
	sw	$3,%lo(fix_sa)($22)
	j	$L242
	sw	$3,%lo(finish_sync)($2)

$L493:
	j	$L242
	sw	$3,%lo(g_p4_magic_1)($8)

$L494:
	j	$L242
	sw	$3,%lo(g_p4_magic_2)($8)

$L451:
	sw	$0,%lo(profile_pkt_index)($3)
$L441:
	lw	$3,%lo(g_p4_group)($20)
	lui	$2,%hi(g_p4_last_group)
	sw	$3,%lo(g_p4_last_group)($2)
$L463:
$L242:
	lw	$31,52($sp)
	move	$2,$0
	lw	$fp,48($sp)
	lw	$23,44($sp)
	lw	$22,40($sp)
	lw	$21,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,56

	.set	macro
	.set	reorder
	.end	rtk_sc_start_parse_packet
	.globl	fix_sa
	.section	.bss
	.align	2
	.type	fix_sa, @object
	.size	fix_sa, 4
fix_sa:
	.space	4
	.globl	g_sc_pin_len
	.align	2
	.type	g_sc_pin_len, @object
	.size	g_sc_pin_len, 4
g_sc_pin_len:
	.space	4
	.globl	g_sc_bssid
	.align	2
	.type	g_sc_bssid, @object
	.size	g_sc_bssid, 6
g_sc_bssid:
	.space	6
	.globl	g_smac
	.align	2
	.type	g_smac, @object
	.size	g_smac, 6
g_smac:
	.space	6
	.globl	g_dmac
	.align	2
	.type	g_dmac, @object
	.size	g_dmac, 6
g_dmac:
	.space	6
	.globl	g_sc_ifname
	.align	2
	.type	g_sc_ifname, @object
	.size	g_sc_ifname, 32
g_sc_ifname:
	.space	32
	.globl	g_sc_magic
	.align	2
	.type	g_sc_magic, @object
	.size	g_sc_magic, 32
g_sc_magic:
	.space	32
	.globl	g_option_sa
	.align	2
	.type	g_option_sa, @object
	.size	g_option_sa, 80
g_option_sa:
	.space	80
	.globl	g_p4_option_num
	.align	2
	.type	g_p4_option_num, @object
	.size	g_p4_option_num, 4
g_p4_option_num:
	.space	4
	.globl	g_p4_magic_1
	.align	2
	.type	g_p4_magic_1, @object
	.size	g_p4_magic_1, 4
g_p4_magic_1:
	.space	4
	.globl	g_p4_magic_2
	.align	2
	.type	g_p4_magic_2, @object
	.size	g_p4_magic_2, 4
g_p4_magic_2:
	.space	4
	.globl	g_p4_have_pin
	.align	2
	.type	g_p4_have_pin, @object
	.size	g_p4_have_pin, 4
g_p4_have_pin:
	.space	4
	.globl	g_p4_magic_len
	.align	2
	.type	g_p4_magic_len, @object
	.size	g_p4_magic_len, 4
g_p4_magic_len:
	.space	4
	.globl	g_p4_group
	.align	2
	.type	g_p4_group, @object
	.size	g_p4_group, 4
g_p4_group:
	.space	4
	.globl	g_p4_last_group
	.align	2
	.type	g_p4_last_group, @object
	.size	g_p4_last_group, 4
g_p4_last_group:
	.space	4
	.globl	g_p4_last_seq
	.align	2
	.type	g_p4_last_seq, @object
	.size	g_p4_last_seq, 4
g_p4_last_seq:
	.space	4
	.globl	g_p4_option_idx
	.align	2
	.type	g_p4_option_idx, @object
	.size	g_p4_option_idx, 4
g_p4_option_idx:
	.space	4
	.globl	g_p4_to_ds_hrate
	.align	2
	.type	g_p4_to_ds_hrate, @object
	.size	g_p4_to_ds_hrate, 4
g_p4_to_ds_hrate:
	.space	4
	.globl	g_pkt_type
	.align	2
	.type	g_pkt_type, @object
	.size	g_pkt_type, 4
g_pkt_type:
	.space	4
	.globl	g_sc_config_type
	.align	2
	.type	g_sc_config_type, @object
	.size	g_sc_config_type, 4
g_sc_config_type:
	.space	4
	.local	g_sc_ctx
	.comm	g_sc_ctx,3388,4
	.globl	pp
	.align	2
	.type	pp, @object
	.size	pp, 4
pp:
	.space	4
	.globl	ack_pkt
	.align	2
	.type	ack_pkt, @object
	.size	ack_pkt, 108
ack_pkt:
	.space	108
	.ident	"GCC: (GNU) 3.4.6-1.3.6"
