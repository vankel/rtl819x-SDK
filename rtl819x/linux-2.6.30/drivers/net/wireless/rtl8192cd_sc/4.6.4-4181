	.file	1 "8192cd_profile.c"
	.section .mdebug.abi32
	.previous
	.gnu_attribute 4, 3
	.section	.text.mcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_cipher_info
	.set	nomips16
	.ent	mcast_udp_get_cipher_info
	.type	mcast_udp_get_cipher_info, @function
mcast_udp_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$4,1852($5)
	move	$3,$5
	j	$L2
	move	$2,$0

$L3:
	lbu	$7,313($3)
	addu	$6,$5,$2
	addiu	$2,$2,1
	sb	$7,2152($6)
$L2:
	bne	$2,$4,$L3
	addiu	$3,$3,6

	sw	$2,2408($5)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_get_cipher_info
	.size	mcast_udp_get_cipher_info, .-mcast_udp_get_cipher_info
	.section	.text.bcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_cipher_info
	.set	nomips16
	.ent	bcast_udp_get_cipher_info
	.type	bcast_udp_get_cipher_info, @function
bcast_udp_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$6,1852($5)
	j	$L5
	move	$2,$0

$L6:
	addu	$3,$5,$2
	sb	$0,2152($3)
	addiu	$2,$2,1
$L5:
	bne	$2,$6,$L6
	move	$3,$5

	move	$2,$0
	li	$4,2			# 0x2
	j	$L7
	li	$7,1			# 0x1

$L10:
	div	$0,$2,$4
	mflo	$9
	mfhi	$8
	bne	$8,$7,$L8
	addu	$9,$5,$9

	lbu	$8,2874($3)
	j	$L11
	andi	$8,$8,0xf

$L8:
	lbu	$8,2874($3)
	nop
	sll	$8,$8,4
$L11:
	lbu	$10,2152($9)
	addiu	$2,$2,1
	addiu	$3,$3,1
	or	$8,$8,$10
	sb	$8,2152($9)
$L7:
	bne	$2,$6,$L10
	nop

	srl	$2,$2,1
	sw	$2,2408($5)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	bcast_udp_get_cipher_info
	.size	bcast_udp_get_cipher_info, .-bcast_udp_get_cipher_info
	.section	.text.mcast_udp_send_ack,"ax",@progbits
	.align	2
	.globl	mcast_udp_send_ack
	.set	nomips16
	.ent	mcast_udp_send_ack
	.type	mcast_udp_send_ack, @function
mcast_udp_send_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_send_ack
	.size	mcast_udp_send_ack, .-mcast_udp_send_ack
	.section	.text.mcast_udp_decode_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_decode_profile
	.set	nomips16
	.ent	mcast_udp_decode_profile
	.type	mcast_udp_decode_profile, @function
mcast_udp_decode_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 2/0, args= 24, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$16,24($sp)
	move	$16,$5
	lw	$7,2148($16)
	lw	$5,2408($5)
	addiu	$2,$16,1856
	addiu	$4,$16,2152
	addiu	$6,$16,2116
	jal	AES_UnWRAP
	sw	$2,16($sp)

	lw	$2,2408($16)
	lw	$31,28($sp)
	sw	$2,2112($16)
	lw	$16,24($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	mcast_udp_decode_profile
	.size	mcast_udp_decode_profile, .-mcast_udp_decode_profile
	.section	.rodata.str1.4,"aMS",@progbits,1
	.align	2
$LC0:
	.ascii	"the pin code is %s, the pin length is %d\012\000"
	.section	.text.bcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_pattern
	.set	nomips16
	.ent	bcast_udp_get_pattern
	.type	bcast_udp_get_pattern, @function
bcast_udp_get_pattern:
	.frame	$sp,240,$31		# vars= 200, regs= 5/0, args= 16, gp= 0
	.mask	0x800f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-240
	sw	$31,236($sp)
	sw	$19,232($sp)
	sw	$18,228($sp)
	sw	$17,224($sp)
	sw	$16,220($sp)
	li	$4,6			# 0x6
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	move	$16,$5
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	addiu	$5,$sp,148
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$18,$2
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,80
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	li	$2,5			# 0x5
	sw	$2,8($16)
	lui	$2,%hi(g_sc_ctx+1852)
	lw	$2,%lo(g_sc_ctx+1852)($2)
	sb	$18,2806($16)
	addiu	$4,$sp,80
	.set	noreorder
	.set	nomacro
	jal	strlen
	sw	$2,1852($16)
	.set	macro
	.set	reorder

	lui	$17,%hi(g_sc_pin_len)
	sw	$2,%lo(g_sc_pin_len)($17)
	.set	noreorder
	.set	nomacro
	bne	$18,$0,$L15
	addiu	$19,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	move	$6,$2
	addiu	$5,$sp,148
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$19
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	move	$6,$2
	addiu	$4,$16,2741
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,148
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L16
	sw	$2,%lo(g_sc_pin_len)($17)
	.set	macro
	.set	reorder

$L15:
	move	$4,$19
	addiu	$5,$sp,80
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

$L16:
	lw	$6,%lo(g_sc_pin_len)($17)
	#nop
	addu	$2,$16,$6
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$3,$2,$L17
	lui	$4,%hi($LC0)
	.set	macro
	.set	reorder

	addiu	$4,$4,%lo($LC0)
	.set	noreorder
	.set	nomacro
	jal	printk
	addiu	$5,$16,2676
	.set	macro
	.set	reorder

$L17:
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	sh	$2,2808($16)
	addiu	$16,$16,2810
	addiu	$2,$sp,16
 #APP
 # 30 "/home/kai_wang/3473/branch-rtl819x-sdk-v3.4.7.3/linux-3.10/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($2)
	addiu	$2,1
	sb	$1,($16)
	bnez	$1,1b
	addiu	$16,1
	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	lui	$2,%hi(radom_value)
	li	$3,50			# 0x32
	sb	$3,%lo(radom_value)($2)
	addiu	$2,$2,%lo(radom_value)
	li	$3,51			# 0x33
	sb	$3,1($2)
	li	$3,52			# 0x34
	sb	$3,2($2)
	li	$3,53			# 0x35
	sb	$3,3($2)
	lw	$31,236($sp)
	lw	$19,232($sp)
	lw	$18,228($sp)
	lw	$17,224($sp)
	lw	$16,220($sp)
	move	$2,$0
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,240
	.set	macro
	.set	reorder

	.end	bcast_udp_get_pattern
	.size	bcast_udp_get_pattern, .-bcast_udp_get_pattern
	.section	.rodata.str1.4
	.align	2
$LC1:
	.ascii	"It is not invalid pattern\012\000"
	.align	2
$LC2:
	.ascii	"this client MUST have pin\012\000"
	.section	.text.mcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_pattern
	.set	nomips16
	.ent	mcast_udp_get_pattern
	.type	mcast_udp_get_pattern, @function
mcast_udp_get_pattern:
	.frame	$sp,240,$31		# vars= 200, regs= 5/0, args= 16, gp= 0
	.mask	0x800f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-240
	sw	$31,236($sp)
	sw	$19,232($sp)
	sw	$18,228($sp)
	sw	$17,224($sp)
	sw	$16,220($sp)
	li	$4,6			# 0x6
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	move	$16,$5
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	addiu	$5,$sp,148
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$18,$2
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,80
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	lbu	$2,271($16)
	lbu	$3,277($16)
	lbu	$4,265($16)
	sll	$2,$2,8
	addu	$2,$3,$2
	sll	$4,$4,16
	addu	$2,$2,$4
	li	$4,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$2,$4,$L19
	li	$4,3			# 0x3
	.set	macro
	.set	reorder

	lbu	$6,263($16)
	lbu	$5,270($16)
	lbu	$4,283($16)
	addu	$5,$6,$5
	addu	$3,$5,$3
	lbu	$5,289($16)
	addu	$3,$3,$4
	andi	$3,$3,0xff
	.set	noreorder
	.set	nomacro
	bne	$3,$5,$L20
	addiu	$4,$4,-9
	.set	macro
	.set	reorder

	sw	$4,1852($16)
	sw	$2,8($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	move	$6,$2
	addiu	$4,$16,2741
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,148
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	lui	$3,%hi(g_sc_pin_len)
	sw	$2,%lo(g_sc_pin_len)($3)
	addu	$2,$16,$2
	sb	$0,2741($2)
	.set	noreorder
	.set	nomacro
	j	$L20
	sb	$0,2806($16)
	.set	macro
	.set	reorder

$L19:
	bne	$2,$4,$L21
	lbu	$6,263($16)
	lbu	$5,270($16)
	lbu	$4,283($16)
	addu	$5,$6,$5
	addu	$3,$5,$3
	lbu	$5,289($16)
	addu	$3,$3,$4
	andi	$3,$3,0xff
	.set	noreorder
	.set	nomacro
	bne	$3,$5,$L20
	addiu	$4,$4,-9
	.set	macro
	.set	reorder

	sw	$2,8($16)
	li	$2,1			# 0x1
	sw	$4,1852($16)
	sb	$2,2806($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,80
	.set	macro
	.set	reorder

	lui	$17,%hi(g_sc_pin_len)
	sw	$2,%lo(g_sc_pin_len)($17)
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L22
	addiu	$19,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	move	$6,$2
	move	$4,$19
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$5,$sp,148
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	addiu	$4,$sp,148
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L23
	sw	$2,%lo(g_sc_pin_len)($17)
	.set	macro
	.set	reorder

$L22:
	move	$4,$19
	addiu	$5,$sp,80
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

$L23:
	lw	$6,%lo(g_sc_pin_len)($17)
	#nop
	addu	$2,$16,$6
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$3,$2,$L20
	lui	$4,%hi($LC0)
	.set	macro
	.set	reorder

	addiu	$4,$4,%lo($LC0)
	.set	noreorder
	.set	nomacro
	jal	printk
	addiu	$5,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L30
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

$L21:
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	#nop
	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L24
	li	$16,-1			# 0xffffffffffffffff
	.set	macro
	.set	reorder

	lui	$4,%hi($LC1)
	.set	noreorder
	.set	nomacro
	j	$L29
	addiu	$4,$4,%lo($LC1)
	.set	macro
	.set	reorder

$L20:
	li	$2,1			# 0x1
$L30:
	beq	$18,$2,$L25
$L26:
	lbu	$3,295($16)
	lui	$2,%hi(radom_value)
	li	$4,24			# 0x18
	sb	$3,%lo(radom_value)($2)
	lbu	$3,301($16)
	addiu	$2,$2,%lo(radom_value)
	sb	$3,1($2)
	lbu	$3,307($16)
	#nop
	sb	$3,2($2)
	lbu	$3,313($16)
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	sb	$3,3($2)
	.set	macro
	.set	reorder

	sh	$2,2808($16)
	addiu	$16,$16,2810
	addiu	$2,$sp,16
 #APP
 # 30 "/home/kai_wang/3473/branch-rtl819x-sdk-v3.4.7.3/linux-3.10/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($2)
	addiu	$2,1
	sb	$1,($16)
	bnez	$1,1b
	addiu	$16,1
	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	.set	noreorder
	.set	nomacro
	j	$L24
	move	$16,$0
	.set	macro
	.set	reorder

$L25:
	lbu	$2,2806($16)
	#nop
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L26
	lui	$2,%hi(g_sc_debug)
	.set	macro
	.set	reorder

	lw	$2,%lo(g_sc_debug)($2)
	#nop
	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L24
	li	$16,-1			# 0xffffffffffffffff
	.set	macro
	.set	reorder

	lui	$4,%hi($LC2)
	addiu	$4,$4,%lo($LC2)
$L29:
	jal	printk
$L24:
	move	$2,$16
	lw	$31,236($sp)
	lw	$19,232($sp)
	lw	$18,228($sp)
	lw	$17,224($sp)
	lw	$16,220($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,240
	.set	macro
	.set	reorder

	.end	mcast_udp_get_pattern
	.size	mcast_udp_get_pattern, .-mcast_udp_get_pattern
	.section	.text.mcast_udp_generate_key,"ax",@progbits
	.align	2
	.globl	mcast_udp_generate_key
	.set	nomips16
	.ent	mcast_udp_generate_key
	.type	mcast_udp_generate_key, @function
mcast_udp_generate_key:
	.frame	$sp,408,$31		# vars= 360, regs= 5/0, args= 24, gp= 0
	.mask	0x800f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-408
	sw	$31,404($sp)
	sw	$19,400($sp)
	sw	$18,396($sp)
	sw	$17,392($sp)
	sw	$16,388($sp)
	li	$6,256			# 0x100
	move	$16,$5
	move	$18,$4
	move	$5,$0
	jal	memset
	addiu	$4,$sp,128

	lui	$2,%hi(use_ios7_mac)
	lw	$2,%lo(use_ios7_mac)($2)
	addiu	$4,$sp,128
	beq	$2,$0,$L36
	addiu	$5,$16,12

	lui	$5,%hi(g_ios_mac)
	addiu	$5,$5,%lo(g_ios_mac)
$L36:
	jal	memcpy
	li	$6,6			# 0x6

	lbu	$2,2806($16)
	lui	$17,%hi(g_sc_pin_len)
	addiu	$4,$sp,134
	bne	$2,$0,$L37
	addiu	$5,$16,2676

	addiu	$5,$16,2741
$L37:
	lw	$6,%lo(g_sc_pin_len)($17)
	lui	$19,%hi(mcast_udp_buffer)
	jal	memcpy
	addiu	$18,$18,8

	lw	$17,%lo(g_sc_pin_len)($17)
	jal	strlen
	addiu	$4,$19,%lo(mcast_udp_buffer)

	addiu	$17,$17,6
	addiu	$3,$sp,128
	addu	$4,$3,$17
	addiu	$5,$19,%lo(mcast_udp_buffer)
	jal	memcpy
	move	$6,$2

	jal	strlen
	addiu	$4,$19,%lo(mcast_udp_buffer)

	addu	$17,$2,$17
	lui	$5,%hi(radom_value)
	addiu	$2,$sp,128
	addu	$4,$2,$17
	addiu	$5,$5,%lo(radom_value)
	jal	memcpy
	li	$6,4			# 0x4

	addiu	$17,$17,4
	jal	wlan_MD5_Init
	addiu	$4,$sp,40

	move	$6,$17
	addiu	$4,$sp,40
	jal	wlan_MD5_Update
	addiu	$5,$sp,128

	addiu	$5,$sp,40
	jal	wlan_MD5_Final
	addiu	$4,$sp,24

	jal	strlen
	move	$4,$18

	addiu	$3,$sp,128
	addu	$4,$3,$17
	move	$5,$18
	jal	memcpy
	move	$6,$2

	jal	strlen
	move	$4,$18

	addu	$5,$17,$2
	addiu	$3,$16,2116
	addiu	$4,$sp,128
	addiu	$6,$sp,24
	li	$7,16			# 0x10
	jal	hmac_sha1
	sw	$3,16($sp)

	li	$2,16			# 0x10
	sw	$2,2148($16)
	lw	$31,404($sp)
	lw	$19,400($sp)
	lw	$18,396($sp)
	lw	$17,392($sp)
	lw	$16,388($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,408

	.set	macro
	.set	reorder
	.end	mcast_udp_generate_key
	.size	mcast_udp_generate_key, .-mcast_udp_generate_key
	.section	.text.bytecopy,"ax",@progbits
	.align	2
	.globl	bytecopy
	.set	nomips16
	.ent	bytecopy
	.type	bytecopy, @function
bytecopy:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	j	$L39
	move	$2,$0

$L40:
	addu	$3,$4,$2
	lbu	$7,0($3)
	addu	$3,$5,$2
	addiu	$2,$2,1
	sb	$7,0($3)
$L39:
	bne	$2,$6,$L40
	nop

	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	bytecopy
	.size	bytecopy, .-bytecopy
	.section	.rodata.str1.4
	.align	2
$LC3:
	.ascii	"    \000"
	.align	2
$LC4:
	.ascii	"%02x\000"
	.align	2
$LC5:
	.ascii	"\012\000"
	.section	.text.bytedump,"ax",@progbits
	.align	2
	.globl	bytedump
	.set	nomips16
	.ent	bytedump
	.type	bytedump, @function
bytedump:
	.frame	$sp,48,$31		# vars= 0, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-48
	sw	$31,44($sp)
	sw	$21,40($sp)
	sw	$20,36($sp)
	sw	$19,32($sp)
	sw	$18,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$19,%hi($LC3)
	lui	$18,%hi($LC4)
	move	$21,$4
	move	$20,$5
	move	$16,$0
	li	$17,6			# 0x6
	addiu	$19,$19,%lo($LC3)
	j	$L42
	addiu	$18,$18,%lo($LC4)

$L44:
	div	$0,$16,$17
	mfhi	$2
	bne	$2,$0,$L45
	addu	$2,$21,$16

	beq	$16,$0,$L43
	nop

	jal	printk
	move	$4,$19

$L43:
	addu	$2,$21,$16
$L45:
	lbu	$5,0($2)
	move	$4,$18
	jal	printk
	addiu	$16,$16,1

$L42:
	bne	$16,$20,$L44
	lui	$4,%hi($LC5)

	jal	printk
	addiu	$4,$4,%lo($LC5)

	lw	$31,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,48

	.set	macro
	.set	reorder
	.end	bytedump
	.size	bytedump, .-bytedump
	.section	.text.get_bssid,"ax",@progbits
	.align	2
	.globl	get_bssid
	.set	nomips16
	.ent	get_bssid
	.type	get_bssid, @function
get_bssid:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lhu	$2,0($4)
	li	$5,1			# 0x1
	andi	$3,$2,0x2
	andi	$2,$2,0x1
	sll	$2,$2,1
	sltu	$3,$0,$3
	or	$3,$3,$2
	beq	$3,$5,$L52
	addiu	$2,$4,10

	beq	$3,$0,$L52
	addiu	$2,$4,16

	addiu	$2,$4,10
	xori	$3,$3,0x2
	addiu	$4,$4,4
	movz	$2,$4,$3
$L52:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	get_bssid
	.size	get_bssid, .-get_bssid
	.section	.text.rtk_sc_register_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_register_pattern
	.set	nomips16
	.ent	rtk_sc_register_pattern
	.type	rtk_sc_register_pattern, @function
rtk_sc_register_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$3,2672($2)
	nop
	addiu	$5,$3,604
	sll	$5,$5,2
	addu	$5,$5,$2
	lw	$6,0($5)
	nop
	bne	$6,$0,$L54
	nop

	sw	$4,0($5)
$L54:
	addiu	$3,$3,1
	sw	$3,2672($2)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_register_pattern
	.size	rtk_sc_register_pattern, .-rtk_sc_register_pattern
	.section	.text.CHECKSUM_OK,"ax",@progbits
	.align	2
	.globl	CHECKSUM_OK
	.set	nomips16
	.ent	CHECKSUM_OK
	.type	CHECKSUM_OK, @function
CHECKSUM_OK:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	move	$2,$0
	j	$L56
	move	$3,$0

$L57:
	addu	$6,$4,$3
	lbu	$6,0($6)
	addiu	$3,$3,1
	addu	$2,$2,$6
	andi	$2,$2,0x00ff
$L56:
	slt	$6,$3,$5
	bne	$6,$0,$L57
	nop

	j	$31
	sltu	$2,$2,1

	.set	macro
	.set	reorder
	.end	CHECKSUM_OK
	.size	CHECKSUM_OK, .-CHECKSUM_OK
	.section	.text.checksum,"ax",@progbits
	.align	2
	.globl	checksum
	.set	nomips16
	.ent	checksum
	.type	checksum, @function
checksum:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	j	$L59
	move	$2,$0

$L60:
	lhu	$3,0($4)
	addiu	$5,$5,-2
	addiu	$4,$4,2
	addu	$2,$2,$3
$L59:
	slt	$3,$5,2
	beq	$3,$0,$L60
	nop

	beq	$5,$0,$L62
	srl	$3,$2,16

	lbu	$3,0($4)
	nop
	addu	$2,$3,$2
	srl	$3,$2,16
$L62:
	andi	$2,$2,0xffff
	addu	$2,$2,$3
	srl	$3,$2,16
	addu	$2,$3,$2
	nor	$2,$0,$2
	j	$31
	andi	$2,$2,0xffff

	.set	macro
	.set	reorder
	.end	checksum
	.size	checksum, .-checksum
	.section	.text.rtk_sc_set_ack_pkt,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_pkt
	.set	nomips16
	.ent	rtk_sc_set_ack_pkt
	.type	rtk_sc_set_ack_pkt, @function
rtk_sc_set_ack_pkt:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_pkt
	.size	rtk_sc_set_ack_pkt, .-rtk_sc_set_ack_pkt
	.section	.text.send_simple_config_ack,"ax",@progbits
	.align	2
	.globl	send_simple_config_ack
	.set	nomips16
	.ent	send_simple_config_ack
	.type	send_simple_config_ack, @function
send_simple_config_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	send_simple_config_ack
	.size	send_simple_config_ack, .-send_simple_config_ack
	.section	.text.rtk_sc_check_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_pattern
	.set	nomips16
	.ent	rtk_sc_check_pattern
	.type	rtk_sc_check_pattern, @function
rtk_sc_check_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,40($4)
	nop
	beq	$25,$0,$L66
	nop

	jr	$25
	nop

$L66:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_check_pattern
	.size	rtk_sc_check_pattern, .-rtk_sc_check_pattern
	.section	.text.rtk_sc_generate_key,"ax",@progbits
	.align	2
	.globl	rtk_sc_generate_key
	.set	nomips16
	.ent	rtk_sc_generate_key
	.type	rtk_sc_generate_key, @function
rtk_sc_generate_key:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,48($4)
	nop
	beq	$25,$0,$L68
	nop

	jr	$25
	nop

$L68:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_generate_key
	.size	rtk_sc_generate_key, .-rtk_sc_generate_key
	.section	.text.rtk_sc_get_cipher_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_cipher_info
	.set	nomips16
	.ent	rtk_sc_get_cipher_info
	.type	rtk_sc_get_cipher_info, @function
rtk_sc_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,44($4)
	nop
	beq	$25,$0,$L70
	nop

	jr	$25
	nop

$L70:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_get_cipher_info
	.size	rtk_sc_get_cipher_info, .-rtk_sc_get_cipher_info
	.section	.text.rtk_sc_decode_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_decode_profile
	.set	nomips16
	.ent	rtk_sc_decode_profile
	.type	rtk_sc_decode_profile, @function
rtk_sc_decode_profile:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,52($4)
	nop
	beq	$25,$0,$L72
	nop

	jr	$25
	nop

$L72:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_decode_profile
	.size	rtk_sc_decode_profile, .-rtk_sc_decode_profile
	.section	.text.rtk_sc_get_tlv_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_tlv_info
	.set	nomips16
	.ent	rtk_sc_get_tlv_info
	.type	rtk_sc_get_tlv_info, @function
rtk_sc_get_tlv_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,56($4)
	nop
	beq	$25,$0,$L74
	nop

	jr	$25
	nop

$L74:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_get_tlv_info
	.size	rtk_sc_get_tlv_info, .-rtk_sc_get_tlv_info
	.section	.text.rtk_sc_set_ack_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_info
	.set	nomips16
	.ent	rtk_sc_set_ack_info
	.type	rtk_sc_set_ack_info, @function
rtk_sc_set_ack_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	lw	$25,60($4)
	nop
	beq	$25,$0,$L76
	nop

	jr	$25
	nop

$L76:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_info
	.size	rtk_sc_set_ack_info, .-rtk_sc_set_ack_info
	.section	.rodata.str1.4
	.align	2
$LC6:
	.ascii	"The simple config don't support this type in prifole now"
	.ascii	"\012\000"
	.align	2
$LC7:
	.ascii	"the profile don't include necessary info\012\000"
	.section	.text.parse_tlv_info,"ax",@progbits
	.align	2
	.globl	parse_tlv_info
	.set	nomips16
	.ent	parse_tlv_info
	.type	parse_tlv_info, @function
parse_tlv_info:
	.frame	$sp,72,$31		# vars= 16, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-72
	sw	$31,68($sp)
	sw	$fp,64($sp)
	sw	$23,60($sp)
	sw	$22,56($sp)
	sw	$21,52($sp)
	sw	$20,48($sp)
	sw	$19,44($sp)
	sw	$18,40($sp)
	sw	$17,36($sp)
	sw	$16,32($sp)
	li	$2,1			# 0x1
	andi	$7,$7,0x00ff
	move	$16,$4
	move	$18,$5
	bne	$7,$2,$L109
	andi	$17,$6,0x00ff

	j	$L113
	addiu	$3,$4,256

$L87:
	lbu	$21,0($20)
	nop
	andi	$2,$21,0x3
	bne	$2,$3,$L80
	nop

	bne	$fp,$0,$L106
	srl	$21,$21,2

	slt	$2,$21,33
	beq	$2,$0,$L106
	addiu	$20,$20,1

	move	$4,$22
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	move	$4,$20
	move	$6,$21
	move	$5,$22
	addu	$20,$20,$21
	jal	bytecopy
	addiu	$21,$21,1

	addu	$19,$19,$21
	j	$L82
	li	$fp,1			# 0x1

$L80:
	li	$3,2			# 0x2
	bne	$2,$3,$L83
	li	$3,3			# 0x3

	lw	$3,16($sp)
	nop
	bne	$3,$0,$L106
	li	$2,64			# 0x40

	srl	$21,$21,2
	movz	$21,$2,$21
	addiu	$20,$20,1
	move	$4,$23
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	move	$4,$20
	move	$6,$21
	jal	bytecopy
	move	$5,$23

	addu	$20,$20,$21
	li	$3,1			# 0x1
	addiu	$21,$21,1
	addu	$19,$19,$21
	j	$L82
	sw	$3,16($sp)

$L83:
	bne	$2,$3,$L85
	nop

	lw	$3,20($sp)
	nop
	bne	$3,$0,$L106
	srl	$21,$21,2

	li	$2,4			# 0x4
	bne	$21,$2,$L106
	addiu	$4,$20,1

	lw	$5,24($sp)
	jal	bytecopy
	li	$6,4			# 0x4

	li	$3,1			# 0x1
	addiu	$20,$20,5
	addiu	$19,$19,5
	j	$L82
	sw	$3,20($sp)

$L85:
	beq	$21,$0,$L108
	li	$2,-1			# 0xffffffffffffffff

	j	$L81
	nop

$L82:
	slt	$2,$17,$19
	beq	$2,$0,$L78
	li	$2,-1			# 0xffffffffffffffff

	j	$L81
	nop

$L113:
	move	$20,$5
	sw	$0,20($sp)
	sw	$0,16($sp)
	move	$fp,$0
	move	$19,$0
	sw	$3,24($sp)
	addiu	$23,$4,94
	addiu	$22,$4,30
$L78:
	slt	$2,$19,$17
	bne	$2,$0,$L87
	li	$3,1			# 0x1

	j	$L114
	nop

$L89:
	lbu	$2,0($2)
	nop
	bne	$2,$0,$L106
	addiu	$19,$19,1

$L108:
	slt	$2,$19,$17
$L114:
	bne	$2,$0,$L89
	addu	$2,$18,$19

	j	$L90
	nop

$L109:
	beq	$7,$0,$L107
	move	$19,$0

	j	$L90
	nop

$L96:
	lbu	$2,0($18)
	nop
	bne	$2,$3,$L92
	move	$4,$21

	lbu	$20,1($18)
	move	$5,$0
	addiu	$18,$18,2
	jal	memset
	li	$6,64			# 0x40

	move	$4,$18
	j	$L111
	move	$5,$21

$L92:
	bne	$2,$fp,$L94
	li	$3,3			# 0x3

	lbu	$20,1($18)
	move	$4,$22
	move	$5,$0
	addiu	$18,$18,2
	jal	memset
	li	$6,64			# 0x40

	move	$4,$18
	j	$L111
	move	$5,$22

$L94:
	bne	$2,$3,$L95
	move	$5,$23

	lbu	$20,1($18)
	addiu	$18,$18,2
	move	$4,$18
$L111:
	move	$6,$20
	addu	$18,$18,$20
	jal	bytecopy
	addiu	$20,$20,2

	j	$L110
	addu	$19,$19,$20

$L95:
	beq	$2,$0,$L90
	lui	$4,%hi($LC6)

	j	$L112
	addiu	$4,$4,%lo($LC6)

$L107:
	li	$fp,2			# 0x2
	addiu	$23,$4,256
	addiu	$22,$4,94
	addiu	$21,$4,30
$L110:
	slt	$2,$19,$17
	bne	$2,$0,$L96
	li	$3,1			# 0x1

$L90:
	lw	$5,256($16)
	nop
	bne	$5,$0,$L97
	lui	$4,%hi($LC7)

	addiu	$4,$4,%lo($LC7)
$L112:
	jal	printk
	nop

	j	$L81
	li	$2,-1			# 0xffffffffffffffff

$L97:
	jal	rtk_sc_set_value
	li	$4,12			# 0xc

	j	$L81
	move	$2,$0

$L106:
	li	$2,-1			# 0xffffffffffffffff
$L81:
	lw	$31,68($sp)
	lw	$fp,64($sp)
	lw	$23,60($sp)
	lw	$22,56($sp)
	lw	$21,52($sp)
	lw	$20,48($sp)
	lw	$19,44($sp)
	lw	$18,40($sp)
	lw	$17,36($sp)
	lw	$16,32($sp)
	j	$31
	addiu	$sp,$sp,72

	.set	macro
	.set	reorder
	.end	parse_tlv_info
	.size	parse_tlv_info, .-parse_tlv_info
	.section	.rodata.str1.4
	.align	2
$LC8:
	.ascii	"sc_mcast_udp\000"
	.section	.text.mcast_udp_get_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_profile
	.set	nomips16
	.ent	mcast_udp_get_profile
	.type	mcast_udp_get_profile, @function
mcast_udp_get_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$2,%hi($LC8)
	move	$16,$5
	addiu	$4,$4,8
	addiu	$5,$5,1856
	addiu	$2,$2,%lo($LC8)
 #APP
 # 80 "/home/kai_wang/3473/branch-rtl819x-sdk-v3.4.7.3/linux-3.10/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
	lbu	$3,($4)
1:	lbu	$1,($2)
	addiu	$4,1
	bne	$1,$3,2f
	addiu	$2,1
	bnez	$3,1b
	lbu	$3,($4)
	nop
	move	$3,$1
2:	subu	$3,$1
3:	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	lw	$17,2112($16)
	.set	noreorder
	.set	nomacro
	bne	$3,$0,$L116
	move	$4,$16
	.set	macro
	.set	reorder

	move	$4,$5
	lui	$5,%hi(default_key_iv)
	addiu	$5,$5,%lo(default_key_iv)
	.set	noreorder
	.set	nomacro
	jal	memcmp
	li	$6,8			# 0x8
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L117
	addiu	$6,$17,-8
	.set	macro
	.set	reorder

	move	$4,$16
	addiu	$5,$16,1864
	andi	$6,$6,0x00ff
	.set	noreorder
	.set	nomacro
	j	$L118
	move	$7,$0
	.set	macro
	.set	reorder

$L116:
	andi	$6,$17,0x00ff
	li	$7,1			# 0x1
$L118:
	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	.set	noreorder
	.set	nomacro
	j	parse_tlv_info
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

$L117:
	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	li	$2,-1			# 0xffffffffffffffff
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

	.end	mcast_udp_get_profile
	.size	mcast_udp_get_profile, .-mcast_udp_get_profile
	.section	.text.rtk_sc_clean_profile_value,"ax",@progbits
	.align	2
	.globl	rtk_sc_clean_profile_value
	.set	nomips16
	.ent	rtk_sc_clean_profile_value
	.type	rtk_sc_clean_profile_value, @function
rtk_sc_clean_profile_value:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	lui	$2,%hi(fix_sa)
	sw	$0,%lo(fix_sa)($2)
	lui	$2,%hi(finish_sync)
	sw	$0,%lo(finish_sync)($2)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	li	$3,-1			# 0xffffffffffffffff
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$2,%hi(g_p4_group)
	sw	$3,%lo(g_p4_group)($2)
	lui	$2,%hi(g_pkt_type)
	sw	$0,%lo(g_pkt_type)($2)
	lui	$2,%hi(g_p4_last_seq)
	sw	$0,%lo(g_p4_last_seq)($2)
	lui	$2,%hi(g_p4_to_ds_hrate)
	sw	$0,%lo(g_p4_to_ds_hrate)($2)
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	move	$5,$0
	li	$6,6			# 0x6
	sw	$0,8($2)
	sw	$0,2112($2)
	sw	$0,2148($2)
	sw	$0,2408($2)
	jal	memset
	sw	$0,2412($2)

	lui	$4,%hi(g_sc_ctx+18)
	addiu	$4,$4,%lo(g_sc_ctx+18)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+24)
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+30)
	addiu	$4,$4,%lo(g_sc_ctx+30)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+94)
	addiu	$4,$4,%lo(g_sc_ctx+94)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+2741)
	addiu	$4,$4,%lo(g_sc_ctx+2741)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2676)
	addiu	$4,$4,%lo(g_sc_ctx+2676)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2810)
	addiu	$4,$4,%lo(g_sc_ctx+2810)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+260)
	addiu	$4,$4,%lo(g_sc_ctx+260)
	move	$5,$0
	jal	memset
	li	$6,54			# 0x36

	lui	$4,%hi(g_sc_ctx+314)
	addiu	$4,$4,%lo(g_sc_ctx+314)
	move	$5,$0
	jal	memset
	li	$6,1536			# 0x600

	lui	$4,%hi(g_sc_ctx+2874)
	addiu	$4,$4,%lo(g_sc_ctx+2874)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_sc_ctx+3130)
	addiu	$4,$4,%lo(g_sc_ctx+3130)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_option_sa)
	addiu	$4,$4,%lo(g_option_sa)
	move	$5,$0
	jal	memset
	li	$6,80			# 0x50

	lw	$31,20($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_clean_profile_value
	.size	rtk_sc_clean_profile_value, .-rtk_sc_clean_profile_value
	.section	.rodata.str1.4
	.align	2
$LC9:
	.ascii	"try to clean profile!\012\000"
	.align	2
$LC10:
	.ascii	"df*r43^fdjakfo\000"
	.section	.text.rtk_sc_restart_simple_config,"ax",@progbits
	.align	2
	.globl	rtk_sc_restart_simple_config
	.set	nomips16
	.ent	rtk_sc_restart_simple_config
	.type	rtk_sc_restart_simple_config, @function
rtk_sc_restart_simple_config:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	nop
	beq	$2,$0,$L121
	move	$16,$4

	lui	$4,%hi($LC9)
	jal	printk
	addiu	$4,$4,%lo($LC9)

$L121:
	jal	rtk_sc_clean_profile_value
	nop

	lui	$5,%hi($LC10)
	li	$4,25			# 0x19
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo($LC10)

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1000			# 0x3e8

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,18			# 0x12
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,28			# 0x1c
	jal	rtk_sc_set_value
	move	$5,$0

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_restart_simple_config
	.size	rtk_sc_restart_simple_config, .-rtk_sc_restart_simple_config
	.section	.rodata.str1.4
	.align	2
$LC11:
	.ascii	"Register Realtek Simple Config\012\000"
	.section	.text.rtk_sc_init,"ax",@progbits
	.align	2
	.globl	rtk_sc_init
	.set	nomips16
	.ent	rtk_sc_init
	.type	rtk_sc_init, @function
rtk_sc_init:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$16,%hi(g_sc_ctx)
	move	$5,$0
	li	$6,3388			# 0xd3c
	jal	memset
	addiu	$4,$16,%lo(g_sc_ctx)

	lui	$4,%hi(udp_mcast)
	addiu	$16,$16,%lo(g_sc_ctx)
	li	$2,256			# 0x100
	addiu	$4,$4,%lo(udp_mcast)
	jal	rtk_sc_register_pattern
	sw	$2,2112($16)

	lui	$4,%hi(udp_mcast_pin)
	jal	rtk_sc_register_pattern
	addiu	$4,$4,%lo(udp_mcast_pin)

	lui	$4,%hi(udp_bcast_pin)
	jal	rtk_sc_register_pattern
	addiu	$4,$4,%lo(udp_bcast_pin)

	lui	$4,%hi($LC11)
	jal	printk
	addiu	$4,$4,%lo($LC11)

	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_init
	.size	rtk_sc_init, .-rtk_sc_init
	.section	.rodata.str1.4
	.align	2
$LC12:
	.ascii	"get the profile info fail\012\000"
	.align	2
$LC13:
	.ascii	"get the profile\012\000"
	.align	2
$LC14:
	.ascii	"get the profile and encrypt info now, try to connect rem"
	.ascii	"ote AP\012\000"
	.section	.text.rtk_sc_check_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_profile
	.set	nomips16
	.ent	rtk_sc_check_profile
	.type	rtk_sc_check_profile, @function
rtk_sc_check_profile:
	.frame	$sp,48,$31		# vars= 0, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-48
	sw	$31,44($sp)
	sw	$21,40($sp)
	sw	$20,36($sp)
	sw	$19,32($sp)
	sw	$18,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$18,%hi(pp)
	move	$16,$4
	lw	$4,%lo(pp)($18)
	lui	$17,%hi(g_sc_ctx)
	addiu	$5,$17,%lo(g_sc_ctx)
	lui	$19,%hi(use_ios7_mac)
	jal	rtk_sc_get_cipher_info
	sw	$0,%lo(use_ios7_mac)($19)

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_generate_key
	addiu	$5,$17,%lo(g_sc_ctx)

	bne	$2,$0,$L136
	nop

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_decode_profile
	addiu	$5,$17,%lo(g_sc_ctx)

	bne	$2,$0,$L136
	nop

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$17,%lo(g_sc_ctx)

	beq	$2,$0,$L143
	lui	$5,%hi(g_sc_ctx+94)

$L136:
	lw	$4,%lo(pp)($18)
	li	$2,1			# 0x1
	addiu	$5,$17,%lo(g_sc_ctx)
	sw	$2,%lo(use_ios7_mac)($19)
	lui	$21,%hi(pp)
	jal	rtk_sc_generate_key
	lui	$20,%hi(g_sc_ctx)

	bne	$2,$0,$L126
	nop

	lw	$4,%lo(pp)($21)
	jal	rtk_sc_decode_profile
	addiu	$5,$20,%lo(g_sc_ctx)

	bne	$2,$0,$L126
	nop

	lw	$4,%lo(pp)($21)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$20,%lo(g_sc_ctx)

$L126:
	beq	$2,$0,$L125
	sw	$0,%lo(use_ios7_mac)($19)

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	nop
	beq	$2,$0,$L127
	nop

	lui	$4,%hi($LC12)
	jal	printk
	addiu	$4,$4,%lo($LC12)

$L127:
	lw	$2,%lo(pp)($18)
	nop
	lw	$3,0($2)
	li	$2,5			# 0x5
	beq	$3,$2,$L128
	li	$19,-1			# 0xffffffffffffffff

	jal	rtk_sc_restart_simple_config
	move	$4,$16

	j	$L142
	move	$2,$19

$L125:
	lui	$5,%hi(g_sc_ctx+94)
$L143:
	addiu	$5,$5,%lo(g_sc_ctx+94)
	jal	rtk_sc_set_string_value
	li	$4,22			# 0x16

	jal	rtk_sc_get_value
	li	$4,28			# 0x1c

	move	$18,$2
	li	$4,28			# 0x1c
	jal	rtk_sc_set_value
	move	$5,$0

	bne	$18,$0,$L129
	lui	$2,%hi(g_sc_debug)

	lw	$2,%lo(g_sc_debug)($2)
	nop
	beq	$2,$0,$L130
	lui	$4,%hi($LC13)

	jal	printk
	addiu	$4,$4,%lo($LC13)

$L130:
	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	addiu	$17,$17,%lo(g_sc_ctx)
	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	lbu	$2,30($17)
	nop
	beq	$2,$0,$L131
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L139
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L131:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L139:
	jal	rtk_sc_set_string_value
	move	$19,$0

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	j	$L142
	move	$2,$19

$L129:
	blez	$18,$L128
	move	$19,$0

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	nop
	beq	$2,$0,$L133
	nop

	lui	$4,%hi($LC14)
	jal	printk
	addiu	$4,$4,%lo($LC14)

$L133:
	addiu	$17,$17,%lo(g_sc_ctx)
	lbu	$2,30($17)
	nop
	beq	$2,$0,$L134
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L140
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L134:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L140:
	jal	rtk_sc_set_string_value
	move	$19,$0

	jal	rtk_sc_set_passwd
	move	$4,$16

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,4			# 0x4

	li	$5,4			# 0x4
	jal	rtk_sc_set_value
	li	$4,7			# 0x7

	jal	rtk_sc_sync_vxd_to_root
	move	$4,$16

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	jal	rtk_sc_start_connect_target
	move	$4,$16

$L128:
	move	$2,$19
$L142:
	lw	$31,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	j	$31
	addiu	$sp,$sp,48

	.set	macro
	.set	reorder
	.end	rtk_sc_check_profile
	.size	rtk_sc_check_profile, .-rtk_sc_check_profile
	.section	.rodata.str1.4
	.align	2
$LC15:
	.ascii	"this packet is not profile packet\012\000"
	.section	.text.rtk_sc_valid_profile_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_valid_profile_packet
	.set	nomips16
	.ent	rtk_sc_valid_profile_packet
	.type	rtk_sc_valid_profile_packet, @function
rtk_sc_valid_profile_packet:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	lw	$2,24($4)
	lw	$5,12($4)
	lbu	$4,3($2)
	lui	$2,%hi(g_sc_magic)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$3,$2,32
$L146:
	lw	$6,0($2)
	nop
	addu	$6,$4,$6
	beq	$5,$6,$L149
	addiu	$2,$2,4

	bne	$2,$3,$L146
	nop

	j	$L153
	lui	$2,%hi(g_sc_debug)

$L148:
	jal	printk
	addiu	$4,$4,%lo($LC15)

	j	$L145
	move	$2,$0

$L149:
	li	$2,1			# 0x1
$L145:
	lw	$31,20($sp)
	nop
	j	$31
	addiu	$sp,$sp,24

$L153:
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	beq	$3,$2,$L148
	lui	$4,%hi($LC15)

	j	$L145
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_valid_profile_packet
	.size	rtk_sc_valid_profile_packet, .-rtk_sc_valid_profile_packet
	.section	.text.rtk_sc_set_para,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_para
	.set	nomips16
	.ent	rtk_sc_set_para
	.type	rtk_sc_set_para, @function
rtk_sc_set_para:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	jal	rtk_sc_get_value
	li	$4,8			# 0x8

	lui	$3,%hi(g_sc_debug)
	li	$4,16			# 0x10
	sw	$2,%lo(g_sc_debug)($3)
	jal	rtk_sc_get_value
	lui	$16,%hi(g_sc_check_level)

	li	$4,17			# 0x11
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_check_level)($16)

	lui	$3,%hi(g_sc_ignore_overlap)
	li	$4,29			# 0x1d
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_ignore_overlap)($3)

	lui	$3,%hi(g_sc_config_type)
	sw	$2,%lo(g_sc_config_type)($3)
	lw	$2,%lo(g_sc_check_level)($16)
	nop
	beq	$2,$0,$L155
	lui	$4,%hi(g_sc_magic)

	addiu	$4,$4,%lo(g_sc_magic)
	jal	rtk_sc_get_magic
	li	$5,8			# 0x8

$L155:
	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_set_para
	.size	rtk_sc_set_para, .-rtk_sc_set_para
	.section	.rodata.str1.4
	.align	2
$LC16:
	.ascii	"index is %d, received packet number is %d\012\000"
	.align	2
$LC17:
	.ascii	"sync index is %d\012\000"
	.align	2
$LC18:
	.ascii	"the BSSID is \000"
	.align	2
$LC19:
	.ascii	"the Control Device MAC is \000"
	.align	2
$LC20:
	.ascii	"the option Control Device MAC is \000"
	.align	2
$LC21:
	.ascii	"the option Control Device number is %d, the pkt len is %"
	.ascii	"d\012\000"
	.align	2
$LC22:
	.ascii	"the magic number 1 is %d, the magic number 2 is %d\012\000"
	.align	2
$LC23:
	.ascii	"the total profile packet num is %d\012\000"
	.align	2
$LC24:
	.ascii	"index is %d, total is %d, received %d now!\012\000"
	.align	2
$LC25:
	.ascii	"don't add this data to profile\012\000"
	.align	2
$LC26:
	.ascii	"seq %d is over max length\012\000"
	.align	2
$LC27:
	.ascii	"index is %d, tatal is %d, received %d now!\012\000"
	.align	2
$LC28:
	.ascii	"seq %d is NULL\012\000"
	.section	.text.rtk_sc_start_parse_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_start_parse_packet
	.set	nomips16
	.ent	rtk_sc_start_parse_packet
	.type	rtk_sc_start_parse_packet, @function
rtk_sc_start_parse_packet:
	.frame	$sp,72,$31		# vars= 16, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	addiu	$sp,$sp,-72
	sw	$31,68($sp)
	sw	$fp,64($sp)
	sw	$23,60($sp)
	sw	$22,56($sp)
	sw	$21,52($sp)
	sw	$20,48($sp)
	sw	$19,44($sp)
	sw	$18,40($sp)
	sw	$17,36($sp)
	sw	$16,32($sp)
	lui	$16,%hi(g_sc_debug)
	move	$17,$4
	li	$4,13			# 0xd
	jal	rtk_sc_get_value
	move	$18,$5

	lw	$3,%lo(g_sc_debug)($16)
	move	$19,$2
	li	$2,-1			# 0xffffffffffffffff
	bne	$3,$2,$L157
	nop

	lw	$4,24($18)
	jal	bytedump
	li	$5,6			# 0x6

$L157:
	lw	$2,24($18)
	li	$3,1			# 0x1
	lbu	$4,0($2)
	nop
	bne	$4,$3,$L158
	nop

	lbu	$3,1($2)
	nop
	bne	$3,$0,$L158
	li	$3,94			# 0x5e

	lbu	$4,2($2)
	nop
	bne	$4,$3,$L158
	nop

	lbu	$3,3($2)
	nop
	bne	$3,$0,$L158
	nop

	lbu	$3,5($2)
	nop
	beq	$3,$0,$L158
	li	$3,-128			# 0xffffffffffffff80

	sb	$3,3($2)
$L158:
	addiu	$2,$19,-1
	sltu	$2,$2,2
	beq	$2,$0,$L159
	lui	$22,%hi(finish_sync)

	lw	$2,%lo(finish_sync)($22)
	nop
	bne	$2,$0,$L160
	li	$3,2			# 0x2

	lw	$4,24($18)
	li	$3,1			# 0x1
	lbu	$2,0($4)
	nop
	bne	$2,$3,$L161
	li	$3,255			# 0xff

	lbu	$2,1($4)
	nop
	bne	$2,$0,$L159
	li	$2,94			# 0x5e

	lbu	$3,2($4)
	nop
	bne	$3,$2,$L159
	nop

	jal	CHECKSUM_OK
	li	$5,6			# 0x6

	beq	$2,$0,$L159
	lui	$fp,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($fp)
	li	$2,2			# 0x2
	beq	$3,$2,$L159
	lui	$3,%hi(g_sc_config_type)

	lw	$3,%lo(g_sc_config_type)($3)
	nop
	andi	$3,$3,0x1
	beq	$3,$0,$L159
	lui	$19,%hi(g_sc_check_level)

	lw	$3,%lo(g_sc_check_level)($19)
	nop
	bne	$3,$2,$L272
	lui	$20,%hi(fix_sa)

	jal	rtk_sc_valid_profile_packet
	move	$4,$18

	beq	$2,$0,$L159
	lui	$20,%hi(fix_sa)

$L272:
	lw	$3,%lo(fix_sa)($20)
	li	$2,1			# 0x1
	bne	$3,$2,$L273
	lui	$4,%hi(g_sc_ctx+12)

	lw	$5,28($18)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L163
	li	$2,1			# 0x1

	lw	$2,24($18)
	li	$3,6			# 0x6
	lui	$23,%hi(g_sc_ctx)
	lbu	$5,3($2)
	addiu	$2,$23,%lo(g_sc_ctx)
	mult	$5,$3
	mflo	$6
	addu	$6,$6,$2
	lbu	$4,260($6)
	nop
	bne	$4,$0,$L159
	slt	$7,$5,9

	bne	$7,$0,$L164
	nop

	addiu	$4,$5,-9
	mult	$4,$3
	mflo	$3
	addu	$2,$3,$2
	lbu	$3,314($2)
	nop
	bne	$3,$0,$L159
	move	$4,$0

	li	$3,6			# 0x6
$L165:
	lw	$6,24($18)
	nop
	addu	$6,$6,$4
	lbu	$7,0($6)
	addu	$6,$2,$4
	addiu	$4,$4,1
	bne	$4,$3,$L165
	sb	$7,314($6)

	lui	$2,%hi(profile_pkt_index)
	lw	$6,%lo(profile_pkt_index)($2)
	lw	$3,%lo(g_sc_debug)($16)
	addiu	$6,$6,1
	sw	$6,%lo(profile_pkt_index)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L166
	nop

	lui	$4,%hi($LC16)
	jal	printk
	addiu	$4,$4,%lo($LC16)

	j	$L270
	lui	$21,%hi(sync_pkt_index)

$L164:
	li	$2,6			# 0x6
$L253:
	lw	$3,24($18)
	nop
	addu	$3,$3,$4
	lbu	$7,0($3)
	addu	$3,$6,$4
	addiu	$4,$4,1
	bne	$4,$2,$L253
	sb	$7,260($3)

	li	$2,1			# 0x1
	sll	$5,$2,$5
	lui	$2,%hi(sync_pkt_index)
	lw	$3,%lo(sync_pkt_index)($2)
	nop
	or	$5,$5,$3
	lw	$3,%lo(g_sc_debug)($16)
	sw	$5,%lo(sync_pkt_index)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L270
	lui	$21,%hi(sync_pkt_index)

	lui	$4,%hi($LC17)
	jal	printk
	addiu	$4,$4,%lo($LC17)

$L166:
	lui	$21,%hi(sync_pkt_index)
$L270:
	lw	$3,%lo(sync_pkt_index)($21)
	li	$2,511			# 0x1ff
	andi	$3,$3,0x1ff
	bne	$3,$2,$L159
	lui	$19,%hi(g_sc_ctx+2416)

	addiu	$16,$23,%lo(g_sc_ctx)
	addiu	$19,$19,%lo(g_sc_ctx+2416)
	move	$18,$0
	j	$L167
	lui	$23,%hi(pp)

$L172:
	lw	$4,0($19)
	nop
	beq	$4,$0,$L168
	sw	$4,%lo(pp)($23)

	lw	$2,4($4)
	nop
	andi	$2,$2,0x2
	beq	$2,$0,$L168
	move	$5,$16

	jal	rtk_sc_check_pattern
	move	$6,$17

	bne	$2,$0,$L274
	addiu	$18,$18,1

	addiu	$18,$18,-1
	li	$2,1			# 0x1
	li	$4,14			# 0xe
	move	$5,$0
	jal	rtk_sc_set_value
	sw	$2,%lo(finish_sync)($22)

	lui	$2,%hi(profile_pkt_index)
	lw	$3,1852($16)
	lw	$2,%lo(profile_pkt_index)($2)
	nop
	sltu	$2,$2,$3
	bne	$2,$0,$L159
	sw	$0,%lo(sync_pkt_index)($21)

	lui	$4,%hi(g_sc_ctx+368)
	addiu	$4,$4,%lo(g_sc_ctx+368)
	j	$L169
	li	$2,9			# 0x9

$L171:
	beq	$4,$0,$L213
	nop

	addiu	$2,$2,1
	addiu	$4,$4,6
$L169:
	sltu	$5,$2,$3
	bne	$5,$0,$L171
	nop

	j	$L213
	nop

$L168:
	addiu	$18,$18,1
$L274:
	addiu	$19,$19,4
$L167:
	lw	$2,2672($16)
	nop
	slt	$2,$18,$2
	bne	$2,$0,$L172
	nop

	j	$L268
	sw	$0,%lo(fix_sa)($20)

$L163:
	lw	$3,%lo(fix_sa)($20)
	nop
$L273:
	bne	$3,$2,$L173
	lui	$2,%hi(g_sc_ignore_overlap)

	lw	$2,%lo(g_sc_ignore_overlap)($2)
	nop
	bne	$2,$0,$L159
	nop

$L173:
	lw	$2,%lo(g_sc_check_level)($19)
	nop
	beq	$2,$0,$L174
	nop

	jal	rtk_sc_valid_profile_packet
	move	$4,$18

	beq	$2,$0,$L159
	nop

$L174:
	lw	$5,28($18)
	lui	$17,%hi(g_sc_ctx+12)
	addiu	$4,$17,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lw	$5,28($18)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($18)
	lui	$21,%hi(g_sc_ctx+24)
	lw	$4,196($2)
	jal	get_bssid
	lui	$23,%hi(g_sc_bssid)

	move	$19,$2
	addiu	$4,$21,%lo(g_sc_ctx+24)
	move	$5,$2
	jal	memcpy
	li	$6,6			# 0x6

	addiu	$4,$23,%lo(g_sc_bssid)
	li	$6,6			# 0x6
	jal	memcpy
	move	$5,$19

	addiu	$5,$23,%lo(g_sc_bssid)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	lui	$23,%hi(null_mac)

	move	$4,$19
	addiu	$5,$23,%lo(null_mac)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L275
	lui	$2,%hi(sync_pkt_index)

	addiu	$4,$17,%lo(g_sc_ctx+12)
	addiu	$5,$23,%lo(null_mac)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L275
	lui	$2,%hi(sync_pkt_index)

	move	$4,$19
	addiu	$5,$17,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L275
	lui	$2,%hi(sync_pkt_index)

	lw	$2,%lo(g_sc_debug)($16)
	nop
	beq	$2,$0,$L176
	sw	$0,%lo(finish_sync)($22)

	lui	$4,%hi($LC18)
	jal	printk
	addiu	$4,$4,%lo($LC18)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$21,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC19)
	jal	printk
	addiu	$4,$4,%lo($LC19)

	addiu	$4,$17,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L176:
	lbu	$5,40($18)
	jal	rtk_sc_set_value
	li	$4,19			# 0x13

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$21,%lo(g_sc_ctx+24)

	li	$2,1			# 0x1
	sw	$2,%lo(fix_sa)($20)
	sw	$2,%lo(g_pkt_type)($fp)
	lui	$2,%hi(sync_pkt_index)
$L275:
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	li	$4,14			# 0xe
	lui	$2,%hi(sequence)
	move	$5,$0
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	j	$L159
	nop

$L161:
	bne	$2,$3,$L159
	nop

	lbu	$3,1($4)
	nop
	bne	$3,$2,$L159
	nop

	lbu	$2,2($4)
	nop
	bne	$2,$3,$L159
	nop

	lbu	$3,3($4)
	nop
	bne	$3,$2,$L159
	nop

	lbu	$2,4($4)
	nop
	bne	$2,$3,$L159
	nop

	lbu	$3,5($4)
	nop
	bne	$3,$2,$L159
	nop

	lbu	$2,40($18)
	nop
	addiu	$2,$2,-1
	andi	$2,$2,0x00ff
	sltu	$2,$2,2
	beq	$2,$0,$L159
	lui	$2,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($2)
	li	$2,1			# 0x1
	beq	$3,$2,$L159
	lui	$2,%hi(g_sc_config_type)

	lw	$2,%lo(g_sc_config_type)($2)
	nop
	andi	$2,$2,0x2
	beq	$2,$0,$L159
	lui	$21,%hi(g_option_sa)

	move	$19,$0
	addiu	$21,$21,%lo(g_option_sa)
	lui	$fp,%hi(g_sc_ctx+24)
$L206:
	lui	$3,%hi(g_sc_magic)
	addiu	$3,$3,%lo(g_sc_magic)
	sll	$2,$19,2
	addu	$2,$2,$3
	lw	$2,0($2)
	lw	$4,12($18)
	addiu	$2,$2,3
	bne	$4,$2,$L177
	lui	$3,%hi(g_sc_magic)

	move	$23,$0
$L183:
	lw	$5,28($18)
	sll	$20,$23,4
	addu	$20,$21,$20
	move	$4,$20
	li	$6,6			# 0x6
	jal	memcmp
	sw	$3,28($sp)

	lw	$3,28($sp)
	bne	$2,$0,$L178
	lui	$5,%hi(null_mac)

	lbu	$2,40($18)
	li	$4,1			# 0x1
	bne	$2,$4,$L179
	li	$5,2			# 0x2

	lw	$2,8($20)
	nop
	bne	$2,$0,$L159
	sll	$19,$19,2

	addiu	$3,$3,%lo(g_sc_magic)
	addu	$3,$19,$3
	lw	$2,0($3)
	j	$L159
	sw	$2,8($20)

$L179:
	bne	$2,$5,$L159
	nop

	lw	$2,12($20)
	nop
	bne	$2,$0,$L159
	sll	$19,$19,2

	addiu	$3,$3,%lo(g_sc_magic)
	addu	$3,$19,$3
	lw	$2,0($3)
	nop
	sw	$2,12($20)
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	nop
	bne	$3,$0,$L159
	nop

	lbu	$3,50($18)
	nop
	sltu	$3,$3,55
	bne	$3,$0,$L159
	nop

	j	$L159
	sw	$4,%lo(g_p4_to_ds_hrate)($2)

$L178:
	move	$4,$20
	addiu	$5,$5,%lo(null_mac)
	li	$6,6			# 0x6
	jal	memcmp
	sw	$3,28($sp)

	lw	$3,28($sp)
	bne	$2,$0,$L180
	li	$4,5			# 0x5

	lbu	$2,40($18)
	li	$4,1			# 0x1
	bne	$2,$4,$L181
	li	$5,2			# 0x2

	sll	$19,$19,2
	addiu	$3,$3,%lo(g_sc_magic)
	addu	$3,$19,$3
	lw	$2,0($3)
	j	$L182
	sw	$2,8($20)

$L181:
	bne	$2,$5,$L182
	sll	$19,$19,2

	addiu	$3,$3,%lo(g_sc_magic)
	addu	$3,$19,$3
	lw	$2,0($3)
	nop
	sw	$2,12($20)
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	nop
	bne	$3,$0,$L182
	nop

	lbu	$3,50($18)
	nop
	sltu	$3,$3,55
	bne	$3,$0,$L182
	nop

	sw	$4,%lo(g_p4_to_ds_hrate)($2)
$L182:
	lw	$5,28($18)
	move	$4,$20
	jal	memcpy
	li	$6,6			# 0x6

	lui	$2,%hi(g_p4_option_num)
	lw	$3,%lo(g_p4_option_num)($2)
	nop
	addiu	$3,$3,1
	sw	$3,%lo(g_p4_option_num)($2)
	lw	$2,%lo(g_sc_debug)($16)
	nop
	beq	$2,$0,$L159
	lui	$4,%hi($LC20)

	jal	printk
	addiu	$4,$4,%lo($LC20)

	move	$4,$20
	jal	bytedump
	li	$5,6			# 0x6

	j	$L159
	nop

$L180:
	addiu	$23,$23,1
	bne	$23,$4,$L183
	li	$4,1			# 0x1

	lbu	$2,40($18)
	nop
	bne	$2,$4,$L184
	lui	$20,%hi(g_p4_option_num)

	lw	$2,%lo(g_p4_option_num)($20)
	addiu	$3,$3,%lo(g_sc_magic)
	lui	$6,%hi(g_option_sa)
	divu	$0,$2,$23
	sll	$2,$19,2
	addu	$3,$2,$3
	lw	$2,0($3)
	addiu	$6,$6,%lo(g_option_sa)
	mfhi	$23
	sll	$23,$23,4
	addu	$23,$23,$6
	j	$L185
	sw	$2,8($23)

$L184:
	li	$4,2			# 0x2
	bne	$2,$4,$L185
	addiu	$3,$3,%lo(g_sc_magic)

	lw	$2,%lo(g_p4_option_num)($20)
	lui	$7,%hi(g_option_sa)
	divu	$0,$2,$23
	sll	$2,$19,2
	addu	$3,$2,$3
	lw	$2,0($3)
	addiu	$7,$7,%lo(g_option_sa)
	mfhi	$23
	sll	$23,$23,4
	addu	$23,$7,$23
	sw	$2,12($23)
$L185:
	lw	$4,%lo(g_p4_option_num)($20)
	li	$23,5			# 0x5
	lw	$5,28($18)
	divu	$0,$4,$23
	li	$6,6			# 0x6
	mfhi	$4
	sll	$4,$4,4
	jal	memcpy
	addu	$4,$21,$4

	lw	$2,%lo(g_p4_option_num)($20)
	nop
	addiu	$2,$2,1
	sw	$2,%lo(g_p4_option_num)($20)
	lw	$2,%lo(g_sc_debug)($16)
	nop
	beq	$2,$0,$L276
	lui	$20,%hi(g_option_sa+12)

	lui	$4,%hi($LC20)
	jal	printk
	addiu	$4,$4,%lo($LC20)

	lui	$2,%hi(g_p4_option_num)
	lw	$4,%lo(g_p4_option_num)($2)
	li	$5,6			# 0x6
	divu	$0,$4,$23
	mfhi	$4
	sll	$4,$4,4
	jal	bytedump
	addu	$4,$21,$4

	lui	$3,%hi(g_p4_option_num)
	lw	$5,%lo(g_p4_option_num)($3)
	lw	$6,12($18)
	lui	$4,%hi($LC21)
	jal	printk
	addiu	$4,$4,%lo($LC21)

	lui	$4,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($4)
	lui	$4,%hi($LC22)
	divu	$0,$2,$23
	mfhi	$23
	sll	$23,$23,4
	addu	$23,$23,$21
	lw	$5,8($23)
	lw	$6,12($23)
	jal	printk
	addiu	$4,$4,%lo($LC22)

$L177:
	lui	$20,%hi(g_option_sa+12)
$L276:
	addiu	$20,$20,%lo(g_option_sa+12)
	move	$23,$0
$L205:
	lw	$5,28($18)
	sll	$4,$23,4
	addu	$4,$21,$4
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L186
	nop

	lw	$7,-4($20)
	nop
	bne	$7,$0,$L187
	nop

	lw	$2,0($20)
	nop
	beq	$2,$0,$L186
	nop

$L187:
	lw	$3,0($20)
	move	$6,$7
	lw	$8,12($18)
	sltu	$4,$3,$7
	movz	$6,$3,$4
	addiu	$2,$6,1094
	sltu	$2,$2,$8
	beq	$2,$0,$L188
	move	$4,$6

	addiu	$5,$6,1111
	sltu	$5,$5,$8
	beq	$5,$0,$L189
	li	$2,4			# 0x4

$L188:
	addiu	$2,$4,1070
	sltu	$2,$2,$8
	beq	$2,$0,$L277
	addiu	$2,$4,1046

	addiu	$5,$4,1087
	sltu	$5,$5,$8
	beq	$5,$0,$L189
	li	$2,3			# 0x3

	addiu	$2,$4,1046
$L277:
	sltu	$2,$2,$8
	beq	$2,$0,$L278
	addiu	$2,$4,1022

	addiu	$5,$4,1063
	sltu	$5,$5,$8
	beq	$5,$0,$L189
	li	$2,2			# 0x2

	addiu	$2,$4,1022
$L278:
	sltu	$2,$2,$8
	beq	$2,$0,$L186
	addiu	$4,$4,1039

	sltu	$4,$4,$8
	bne	$4,$0,$L186
	li	$2,1			# 0x1

$L189:
	lui	$4,%hi(g_p4_magic_1)
	sw	$7,%lo(g_p4_magic_1)($4)
	lui	$4,%hi(g_p4_magic_2)
	beq	$7,$0,$L192
	sw	$3,%lo(g_p4_magic_2)($4)

	beq	$3,$0,$L192
	nop

	beq	$3,$7,$L192
	sltu	$5,$3,$7

	beq	$5,$0,$L279
	sltu	$5,$7,$3

	addiu	$5,$7,-2
	bne	$3,$5,$L159
	sltu	$5,$7,$3

$L279:
	beq	$5,$0,$L192
	addiu	$3,$3,-2

	bne	$7,$3,$L159
	nop

$L192:
	lbu	$5,40($18)
	li	$3,1			# 0x1
	bne	$5,$3,$L280
	nop

	beq	$7,$0,$L281
	li	$3,2			# 0x2

	lui	$6,%hi(g_sc_ctx)
	bne	$2,$5,$L195
	addiu	$3,$6,%lo(g_sc_ctx)

	li	$6,268369920			# 0xfff0000
	ori	$6,$6,0xfc01
	addu	$8,$8,$6
	subu	$7,$8,$7
	sll	$7,$7,4
	j	$L194
	sw	$7,1852($3)

$L195:
	li	$6,268369920			# 0xfff0000
	ori	$6,$6,0xfc18
	addu	$6,$8,$6
	subu	$6,$6,$7
	li	$7,-24			# 0xffffffffffffffe8
	mult	$2,$7
	addiu	$5,$2,-1
	sll	$5,$5,6
	mflo	$7
	addu	$6,$6,$7
	sll	$6,$6,4
	addu	$5,$5,$6
	sw	$5,1852($3)
$L194:
	lbu	$5,40($18)
$L280:
	li	$3,2			# 0x2
$L281:
	bne	$5,$3,$L282
	lui	$3,%hi(g_sc_ctx)

	lw	$3,%lo(g_p4_magic_2)($4)
	nop
	beq	$3,$0,$L282
	lui	$3,%hi(g_sc_ctx)

	li	$4,1			# 0x1
	lw	$6,12($18)
	bne	$2,$4,$L197
	addiu	$3,$3,%lo(g_sc_ctx)

	li	$5,268369920			# 0xfff0000
	lw	$2,0($20)
	ori	$5,$5,0xfc01
	addu	$6,$6,$5
	subu	$6,$6,$2
	sll	$6,$6,4
	j	$L198
	sw	$6,1852($3)

$L197:
	li	$5,268369920			# 0xfff0000
	ori	$5,$5,0xfc18
	addu	$5,$6,$5
	li	$6,-24			# 0xffffffffffffffe8
	mult	$2,$6
	lw	$7,0($20)
	addiu	$4,$2,-1
	sll	$4,$4,6
	subu	$5,$5,$7
	mflo	$2
	addu	$5,$5,$2
	sll	$5,$5,4
	addu	$4,$4,$5
	sw	$4,1852($3)
$L198:
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	nop
	bne	$3,$0,$L282
	lui	$3,%hi(g_sc_ctx)

	lbu	$3,50($18)
	nop
	sltu	$3,$3,55
	bne	$3,$0,$L282
	lui	$3,%hi(g_sc_ctx)

	li	$3,1			# 0x1
	sw	$3,%lo(g_p4_to_ds_hrate)($2)
	lui	$3,%hi(g_sc_ctx)
$L282:
	addiu	$2,$3,%lo(g_sc_ctx)
	lw	$5,1852($2)
	nop
	sltu	$2,$5,257
	bne	$2,$0,$L199
	nop

$L268:
	jal	rtk_sc_restart_simple_config
	move	$4,$17

	j	$L159
	nop

$L199:
	beq	$5,$0,$L159
	li	$2,2			# 0x2

	lw	$3,%lo(g_sc_debug)($16)
	nop
	bne	$3,$2,$L200
	nop

	lui	$4,%hi($LC23)
	jal	printk
	addiu	$4,$4,%lo($LC23)

$L200:
	lw	$5,28($18)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lw	$5,28($18)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($18)
	nop
	lw	$4,196($2)
	jal	get_bssid
	lui	$19,%hi(g_sc_bssid)

	move	$5,$2
	addiu	$4,$fp,%lo(g_sc_ctx+24)
	li	$6,6			# 0x6
	jal	memcpy
	sw	$2,28($sp)

	lw	$3,28($sp)
	addiu	$4,$19,%lo(g_sc_bssid)
	li	$6,6			# 0x6
	jal	memcpy
	move	$5,$3

	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$19,%lo(g_sc_bssid)

	li	$2,1			# 0x1
	sw	$2,%lo(finish_sync)($22)
	lw	$2,%lo(g_sc_debug)($16)
	nop
	beq	$2,$0,$L201
	lui	$4,%hi($LC18)

	jal	printk
	addiu	$4,$4,%lo($LC18)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$fp,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC19)
	jal	printk
	addiu	$4,$4,%lo($LC19)

	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L201:
	lbu	$5,40($18)
	li	$4,19			# 0x13
	jal	rtk_sc_set_value
	li	$19,2			# 0x2

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_ctx+24)

	lui	$9,%hi(fix_sa)
	li	$2,1			# 0x1
	sw	$2,%lo(fix_sa)($9)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	li	$4,14			# 0xe
	lui	$2,%hi(sequence)
	move	$5,$0
	sw	$9,24($sp)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	lui	$3,%hi(g_sc_ctx+2424)
	lui	$4,%hi(g_sc_ctx)
	addiu	$3,$3,%lo(g_sc_ctx+2424)
	lw	$9,24($sp)
	addiu	$7,$4,%lo(g_sc_ctx)
	j	$L202
	lui	$8,%hi(pp)

$L204:
	lw	$4,0($3)
	nop
	beq	$4,$0,$L203
	sw	$4,%lo(pp)($8)

	lw	$2,4($4)
	nop
	andi	$2,$2,0x2
	beq	$2,$0,$L203
	move	$5,$7

	move	$6,$17
	sw	$3,28($sp)
	sw	$7,16($sp)
	sw	$8,20($sp)
	jal	rtk_sc_check_pattern
	sw	$9,24($sp)

	lw	$3,28($sp)
	lw	$7,16($sp)
	lw	$8,20($sp)
	lw	$9,24($sp)
	bne	$2,$0,$L283
	addiu	$19,$19,1

	li	$2,1			# 0x1
	sw	$2,%lo(finish_sync)($22)
	sw	$2,%lo(fix_sa)($9)
	lui	$6,%hi(g_pkt_type)
	li	$2,2			# 0x2
	j	$L159
	sw	$2,%lo(g_pkt_type)($6)

$L203:
	addiu	$19,$19,1
$L283:
	addiu	$3,$3,4
$L202:
	lw	$2,2672($7)
	nop
	slt	$2,$19,$2
	bne	$2,$0,$L204
	nop

$L186:
	addiu	$23,$23,1
	li	$2,5			# 0x5
	bne	$23,$2,$L205
	addiu	$20,$20,16

	addiu	$19,$19,1
	slt	$2,$19,8
	bne	$2,$0,$L206
	nop

	j	$L159
	nop

$L160:
	bne	$19,$3,$L159
	li	$3,1			# 0x1

	bne	$2,$3,$L159
	nop

	lw	$4,24($18)
	nop
	lbu	$19,0($4)
	nop
	bne	$19,$2,$L207
	nop

	lbu	$2,1($4)
	nop
	bne	$2,$0,$L207
	li	$2,94			# 0x5e

	lbu	$3,2($4)
	nop
	bne	$3,$2,$L207
	nop

	jal	CHECKSUM_OK
	li	$5,6			# 0x6

	beq	$2,$0,$L207
	lui	$4,%hi(g_sc_ctx+12)

	lw	$5,28($18)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L207
	lui	$2,%hi(g_pkt_type)

	lw	$2,%lo(g_pkt_type)($2)
	nop
	bne	$2,$19,$L207
	nop

	lw	$2,24($18)
	nop
	lbu	$5,3($2)
	nop
	slt	$2,$5,9
	bne	$2,$0,$L159
	li	$2,6			# 0x6

	addiu	$20,$5,-9
	mult	$20,$2
	lui	$19,%hi(g_sc_ctx)
	addiu	$3,$19,%lo(g_sc_ctx)
	mflo	$2
	addu	$2,$2,$3
	lbu	$2,314($2)
	nop
	bne	$2,$0,$L159
	lui	$2,%hi(g_sc_check_level)

	lw	$3,%lo(g_sc_check_level)($2)
	li	$2,2			# 0x2
	beq	$3,$2,$L208
	li	$4,6			# 0x6

$L284:
	mult	$20,$4
	addiu	$2,$19,%lo(g_sc_ctx)
	move	$3,$0
	mflo	$20
	j	$L209
	addu	$20,$2,$20

$L208:
	move	$4,$18
	jal	rtk_sc_valid_profile_packet
	sw	$5,16($sp)

	lw	$5,16($sp)
	bne	$2,$0,$L284
	li	$4,6			# 0x6

	j	$L159
	nop

$L209:
	lw	$6,24($18)
	nop
	addu	$6,$6,$3
	lbu	$7,0($6)
	addu	$6,$20,$3
	addiu	$3,$3,1
	bne	$3,$4,$L209
	sb	$7,314($6)

	lui	$3,%hi(profile_pkt_index)
	lw	$7,%lo(profile_pkt_index)($3)
	lw	$4,%lo(g_sc_debug)($16)
	move	$16,$3
	addiu	$7,$7,1
	sw	$7,%lo(profile_pkt_index)($3)
	li	$3,2			# 0x2
	bne	$4,$3,$L211
	nop

	lw	$6,1852($2)
	lui	$4,%hi($LC24)
	jal	printk
	addiu	$4,$4,%lo($LC24)

$L211:
	addiu	$19,$19,%lo(g_sc_ctx)
	lw	$3,1852($19)
	lw	$2,%lo(profile_pkt_index)($16)
	nop
	sltu	$2,$2,$3
	bne	$2,$0,$L159
	lui	$4,%hi(g_sc_ctx+368)

	addiu	$4,$4,%lo(g_sc_ctx+368)
	j	$L212
	li	$2,9			# 0x9

$L214:
	beq	$4,$0,$L213
	nop

	addiu	$2,$2,1
	addiu	$4,$4,6
$L212:
	sltu	$5,$2,$3
	bne	$5,$0,$L214
	nop

$L213:
	bne	$2,$3,$L159
	nop

	jal	rtk_sc_check_profile
	move	$4,$17

	j	$L159
	nop

$L207:
	lw	$2,24($18)
	li	$4,255			# 0xff
	lbu	$3,0($2)
	nop
	bne	$3,$4,$L159
	nop

	lbu	$4,1($2)
	nop
	bne	$4,$3,$L159
	nop

	lbu	$3,2($2)
	nop
	bne	$3,$4,$L159
	nop

	lbu	$4,3($2)
	nop
	bne	$4,$3,$L159
	nop

	lbu	$3,4($2)
	nop
	bne	$3,$4,$L159
	nop

	lbu	$2,5($2)
	nop
	bne	$2,$3,$L159
	lui	$4,%hi(g_sc_ctx+12)

	lw	$5,28($18)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L159
	nop

	jal	rtk_sc_is_channel_fixed
	move	$4,$17

	beq	$2,$0,$L159
	lui	$2,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L159
	lui	$2,%hi(g_p4_magic_len)

	lbu	$3,40($18)
	li	$4,1			# 0x1
	bne	$3,$4,$L215
	sw	$0,%lo(g_p4_magic_len)($2)

	lui	$4,%hi(g_p4_magic_1)
	lw	$3,%lo(g_p4_magic_1)($4)
	nop
	bne	$3,$0,$L264
	nop

$L216:
	lui	$3,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($3)
	nop
	beq	$3,$0,$L218
	lui	$3,%hi(g_sc_ctx+1852)

	lw	$3,%lo(g_sc_ctx+1852)($3)
	nop
	sltu	$3,$3,63
	beq	$3,$0,$L217
	nop

$L218:
	lui	$2,%hi(g_sc_magic)
	lw	$6,12($18)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$5,$2,32
$L220:
	lw	$3,0($2)
	nop
	addiu	$7,$3,3
	bne	$6,$7,$L219
	addiu	$2,$2,4

	j	$L159
	sw	$3,%lo(g_p4_magic_1)($4)

$L219:
	bne	$2,$5,$L220
	nop

	j	$L159
	nop

$L215:
	li	$4,2			# 0x2
	bne	$3,$4,$L159
	lui	$4,%hi(g_p4_magic_2)

	lw	$3,%lo(g_p4_magic_2)($4)
	nop
	beq	$3,$0,$L221
	nop

$L264:
	j	$L217
	sw	$3,%lo(g_p4_magic_len)($2)

$L221:
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	nop
	bne	$3,$0,$L222
	nop

	lbu	$3,50($18)
	nop
	sltu	$3,$3,55
	bne	$3,$0,$L222
	li	$3,1			# 0x1

	sw	$3,%lo(g_p4_to_ds_hrate)($2)
$L222:
	lui	$2,%hi(g_sc_magic)
	lw	$6,12($18)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$5,$2,32
$L224:
	lw	$3,0($2)
	nop
	addiu	$7,$3,3
	bne	$6,$7,$L223
	addiu	$2,$2,4

	j	$L159
	sw	$3,%lo(g_p4_magic_2)($4)

$L223:
	bne	$2,$5,$L224
	nop

	j	$L159
	nop

$L217:
	lw	$2,%lo(g_p4_magic_len)($2)
	nop
	beq	$2,$0,$L159
	nop

	lw	$3,12($18)
	nop
	subu	$2,$3,$2
	andi	$3,$2,0x3f0
	sra	$3,$3,4
	beq	$3,$0,$L225
	lui	$18,%hi(g_p4_group)

	slt	$4,$2,1025
	bne	$4,$0,$L226
	nop

$L225:
	li	$3,-1			# 0xffffffffffffffff
	sw	$3,%lo(g_p4_group)($18)
	li	$3,3			# 0x3
	beq	$2,$3,$L227
	nop

	lui	$3,%hi(g_sc_ctx+1852)
	lw	$3,%lo(g_sc_ctx+1852)($3)
	nop
	srl	$4,$3,4
	addiu	$4,$4,1023
	bne	$2,$4,$L228
	li	$4,2			# 0x2

$L227:
	j	$L159
	sw	$0,%lo(g_p4_group)($18)

$L228:
	beq	$2,$4,$L229
	addiu	$4,$3,-63

	srl	$4,$4,4
	addiu	$4,$4,1048
	bne	$2,$4,$L230
	li	$4,11			# 0xb

$L229:
	j	$L266
	li	$2,1			# 0x1

$L230:
	beq	$2,$4,$L231
	addiu	$4,$3,-126

	srl	$4,$4,4
	addiu	$4,$4,1072
	bne	$2,$4,$L232
	li	$4,10			# 0xa

$L231:
	j	$L266
	li	$2,2			# 0x2

$L232:
	beq	$2,$4,$L233
	addiu	$3,$3,-189

	srl	$3,$3,4
	addiu	$3,$3,1096
	bne	$2,$3,$L159
	nop

$L233:
	li	$2,3			# 0x3
$L266:
	j	$L159
	sw	$2,%lo(g_p4_group)($18)

$L226:
	lw	$4,%lo(g_p4_group)($18)
	nop
	bltz	$4,$L159
	li	$5,63			# 0x3f

	mult	$4,$5
	addiu	$3,$3,-1
	lui	$19,%hi(g_p4_last_seq)
	mflo	$5
	addu	$5,$3,$5
	lw	$3,%lo(g_p4_last_seq)($19)
	addiu	$4,$5,15
	slt	$3,$4,$3
	beq	$3,$0,$L234
	lui	$20,%hi(g_sc_ctx)

	slt	$3,$5,64
	bne	$3,$0,$L285
	addiu	$3,$20,%lo(g_sc_ctx)

	lw	$3,1852($3)
	nop
	sltu	$3,$3,127
	bne	$3,$0,$L285
	addiu	$3,$20,%lo(g_sc_ctx)

	lw	$3,%lo(g_sc_debug)($16)
	li	$2,2			# 0x2
	bne	$3,$2,$L265
	nop

	lui	$4,%hi($LC25)
	jal	printk
	addiu	$4,$4,%lo($LC25)

	j	$L271
	li	$2,-1			# 0xffffffffffffffff

$L234:
	addiu	$3,$20,%lo(g_sc_ctx)
$L285:
	lw	$6,1852($3)
	nop
	sltu	$4,$6,$5
	beq	$4,$0,$L236
	addu	$3,$5,$3

	lw	$3,%lo(g_sc_debug)($16)
	li	$2,2			# 0x2
	bne	$3,$2,$L237
	lui	$4,%hi($LC26)

	jal	printk
	addiu	$4,$4,%lo($LC26)

$L237:
	lui	$2,%hi(g_sc_ctx+2874)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	move	$3,$0
	li	$4,256			# 0x100
$L238:
	addiu	$3,$3,1
	sb	$0,0($2)
	sb	$0,256($2)
	bne	$3,$4,$L238
	addiu	$2,$2,1

	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
$L265:
	li	$2,-1			# 0xffffffffffffffff
$L271:
	sw	$2,%lo(g_p4_group)($18)
	j	$L159
	sw	$0,%lo(g_p4_last_seq)($19)

$L236:
	lbu	$4,3130($3)
	sw	$5,%lo(g_p4_last_seq)($19)
	bne	$4,$0,$L239
	lui	$19,%hi(profile_pkt_index)

	andi	$2,$2,0xf
	sb	$2,2874($3)
	lw	$7,%lo(profile_pkt_index)($19)
	li	$2,1			# 0x1
	sb	$2,3130($3)
	lw	$3,%lo(g_sc_debug)($16)
	addiu	$7,$7,1
	li	$2,2			# 0x2
	bne	$3,$2,$L239
	sw	$7,%lo(profile_pkt_index)($19)

	lui	$4,%hi($LC27)
	jal	printk
	addiu	$4,$4,%lo($LC27)

$L239:
	addiu	$2,$20,%lo(g_sc_ctx)
	lw	$3,1852($2)
	lw	$4,%lo(profile_pkt_index)($19)
	nop
	sltu	$4,$4,$3
	beq	$4,$0,$L241
	move	$21,$0

	j	$L240
	nop

$L245:
	lbu	$4,3130($4)
	nop
	bne	$4,$0,$L241
	addiu	$21,$21,1

	addiu	$21,$21,-1
	lw	$3,%lo(g_sc_debug)($16)
	li	$2,2			# 0x2
	bne	$3,$2,$L243
	lui	$4,%hi($LC28)

	addiu	$4,$4,%lo($LC28)
	jal	printk
	move	$5,$21

$L243:
	j	$L244
	sw	$0,%lo(profile_pkt_index)($19)

$L241:
	bne	$21,$3,$L245
	addu	$4,$2,$21

$L244:
	addiu	$20,$20,%lo(g_sc_ctx)
	lw	$2,1852($20)
	nop
	bne	$21,$2,$L240
	lui	$3,%hi(pp)

	lw	$2,2424($20)
	nop
	beq	$2,$0,$L246
	sw	$2,%lo(pp)($3)

	lw	$2,4($2)
	nop
	andi	$2,$2,0x2
	beq	$2,$0,$L286
	li	$2,-1			# 0xffffffffffffffff

	jal	rtk_sc_check_profile
	move	$4,$17

	li	$3,-1			# 0xffffffffffffffff
	bne	$2,$3,$L247
	nop

$L246:
	li	$2,-1			# 0xffffffffffffffff
$L286:
	sw	$2,%lo(g_p4_group)($18)
	lui	$2,%hi(g_sc_ctx+2874)
	sw	$0,%lo(profile_pkt_index)($19)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	move	$3,$0
	li	$4,256			# 0x100
$L248:
	addiu	$3,$3,1
	sb	$0,0($2)
	sb	$0,256($2)
	bne	$3,$4,$L248
	addiu	$2,$2,1

	j	$L159
	nop

$L247:
	sw	$0,%lo(profile_pkt_index)($19)
$L240:
	lw	$3,%lo(g_p4_group)($18)
	lui	$2,%hi(g_p4_last_group)
	sw	$3,%lo(g_p4_last_group)($2)
$L159:
	lw	$31,68($sp)
	lw	$fp,64($sp)
	lw	$23,60($sp)
	lw	$22,56($sp)
	lw	$21,52($sp)
	lw	$20,48($sp)
	lw	$19,44($sp)
	lw	$18,40($sp)
	lw	$17,36($sp)
	lw	$16,32($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,72

	.set	macro
	.set	reorder
	.end	rtk_sc_start_parse_packet
	.size	rtk_sc_start_parse_packet, .-rtk_sc_start_parse_packet
	.globl	udp_bcast_pin
	.section	.data.udp_bcast_pin,"aw",@progbits
	.align	2
	.type	udp_bcast_pin, @object
	.size	udp_bcast_pin, 64
udp_bcast_pin:
	.word	5
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast
	.section	.data.udp_bcast,"aw",@progbits
	.align	2
	.type	udp_bcast, @object
	.size	udp_bcast, 64
udp_bcast:
	.word	4
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast_pin
	.section	.data.udp_mcast_pin,"aw",@progbits
	.align	2
	.type	udp_mcast_pin, @object
	.size	udp_mcast_pin, 64
udp_mcast_pin:
	.word	3
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast
	.section	.data.udp_mcast,"aw",@progbits
	.align	2
	.type	udp_mcast, @object
	.size	udp_mcast, 64
udp_mcast:
	.word	2
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	default_key_iv
	.section	.data.default_key_iv,"aw",@progbits
	.align	2
	.type	default_key_iv, @object
	.size	default_key_iv, 8
default_key_iv:
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.globl	ack_pkt
	.section	.bss.ack_pkt,"aw",@nobits
	.align	2
	.type	ack_pkt, @object
	.size	ack_pkt, 108
ack_pkt:
	.space	108
	.globl	pp
	.section	.bss.pp,"aw",@nobits
	.align	2
	.type	pp, @object
	.size	pp, 4
pp:
	.space	4
	.globl	g_sc_config_type
	.section	.bss.g_sc_config_type,"aw",@nobits
	.align	2
	.type	g_sc_config_type, @object
	.size	g_sc_config_type, 4
g_sc_config_type:
	.space	4
	.globl	g_pkt_type
	.section	.bss.g_pkt_type,"aw",@nobits
	.align	2
	.type	g_pkt_type, @object
	.size	g_pkt_type, 4
g_pkt_type:
	.space	4
	.globl	g_p4_to_ds_hrate
	.section	.bss.g_p4_to_ds_hrate,"aw",@nobits
	.align	2
	.type	g_p4_to_ds_hrate, @object
	.size	g_p4_to_ds_hrate, 4
g_p4_to_ds_hrate:
	.space	4
	.globl	g_p4_option_idx
	.section	.bss.g_p4_option_idx,"aw",@nobits
	.align	2
	.type	g_p4_option_idx, @object
	.size	g_p4_option_idx, 4
g_p4_option_idx:
	.space	4
	.globl	g_p4_last_seq
	.section	.bss.g_p4_last_seq,"aw",@nobits
	.align	2
	.type	g_p4_last_seq, @object
	.size	g_p4_last_seq, 4
g_p4_last_seq:
	.space	4
	.globl	g_p4_last_group
	.section	.bss.g_p4_last_group,"aw",@nobits
	.align	2
	.type	g_p4_last_group, @object
	.size	g_p4_last_group, 4
g_p4_last_group:
	.space	4
	.globl	g_p4_group
	.section	.bss.g_p4_group,"aw",@nobits
	.align	2
	.type	g_p4_group, @object
	.size	g_p4_group, 4
g_p4_group:
	.space	4
	.globl	g_p4_magic_len
	.section	.bss.g_p4_magic_len,"aw",@nobits
	.align	2
	.type	g_p4_magic_len, @object
	.size	g_p4_magic_len, 4
g_p4_magic_len:
	.space	4
	.globl	g_p4_have_pin
	.section	.bss.g_p4_have_pin,"aw",@nobits
	.align	2
	.type	g_p4_have_pin, @object
	.size	g_p4_have_pin, 4
g_p4_have_pin:
	.space	4
	.globl	g_p4_magic_2
	.section	.bss.g_p4_magic_2,"aw",@nobits
	.align	2
	.type	g_p4_magic_2, @object
	.size	g_p4_magic_2, 4
g_p4_magic_2:
	.space	4
	.globl	g_p4_magic_1
	.section	.bss.g_p4_magic_1,"aw",@nobits
	.align	2
	.type	g_p4_magic_1, @object
	.size	g_p4_magic_1, 4
g_p4_magic_1:
	.space	4
	.globl	g_p4_option_num
	.section	.bss.g_p4_option_num,"aw",@nobits
	.align	2
	.type	g_p4_option_num, @object
	.size	g_p4_option_num, 4
g_p4_option_num:
	.space	4
	.globl	g_option_sa
	.section	.bss.g_option_sa,"aw",@nobits
	.align	2
	.type	g_option_sa, @object
	.size	g_option_sa, 80
g_option_sa:
	.space	80
	.globl	g_sc_magic
	.section	.bss.g_sc_magic,"aw",@nobits
	.align	2
	.type	g_sc_magic, @object
	.size	g_sc_magic, 32
g_sc_magic:
	.space	32
	.globl	g_sc_ignore_overlap
	.section	.bss.g_sc_ignore_overlap,"aw",@nobits
	.align	2
	.type	g_sc_ignore_overlap, @object
	.size	g_sc_ignore_overlap, 4
g_sc_ignore_overlap:
	.space	4
	.globl	g_sc_check_level
	.section	.bss.g_sc_check_level,"aw",@nobits
	.align	2
	.type	g_sc_check_level, @object
	.size	g_sc_check_level, 4
g_sc_check_level:
	.space	4
	.globl	g_sc_debug
	.section	.bss.g_sc_debug,"aw",@nobits
	.align	2
	.type	g_sc_debug, @object
	.size	g_sc_debug, 4
g_sc_debug:
	.space	4
	.globl	g_sc_ifname
	.section	.bss.g_sc_ifname,"aw",@nobits
	.align	2
	.type	g_sc_ifname, @object
	.size	g_sc_ifname, 32
g_sc_ifname:
	.space	32
	.globl	null_mac
	.section	.bss.null_mac,"aw",@nobits
	.align	2
	.type	null_mac, @object
	.size	null_mac, 6
null_mac:
	.space	6
	.globl	g_ios_mac
	.section	.data.g_ios_mac,"aw",@progbits
	.align	2
	.type	g_ios_mac, @object
	.size	g_ios_mac, 6
g_ios_mac:
	.byte	2
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	g_dmac
	.section	.bss.g_dmac,"aw",@nobits
	.align	2
	.type	g_dmac, @object
	.size	g_dmac, 6
g_dmac:
	.space	6
	.globl	g_smac
	.section	.bss.g_smac,"aw",@nobits
	.align	2
	.type	g_smac, @object
	.size	g_smac, 6
g_smac:
	.space	6
	.globl	g_sc_bssid
	.section	.bss.g_sc_bssid,"aw",@nobits
	.align	2
	.type	g_sc_bssid, @object
	.size	g_sc_bssid, 6
g_sc_bssid:
	.space	6
	.globl	g_sc_is_vxd
	.section	.bss.g_sc_is_vxd,"aw",@nobits
	.align	2
	.type	g_sc_is_vxd, @object
	.size	g_sc_is_vxd, 4
g_sc_is_vxd:
	.space	4
	.globl	g_sc_send_ack_round
	.section	.bss.g_sc_send_ack_round,"aw",@nobits
	.align	2
	.type	g_sc_send_ack_round, @object
	.size	g_sc_send_ack_round, 4
g_sc_send_ack_round:
	.space	4
	.globl	sequence
	.section	.bss.sequence,"aw",@nobits
	.align	2
	.type	sequence, @object
	.size	sequence, 4
sequence:
	.space	4
	.globl	use_ios7_mac
	.section	.bss.use_ios7_mac,"aw",@nobits
	.align	2
	.type	use_ios7_mac, @object
	.size	use_ios7_mac, 4
use_ios7_mac:
	.space	4
	.globl	g_sc_pin_len
	.section	.bss.g_sc_pin_len,"aw",@nobits
	.align	2
	.type	g_sc_pin_len, @object
	.size	g_sc_pin_len, 4
g_sc_pin_len:
	.space	4
	.globl	finish_sync
	.section	.bss.finish_sync,"aw",@nobits
	.align	2
	.type	finish_sync, @object
	.size	finish_sync, 4
finish_sync:
	.space	4
	.globl	fix_sa
	.section	.bss.fix_sa,"aw",@nobits
	.align	2
	.type	fix_sa, @object
	.size	fix_sa, 4
fix_sa:
	.space	4
	.globl	profile_pkt_index
	.section	.bss.profile_pkt_index,"aw",@nobits
	.align	2
	.type	profile_pkt_index, @object
	.size	profile_pkt_index, 4
profile_pkt_index:
	.space	4
	.globl	sync_pkt_index
	.section	.bss.sync_pkt_index,"aw",@nobits
	.align	2
	.type	sync_pkt_index, @object
	.size	sync_pkt_index, 4
sync_pkt_index:
	.space	4
	.section	.bss.g_sc_ctx,"aw",@nobits
	.align	2
	.type	g_sc_ctx, @object
	.size	g_sc_ctx, 3388
g_sc_ctx:
	.space	3388
	.section	.data.mcast_udp_buffer,"aw",@progbits
	.align	2
	.type	mcast_udp_buffer, @object
	.size	mcast_udp_buffer, 65
mcast_udp_buffer:
	.ascii	"8CmT/ J(3_aE R_UFR}`mtwF=)Qfjtn^S_1/ffg<_C7yw's}?'_'n&2~"
	.ascii	"Blm&_k?6\000"
	.section	.bss.radom_value,"aw",@nobits
	.align	2
	.type	radom_value, @object
	.size	radom_value, 4
radom_value:
	.space	4
	.ident	"GCC: (Realtek RSDK-4.6.4 Build 2080) 4.6.4"
