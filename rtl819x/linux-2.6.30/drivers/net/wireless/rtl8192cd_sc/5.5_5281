	.file	1 "8192cd_profile.c"
	.section .mdebug.abi32
	.previous
	.gnu_attribute 4, 3
#APP
	.macro _ssnop; sll $0, $0, 1; .endm
	.macro _ehb; sll $0, $0, 3; .endm
	.macro mtc0_tlbw_hazard; nop; nop; .endm
	.macro tlbw_use_hazard; nop; nop; nop; .endm
	.macro tlb_probe_hazard; nop; nop; nop; .endm
	.macro irq_enable_hazard; _ssnop; _ssnop; _ssnop;; .endm
	.macro irq_disable_hazard; nop; nop; nop; .endm
	.macro back_to_back_c0_hazard; _ssnop; _ssnop; _ssnop;; .endm
		.macro	raw_local_irq_enable				
	.set	push						
	.set	reorder						
	.set	noat						
	mfc0	$1,$12						
	ori	$1,0x1f						
	xori	$1,0x1e						
	mtc0	$1,$12						
	irq_enable_hazard					
	.set	pop						
	.endm
		.macro	raw_local_irq_disable
	.set	push						
	.set	noat						
	mfc0	$1,$12						
	ori	$1,0x1f						
	xori	$1,0x1f						
	.set	noreorder					
	mtc0	$1,$12						
	irq_disable_hazard					
	.set	pop						
	.endm							

		.macro	raw_local_save_flags flags			
	.set	push						
	.set	reorder						
	mfc0	\flags, $12					
	.set	pop						
	.endm							

		.macro	raw_local_irq_save result			
	.set	push						
	.set	reorder						
	.set	noat						
	mfc0	\result, $12					
	ori	$1, \result, 0x1f				
	xori	$1, 0x1f					
	.set	noreorder					
	mtc0	$1, $12						
	irq_disable_hazard					
	.set	pop						
	.endm							

		.macro	raw_local_irq_restore flags			
	.set	push						
	.set	noreorder					
	.set	noat						
	mfc0	$1, $12						
	andi	\flags, 1					
	ori	$1, 0x1f					
	xori	$1, 0x1f					
	or	\flags, $1					
	mtc0	\flags, $12					
	irq_disable_hazard					
	.set	pop						
	.endm							

#NO_APP
	.section	.text.bytecopy,"ax",@progbits
	.align	2
	.globl	bytecopy
	.set	nomips16
	.ent	bytecopy
	.type	bytecopy, @function
bytecopy:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$L2
	move	$2,$0

$L3:
	lbu	$3,0($8)
	addiu	$2,$2,1
	sb	$3,0($7)
$L2:
	sltu	$3,$2,$6
	addu	$8,$4,$2
	bne	$3,$0,$L3
	addu	$7,$5,$2

	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	bytecopy
	.size	bytecopy, .-bytecopy
	.section	.text.get_bssid,"ax",@progbits
	.align	2
	.globl	get_bssid
	.set	nomips16
	.ent	get_bssid
	.type	get_bssid, @function
get_bssid:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lhu	$5,0($4)
	andi	$6,$5,0x1
	srl	$3,$5,1
	li	$5,1			# 0x1
	andi	$3,$3,0x1
	sll	$6,$6,1
	or	$3,$3,$6
	beq	$3,$5,$L13
	addiu	$2,$4,10

	beq	$3,$0,$L13
	addiu	$2,$4,16

	addiu	$5,$4,4
	xori	$3,$3,0x2
	addiu	$2,$4,10
	movz	$2,$5,$3
$L13:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	get_bssid
	.size	get_bssid, .-get_bssid
	.section	.text.rtk_sc_register_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_register_pattern
	.set	nomips16
	.ent	rtk_sc_register_pattern
	.type	rtk_sc_register_pattern, @function
rtk_sc_register_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$3,%hi(g_sc_ctx)
	addiu	$3,$3,%lo(g_sc_ctx)
	lw	$2,2672($3)
	addiu	$2,$2,604
	sll	$2,$2,2
	addu	$2,$2,$3
	lw	$3,0($2)
	bne	$3,$0,$L17
	lui	$3,%hi(g_sc_ctx)

	sw	$4,0($2)
$L17:
	move	$2,$0
	addiu	$3,$3,%lo(g_sc_ctx)
	lw	$4,2672($3)
	addiu	$4,$4,1
	j	$31
	sw	$4,2672($3)

	.set	macro
	.set	reorder
	.end	rtk_sc_register_pattern
	.size	rtk_sc_register_pattern, .-rtk_sc_register_pattern
	.section	.text.CHECKSUM_OK,"ax",@progbits
	.align	2
	.globl	CHECKSUM_OK
	.set	nomips16
	.ent	CHECKSUM_OK
	.type	CHECKSUM_OK, @function
CHECKSUM_OK:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$2,$0
	j	$L19
	move	$3,$0

$L20:
	lbu	$6,0($7)
	addu	$2,$2,$6
	andi	$2,$2,0x00ff
$L19:
	slt	$6,$3,$5
	addu	$7,$4,$3
	bne	$6,$0,$L20
	addiu	$3,$3,1

	j	$31
	sltu	$2,$2,1

	.set	macro
	.set	reorder
	.end	CHECKSUM_OK
	.size	CHECKSUM_OK, .-CHECKSUM_OK
	.section	.text.checksum,"ax",@progbits
	.align	2
	.globl	checksum
	.set	nomips16
	.ent	checksum
	.type	checksum, @function
checksum:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$L23
	move	$2,$0

$L24:
	lhu	$3,0($4)
	addiu	$5,$5,-2
	addiu	$4,$4,2
	addu	$2,$2,$3
$L23:
	slt	$3,$5,2
	beq	$3,$0,$L24
	nop

	beq	$5,$0,$L27
	andi	$3,$2,0xffff

	lbu	$3,0($4)
	addu	$2,$3,$2
	andi	$3,$2,0xffff
$L27:
	srl	$2,$2,16
	addu	$2,$3,$2
	srl	$3,$2,16
	addu	$2,$3,$2
	nor	$2,$0,$2
	j	$31
	andi	$2,$2,0xffff

	.set	macro
	.set	reorder
	.end	checksum
	.size	checksum, .-checksum
	.section	.text.rtk_sc_set_ack_pkt,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_pkt
	.set	nomips16
	.ent	rtk_sc_set_ack_pkt
	.type	rtk_sc_set_ack_pkt, @function
rtk_sc_set_ack_pkt:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_pkt
	.size	rtk_sc_set_ack_pkt, .-rtk_sc_set_ack_pkt
	.section	.text.send_simple_config_ack,"ax",@progbits
	.align	2
	.globl	send_simple_config_ack
	.set	nomips16
	.ent	send_simple_config_ack
	.type	send_simple_config_ack, @function
send_simple_config_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	send_simple_config_ack
	.size	send_simple_config_ack, .-send_simple_config_ack
	.section	.text.rtk_sc_check_pattern,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_pattern
	.set	nomips16
	.ent	rtk_sc_check_pattern
	.type	rtk_sc_check_pattern, @function
rtk_sc_check_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,40($4)
	bne	$25,$0,$L33
	move	$2,$0

	j	$31
	nop

$L33:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_check_pattern
	.size	rtk_sc_check_pattern, .-rtk_sc_check_pattern
	.section	.text.rtk_sc_generate_key,"ax",@progbits
	.align	2
	.globl	rtk_sc_generate_key
	.set	nomips16
	.ent	rtk_sc_generate_key
	.type	rtk_sc_generate_key, @function
rtk_sc_generate_key:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,48($4)
	bne	$25,$0,$L39
	move	$2,$0

	j	$31
	nop

$L39:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_generate_key
	.size	rtk_sc_generate_key, .-rtk_sc_generate_key
	.section	.text.rtk_sc_get_cipher_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_cipher_info
	.set	nomips16
	.ent	rtk_sc_get_cipher_info
	.type	rtk_sc_get_cipher_info, @function
rtk_sc_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,44($4)
	bne	$25,$0,$L45
	move	$2,$0

	j	$31
	nop

$L45:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_get_cipher_info
	.size	rtk_sc_get_cipher_info, .-rtk_sc_get_cipher_info
	.section	.text.rtk_sc_decode_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_decode_profile
	.set	nomips16
	.ent	rtk_sc_decode_profile
	.type	rtk_sc_decode_profile, @function
rtk_sc_decode_profile:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,52($4)
	bne	$25,$0,$L51
	move	$2,$0

	j	$31
	nop

$L51:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_decode_profile
	.size	rtk_sc_decode_profile, .-rtk_sc_decode_profile
	.section	.text.rtk_sc_get_tlv_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_get_tlv_info
	.set	nomips16
	.ent	rtk_sc_get_tlv_info
	.type	rtk_sc_get_tlv_info, @function
rtk_sc_get_tlv_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,56($4)
	bne	$25,$0,$L57
	move	$2,$0

	j	$31
	nop

$L57:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_get_tlv_info
	.size	rtk_sc_get_tlv_info, .-rtk_sc_get_tlv_info
	.section	.text.rtk_sc_set_ack_info,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_ack_info
	.set	nomips16
	.ent	rtk_sc_set_ack_info
	.type	rtk_sc_set_ack_info, @function
rtk_sc_set_ack_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,60($4)
	bne	$25,$0,$L63
	move	$2,$0

	j	$31
	nop

$L63:
	jr	$25
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_info
	.size	rtk_sc_set_ack_info, .-rtk_sc_set_ack_info
	.section	.text.mcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_cipher_info
	.set	nomips16
	.ent	mcast_udp_get_cipher_info
	.type	mcast_udp_get_cipher_info, @function
mcast_udp_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$2,$0
	lw	$4,1852($5)
	j	$L69
	move	$3,$5

$L70:
	lbu	$7,313($3)
	addiu	$2,$2,1
	sb	$7,2152($6)
$L69:
	addu	$6,$5,$2
	bne	$2,$4,$L70
	addiu	$3,$3,6

	sw	$2,2408($5)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_get_cipher_info
	.size	mcast_udp_get_cipher_info, .-mcast_udp_get_cipher_info
	.section	.text.bcast_udp_get_cipher_info,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_cipher_info
	.set	nomips16
	.ent	bcast_udp_get_cipher_info
	.type	bcast_udp_get_cipher_info, @function
bcast_udp_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$3,1852($5)
	j	$L73
	move	$2,$0

$L74:
	sb	$0,2152($4)
	addiu	$2,$2,1
$L73:
	bne	$2,$3,$L74
	addu	$4,$5,$2

	lw	$4,1852($5)
	move	$3,$5
	move	$2,$0
	li	$6,2			# 0x2
	j	$L75
	li	$7,1			# 0x1

$L78:
	div	$0,$2,$6
	mflo	$9
	mfhi	$8
	bne	$8,$7,$L76
	addu	$9,$5,$9

	lbu	$8,2874($3)
	lbu	$10,2152($9)
	j	$L80
	andi	$8,$8,0xf

$L76:
	lbu	$8,2874($3)
	lbu	$10,2152($9)
	sll	$8,$8,4
$L80:
	or	$8,$10,$8
	addiu	$2,$2,1
	addiu	$3,$3,1
	sb	$8,2152($9)
$L75:
	sltu	$8,$2,$4
	bne	$8,$0,$L78
	nop

	srl	$4,$4,1
	move	$2,$0
	j	$31
	sw	$4,2408($5)

	.set	macro
	.set	reorder
	.end	bcast_udp_get_cipher_info
	.size	bcast_udp_get_cipher_info, .-bcast_udp_get_cipher_info
	.section	.text.mcast_udp_send_ack,"ax",@progbits
	.align	2
	.globl	mcast_udp_send_ack
	.set	nomips16
	.ent	mcast_udp_send_ack
	.type	mcast_udp_send_ack, @function
mcast_udp_send_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_send_ack
	.size	mcast_udp_send_ack, .-mcast_udp_send_ack
	.section	.rodata.str1.4,"aMS",@progbits,1
	.align	2
$LC0:
	.ascii	"this packet is not profile packet\012\000"
	.section	.text.rtk_sc_valid_profile_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_valid_profile_packet
	.set	nomips16
	.ent	rtk_sc_valid_profile_packet
	.type	rtk_sc_valid_profile_packet, @function
rtk_sc_valid_profile_packet:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	lui	$2,%hi(g_sc_magic)
	lw	$5,24($4)
	move	$3,$0
	lw	$7,12($4)
	addiu	$2,$2,%lo(g_sc_magic)
	lbu	$4,3($5)
	li	$6,8			# 0x8
$L86:
	lw	$5,0($2)
	addiu	$3,$3,1
	addu	$5,$4,$5
	bne	$7,$5,$L84
	addiu	$2,$2,4

	j	$L85
	li	$2,1			# 0x1

$L84:
	bne	$3,$6,$L86
	nop

	lui	$2,%hi(g_sc_debug)
	li	$3,2			# 0x2
	lw	$4,%lo(g_sc_debug)($2)
	bne	$4,$3,$L85
	move	$2,$0

	lui	$4,%hi($LC0)
	jal	panic_printk
	addiu	$4,$4,%lo($LC0)

	move	$2,$0
$L85:
	lw	$31,20($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_valid_profile_packet
	.size	rtk_sc_valid_profile_packet, .-rtk_sc_valid_profile_packet
	.section	.rodata.str1.4
	.align	2
$LC1:
	.ascii	"    \000"
	.align	2
$LC2:
	.ascii	"%02x\000"
	.align	2
$LC3:
	.ascii	"\012\000"
	.section	.text.bytedump,"ax",@progbits
	.align	2
	.globl	bytedump
	.set	nomips16
	.ent	bytedump
	.type	bytedump, @function
bytedump:
	.frame	$sp,48,$31		# vars= 0, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-48
	sw	$31,44($sp)
	sw	$21,40($sp)
	sw	$20,36($sp)
	sw	$19,32($sp)
	sw	$18,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$19,%hi($LC1)
	move	$21,$4
	lui	$18,%hi($LC2)
	move	$20,$5
	addiu	$19,$19,%lo($LC1)
	addiu	$18,$18,%lo($LC2)
	move	$16,$0
	j	$L91
	li	$17,6			# 0x6

$L93:
	div	$0,$16,$17
	mfhi	$2
	bne	$2,$0,$L95
	addu	$2,$21,$16

	beq	$16,$0,$L96
	move	$4,$18

	jal	panic_printk
	move	$4,$19

	addu	$2,$21,$16
$L95:
	move	$4,$18
$L96:
	lbu	$5,0($2)
	jal	panic_printk
	addiu	$16,$16,1

$L91:
	sltu	$2,$16,$20
	bne	$2,$0,$L93
	lui	$4,%hi($LC3)

	jal	panic_printk
	addiu	$4,$4,%lo($LC3)

	move	$2,$0
	lw	$31,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	j	$31
	addiu	$sp,$sp,48

	.set	macro
	.set	reorder
	.end	bytedump
	.size	bytedump, .-bytedump
	.section	.text.rtk_sc_set_para,"ax",@progbits
	.align	2
	.globl	rtk_sc_set_para
	.set	nomips16
	.ent	rtk_sc_set_para
	.type	rtk_sc_set_para, @function
rtk_sc_set_para:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	jal	rtk_sc_get_value
	li	$4,8			# 0x8

	lui	$3,%hi(g_sc_debug)
	li	$4,16			# 0x10
	lui	$16,%hi(g_sc_check_level)
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_debug)($3)

	li	$4,17			# 0x11
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_check_level)($16)

	lui	$3,%hi(g_sc_ignore_overlap)
	li	$4,29			# 0x1d
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_ignore_overlap)($3)

	lui	$4,%hi(g_sc_config_type)
	lw	$3,%lo(g_sc_check_level)($16)
	beq	$3,$0,$L98
	sw	$2,%lo(g_sc_config_type)($4)

	lui	$4,%hi(g_sc_magic)
	li	$5,8			# 0x8
	jal	rtk_sc_get_magic
	addiu	$4,$4,%lo(g_sc_magic)

$L98:
	lw	$31,20($sp)
	move	$2,$0
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_set_para
	.size	rtk_sc_set_para, .-rtk_sc_set_para
	.section	.rodata.str1.4
	.align	2
$LC4:
	.ascii	"Register Realtek Simple Config\012\000"
	.section	.text.rtk_sc_init,"ax",@progbits
	.align	2
	.globl	rtk_sc_init
	.set	nomips16
	.ent	rtk_sc_init
	.type	rtk_sc_init, @function
rtk_sc_init:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$16,%hi(g_sc_ctx)
	addiu	$4,$16,%lo(g_sc_ctx)
	move	$5,$0
	addiu	$16,$16,%lo(g_sc_ctx)
	jal	memset
	li	$6,3388			# 0xd3c

	li	$3,256			# 0x100
	lw	$2,2672($16)
	sw	$3,2112($16)
	addiu	$2,$2,604
	sll	$2,$2,2
	addu	$16,$2,$16
	lw	$2,0($16)
	bne	$2,$0,$L105
	lui	$2,%hi(g_sc_ctx)

	lui	$2,%hi(udp_mcast)
	addiu	$2,$2,%lo(udp_mcast)
	sw	$2,0($16)
	lui	$2,%hi(g_sc_ctx)
$L105:
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$3,2672($2)
	addiu	$4,$3,605
	addiu	$3,$3,1
	sll	$4,$4,2
	sw	$3,2672($2)
	addu	$2,$4,$2
	lw	$3,0($2)
	bne	$3,$0,$L102
	lui	$3,%hi(udp_mcast_pin)

	addiu	$3,$3,%lo(udp_mcast_pin)
	sw	$3,0($2)
$L102:
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$3,2672($2)
	addiu	$4,$3,605
	addiu	$3,$3,1
	sll	$4,$4,2
	sw	$3,2672($2)
	addu	$2,$4,$2
	lw	$3,0($2)
	bne	$3,$0,$L103
	lui	$3,%hi(udp_bcast_pin)

	addiu	$3,$3,%lo(udp_bcast_pin)
	sw	$3,0($2)
$L103:
	lui	$2,%hi(g_sc_ctx)
	lui	$4,%hi($LC4)
	addiu	$2,$2,%lo(g_sc_ctx)
	addiu	$4,$4,%lo($LC4)
	lw	$3,2672($2)
	addiu	$3,$3,1
	jal	panic_printk
	sw	$3,2672($2)

	move	$2,$0
	lw	$31,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_init
	.size	rtk_sc_init, .-rtk_sc_init
	.section	.text.rtk_sc_clean_profile_value,"ax",@progbits
	.align	2
	.globl	rtk_sc_clean_profile_value
	.set	nomips16
	.ent	rtk_sc_clean_profile_value
	.type	rtk_sc_clean_profile_value, @function
rtk_sc_clean_profile_value:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	li	$7,-1			# 0xffffffff
	lui	$3,%hi(g_p4_group)
	lui	$2,%hi(g_sc_ctx)
	sw	$7,%lo(g_p4_group)($3)
	lui	$3,%hi(fix_sa)
	sw	$0,%lo(fix_sa)($3)
	lui	$3,%hi(finish_sync)
	sw	$0,%lo(finish_sync)($3)
	lui	$3,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($3)
	lui	$3,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($3)
	lui	$3,%hi(g_pkt_type)
	addiu	$2,$2,%lo(g_sc_ctx)
	lui	$4,%hi(g_sc_ctx+12)
	sw	$0,%lo(g_pkt_type)($3)
	lui	$3,%hi(g_p4_last_seq)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	move	$5,$0
	li	$6,6			# 0x6
	sw	$0,%lo(g_p4_last_seq)($3)
	lui	$3,%hi(g_p4_to_ds_hrate)
	sw	$0,2412($2)
	sw	$0,8($2)
	sw	$0,2112($2)
	sw	$0,2148($2)
	sw	$0,2408($2)
	jal	memset
	sw	$0,%lo(g_p4_to_ds_hrate)($3)

	lui	$4,%hi(g_sc_ctx+18)
	addiu	$4,$4,%lo(g_sc_ctx+18)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+24)
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+30)
	addiu	$4,$4,%lo(g_sc_ctx+30)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+94)
	addiu	$4,$4,%lo(g_sc_ctx+94)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+2741)
	addiu	$4,$4,%lo(g_sc_ctx+2741)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2676)
	addiu	$4,$4,%lo(g_sc_ctx+2676)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2810)
	addiu	$4,$4,%lo(g_sc_ctx+2810)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+260)
	addiu	$4,$4,%lo(g_sc_ctx+260)
	move	$5,$0
	jal	memset
	li	$6,54			# 0x36

	lui	$4,%hi(g_sc_ctx+314)
	addiu	$4,$4,%lo(g_sc_ctx+314)
	move	$5,$0
	jal	memset
	li	$6,1536			# 0x600

	lui	$4,%hi(g_sc_ctx+2874)
	addiu	$4,$4,%lo(g_sc_ctx+2874)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_sc_ctx+3130)
	addiu	$4,$4,%lo(g_sc_ctx+3130)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_option_sa)
	addiu	$4,$4,%lo(g_option_sa)
	move	$5,$0
	jal	memset
	li	$6,80			# 0x50

	move	$2,$0
	lw	$31,20($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_clean_profile_value
	.size	rtk_sc_clean_profile_value, .-rtk_sc_clean_profile_value
	.section	.rodata.str1.4
	.align	2
$LC5:
	.ascii	"try to clean profile!\012\000"
	.align	2
$LC6:
	.ascii	"df*r43^fdjakfo\000"
	.section	.text.rtk_sc_restart_simple_config,"ax",@progbits
	.align	2
	.globl	rtk_sc_restart_simple_config
	.set	nomips16
	.ent	rtk_sc_restart_simple_config
	.type	rtk_sc_restart_simple_config, @function
rtk_sc_restart_simple_config:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L109
	move	$16,$4

	lui	$4,%hi($LC5)
	jal	panic_printk
	addiu	$4,$4,%lo($LC5)

$L109:
	jal	rtk_sc_clean_profile_value
	nop

	lui	$5,%hi($LC6)
	addiu	$5,$5,%lo($LC6)
	jal	rtk_sc_set_string_value
	li	$4,25			# 0x19

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1000			# 0x3e8

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,18			# 0x12
	jal	rtk_sc_set_value
	move	$5,$0

	move	$5,$0
	jal	rtk_sc_set_value
	li	$4,28			# 0x1c

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	move	$2,$0
	lw	$31,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_restart_simple_config
	.size	rtk_sc_restart_simple_config, .-rtk_sc_restart_simple_config
	.section	.rodata.str1.4
	.align	2
$LC7:
	.ascii	"get the profile info fail\012\000"
	.align	2
$LC8:
	.ascii	"get the profile\012\000"
	.align	2
$LC9:
	.ascii	"get the profile and encrypt info now, try to connect rem"
	.ascii	"ote AP\012\000"
	.section	.text.rtk_sc_check_profile,"ax",@progbits
	.align	2
	.globl	rtk_sc_check_profile
	.set	nomips16
	.ent	rtk_sc_check_profile
	.type	rtk_sc_check_profile, @function
rtk_sc_check_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 4/0, args= 16, gp= 0
	.mask	0x80070000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	lui	$18,%hi(pp)
	move	$16,$4
	lui	$17,%hi(g_sc_ctx)
	lui	$2,%hi(use_ios7_mac)
	lw	$4,%lo(pp)($18)
	addiu	$5,$17,%lo(g_sc_ctx)
	jal	rtk_sc_get_cipher_info
	sw	$0,%lo(use_ios7_mac)($2)

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_generate_key
	addiu	$5,$17,%lo(g_sc_ctx)

	bne	$2,$0,$L112
	nop

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_decode_profile
	addiu	$5,$17,%lo(g_sc_ctx)

	bne	$2,$0,$L112
	nop

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$17,%lo(g_sc_ctx)

	beq	$2,$0,$L130
	lui	$5,%hi(g_sc_ctx+94)

$L112:
	lui	$18,%hi(pp)
	lui	$17,%hi(g_sc_ctx)
	lw	$4,%lo(pp)($18)
	li	$3,1			# 0x1
	lui	$2,%hi(use_ios7_mac)
	addiu	$5,$17,%lo(g_sc_ctx)
	jal	rtk_sc_generate_key
	sw	$3,%lo(use_ios7_mac)($2)

	bne	$2,$0,$L131
	lui	$3,%hi(use_ios7_mac)

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_decode_profile
	addiu	$5,$17,%lo(g_sc_ctx)

	bne	$2,$0,$L131
	lui	$3,%hi(use_ios7_mac)

	lw	$4,%lo(pp)($18)
	jal	rtk_sc_get_tlv_info
	addiu	$5,$17,%lo(g_sc_ctx)

	lui	$3,%hi(use_ios7_mac)
$L131:
	beq	$2,$0,$L113
	sw	$0,%lo(use_ios7_mac)($3)

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L115
	lui	$4,%hi($LC7)

	jal	panic_printk
	addiu	$4,$4,%lo($LC7)

$L115:
	lui	$2,%hi(pp)
	lw	$3,%lo(pp)($2)
	lw	$4,0($3)
	li	$3,5			# 0x5
	beq	$4,$3,$L117
	li	$2,-1			# 0xffffffff

	jal	rtk_sc_restart_simple_config
	move	$4,$16

	j	$L117
	li	$2,-1			# 0xffffffff

$L113:
	lui	$5,%hi(g_sc_ctx+94)
$L130:
	li	$4,22			# 0x16
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_ctx+94)

	jal	rtk_sc_get_value
	li	$4,28			# 0x1c

	li	$4,28			# 0x1c
	move	$17,$2
	jal	rtk_sc_set_value
	move	$5,$0

	bne	$17,$0,$L118
	lui	$2,%hi(g_sc_debug)

	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L119
	lui	$4,%hi($LC8)

	jal	panic_printk
	addiu	$4,$4,%lo($LC8)

$L119:
	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	lui	$2,%hi(g_sc_ctx+30)
	lbu	$2,%lo(g_sc_ctx+30)($2)
	beq	$2,$0,$L120
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L127
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L120:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L127:
	jal	rtk_sc_set_string_value
	nop

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	j	$L117
	move	$2,$0

$L118:
	blez	$17,$L117
	move	$2,$0

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L132
	lui	$2,%hi(g_sc_ctx+30)

	lui	$4,%hi($LC9)
	jal	panic_printk
	addiu	$4,$4,%lo($LC9)

	lui	$2,%hi(g_sc_ctx+30)
$L132:
	lbu	$2,%lo(g_sc_ctx+30)($2)
	beq	$2,$0,$L124
	nop

	lui	$5,%hi(g_sc_ctx+30)
	li	$4,25			# 0x19
	j	$L128
	addiu	$5,$5,%lo(g_sc_ctx+30)

$L124:
	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	addiu	$5,$5,%lo(g_sc_ctx+24)
$L128:
	jal	rtk_sc_set_string_value
	nop

	jal	rtk_sc_set_passwd
	move	$4,$16

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,4			# 0x4

	li	$5,4			# 0x4
	jal	rtk_sc_set_value
	li	$4,7			# 0x7

	jal	rtk_sc_sync_vxd_to_root
	move	$4,$16

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	jal	rtk_sc_start_connect_target
	move	$4,$16

	move	$2,$0
$L117:
	lw	$31,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	rtk_sc_check_profile
	.size	rtk_sc_check_profile, .-rtk_sc_check_profile
	.section	.rodata.str1.4
	.align	2
$LC10:
	.ascii	"index is %d, received packet number is %d\012\000"
	.align	2
$LC11:
	.ascii	"sync index is %d\012\000"
	.align	2
$LC12:
	.ascii	"the BSSID is \000"
	.align	2
$LC13:
	.ascii	"the Control Device MAC is \000"
	.align	2
$LC14:
	.ascii	"the option Control Device MAC is \000"
	.align	2
$LC15:
	.ascii	"the option Control Device number is %d, the pkt len is %"
	.ascii	"d\012\000"
	.align	2
$LC16:
	.ascii	"the magic number 1 is %d, the magic number 2 is %d\012\000"
	.align	2
$LC17:
	.ascii	"the total profile packet num is %d\012\000"
	.align	2
$LC18:
	.ascii	"index is %d, total is %d, received %d now!\012\000"
	.align	2
$LC19:
	.ascii	"don't add this data to profile\012\000"
	.align	2
$LC20:
	.ascii	"seq %d is over max length\012\000"
	.align	2
$LC21:
	.ascii	"index is %d, tatal is %d, received %d now!\012\000"
	.align	2
$LC22:
	.ascii	"seq %d is NULL\012\000"
	.section	.text.rtk_sc_start_parse_packet,"ax",@progbits
	.align	2
	.globl	rtk_sc_start_parse_packet
	.set	nomips16
	.ent	rtk_sc_start_parse_packet
	.type	rtk_sc_start_parse_packet, @function
rtk_sc_start_parse_packet:
	.frame	$sp,64,$31		# vars= 8, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-64
	sw	$31,60($sp)
	sw	$fp,56($sp)
	sw	$23,52($sp)
	sw	$22,48($sp)
	sw	$21,44($sp)
	sw	$20,40($sp)
	sw	$19,36($sp)
	sw	$18,32($sp)
	sw	$17,28($sp)
	sw	$16,24($sp)
	move	$16,$4
	li	$4,13			# 0xd
	jal	rtk_sc_get_value
	move	$17,$5

	move	$18,$2
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,-1			# 0xffffffff
	bne	$3,$2,$L134
	nop

	lw	$4,24($17)
	jal	bytedump
	li	$5,6			# 0x6

$L134:
	lw	$2,24($17)
	li	$3,1			# 0x1
	lbu	$4,0($2)
	bne	$4,$3,$L135
	nop

	lbu	$3,1($2)
	bne	$3,$0,$L135
	li	$3,94			# 0x5e

	lbu	$4,2($2)
	bne	$4,$3,$L135
	nop

	lbu	$3,3($2)
	bne	$3,$0,$L135
	nop

	lbu	$3,5($2)
	beq	$3,$0,$L135
	li	$3,-128			# 0xffffff80

	sb	$3,3($2)
$L135:
	addiu	$2,$18,-1
	sltu	$2,$2,2
	beq	$2,$0,$L136
	lui	$2,%hi(finish_sync)

	lw	$3,%lo(finish_sync)($2)
	bne	$3,$0,$L137
	li	$2,2			# 0x2

	lw	$2,24($17)
	li	$4,1			# 0x1
	lbu	$3,0($2)
	bne	$3,$4,$L138
	li	$4,255			# 0xff

	lbu	$3,1($2)
	bne	$3,$0,$L136
	li	$3,94			# 0x5e

	lbu	$4,2($2)
	bne	$4,$3,$L136
	move	$4,$0

	move	$3,$0
	li	$5,6			# 0x6
$L139:
	addu	$6,$2,$3
	addiu	$3,$3,1
	lbu	$6,0($6)
	addu	$4,$4,$6
	bne	$3,$5,$L139
	andi	$4,$4,0x00ff

	bne	$4,$0,$L136
	lui	$3,%hi(g_pkt_type)

	li	$2,2			# 0x2
	lw	$3,%lo(g_pkt_type)($3)
	beq	$3,$2,$L136
	lui	$3,%hi(g_sc_config_type)

	lw	$3,%lo(g_sc_config_type)($3)
	andi	$3,$3,0x1
	beq	$3,$0,$L136
	lui	$3,%hi(g_sc_check_level)

	lw	$3,%lo(g_sc_check_level)($3)
	bne	$3,$2,$L254
	lui	$2,%hi(fix_sa)

	jal	rtk_sc_valid_profile_packet
	move	$4,$17

	beq	$2,$0,$L136
	lui	$2,%hi(fix_sa)

$L254:
	lw	$3,%lo(fix_sa)($2)
	li	$2,1			# 0x1
	bne	$3,$2,$L255
	lui	$2,%hi(fix_sa)

	lui	$4,%hi(g_sc_ctx+12)
	li	$6,6			# 0x6
	lw	$5,28($17)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L141
	lui	$2,%hi(fix_sa)

	lw	$2,24($17)
	li	$3,6			# 0x6
	lbu	$5,3($2)
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	mult	$5,$3
	mflo	$4
	addu	$6,$4,$2
	lbu	$6,260($6)
	bne	$6,$0,$L136
	slt	$6,$5,9

	bne	$6,$0,$L142
	nop

	addiu	$4,$5,-9
	mult	$4,$3
	mflo	$3
	addu	$4,$3,$2
	lbu	$4,314($4)
	bne	$4,$0,$L136
	addu	$2,$2,$3

	li	$3,6			# 0x6
	addiu	$2,$2,314
$L143:
	lw	$6,24($17)
	addu	$6,$6,$4
	addiu	$4,$4,1
	lbu	$6,0($6)
	sb	$6,0($2)
	bne	$4,$3,$L143
	addiu	$2,$2,1

	lui	$2,%hi(profile_pkt_index)
	lui	$3,%hi(g_sc_debug)
	lw	$6,%lo(profile_pkt_index)($2)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$6,$6,1
	sw	$6,%lo(profile_pkt_index)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L251
	lui	$2,%hi(sync_pkt_index)

	li	$2,10			# 0xa
	div	$0,$6,$2
	mfhi	$2
	bne	$2,$0,$L145
	li	$3,8388608			# 0x800000

	li	$2,-1207959552			# 0xb8000000
	ori	$2,$2,0x311c
	lw	$4,0($2)
	or	$3,$4,$3
	sw	$3,0($2)
$L145:
	lui	$4,%hi($LC10)
	jal	panic_printk
	addiu	$4,$4,%lo($LC10)

	j	$L251
	lui	$2,%hi(sync_pkt_index)

$L142:
	addu	$2,$2,$4
	move	$3,$0
	addiu	$2,$2,260
	li	$4,6			# 0x6
$L146:
	lw	$6,24($17)
	addu	$6,$6,$3
	addiu	$3,$3,1
	lbu	$6,0($6)
	sb	$6,0($2)
	bne	$3,$4,$L146
	addiu	$2,$2,1

	lui	$2,%hi(sync_pkt_index)
	li	$3,1			# 0x1
	lw	$4,%lo(sync_pkt_index)($2)
	sll	$5,$3,$5
	lui	$3,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($3)
	or	$5,$5,$4
	sw	$5,%lo(sync_pkt_index)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L251
	lui	$2,%hi(sync_pkt_index)

	lui	$4,%hi($LC11)
	jal	panic_printk
	addiu	$4,$4,%lo($LC11)

	lui	$2,%hi(sync_pkt_index)
$L251:
	lw	$3,%lo(sync_pkt_index)($2)
	li	$2,511			# 0x1ff
	andi	$3,$3,0x1ff
	bne	$3,$2,$L136
	lui	$19,%hi(g_sc_ctx+2416)

	lui	$17,%hi(g_sc_ctx)
	addiu	$19,$19,%lo(g_sc_ctx+2416)
	addiu	$17,$17,%lo(g_sc_ctx)
	move	$18,$0
	j	$L147
	lui	$20,%hi(pp)

$L152:
	lw	$4,0($19)
	addiu	$19,$19,4
	beq	$4,$0,$L147
	sw	$4,%lo(pp)($20)

	lw	$2,4($4)
	andi	$2,$2,0x2
	beq	$2,$0,$L147
	move	$5,$17

	jal	rtk_sc_check_pattern
	move	$6,$16

	bne	$2,$0,$L147
	li	$3,1			# 0x1

	li	$4,14			# 0xe
	lui	$2,%hi(finish_sync)
	move	$5,$0
	jal	rtk_sc_set_value
	sw	$3,%lo(finish_sync)($2)

	lui	$2,%hi(profile_pkt_index)
	lw	$3,1852($17)
	lui	$4,%hi(sync_pkt_index)
	lw	$2,%lo(profile_pkt_index)($2)
	sltu	$2,$2,$3
	bne	$2,$0,$L136
	sw	$0,%lo(sync_pkt_index)($4)

	lui	$4,%hi(g_sc_ctx+368)
	li	$2,9			# 0x9
	j	$L149
	addiu	$4,$4,%lo(g_sc_ctx+368)

$L151:
	beq	$4,$0,$L195
	nop

	addiu	$2,$2,1
	addiu	$4,$4,6
$L149:
	sltu	$5,$2,$3
	bne	$5,$0,$L151
	nop

	j	$L195
	nop

$L147:
	lw	$2,2672($17)
	slt	$2,$18,$2
	bne	$2,$0,$L152
	addiu	$18,$18,1

	lui	$2,%hi(fix_sa)
	move	$4,$16
	j	$L249
	sw	$0,%lo(fix_sa)($2)

$L141:
$L255:
	lw	$3,%lo(fix_sa)($2)
	li	$2,1			# 0x1
	bne	$3,$2,$L256
	lui	$2,%hi(g_sc_check_level)

	lui	$2,%hi(g_sc_ignore_overlap)
	lw	$2,%lo(g_sc_ignore_overlap)($2)
	bne	$2,$0,$L136
	lui	$2,%hi(g_sc_check_level)

$L256:
	lw	$2,%lo(g_sc_check_level)($2)
	beq	$2,$0,$L154
	nop

	jal	rtk_sc_valid_profile_packet
	move	$4,$17

	beq	$2,$0,$L136
	nop

$L154:
	lw	$5,28($17)
	lui	$16,%hi(g_sc_ctx+12)
	addiu	$4,$16,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lui	$4,%hi(g_smac)
	lw	$5,28($17)
	li	$6,6			# 0x6
	addiu	$4,$4,%lo(g_smac)
	jal	memcpy
	lui	$19,%hi(g_sc_ctx+24)

	lui	$21,%hi(g_sc_bssid)
	lw	$2,0($17)
	lw	$4,188($2)
	jal	get_bssid
	lui	$20,%hi(null_mac)

	addiu	$4,$19,%lo(g_sc_ctx+24)
	move	$18,$2
	li	$6,6			# 0x6
	jal	memcpy
	move	$5,$2

	li	$6,6			# 0x6
	move	$5,$18
	jal	memcpy
	addiu	$4,$21,%lo(g_sc_bssid)

	addiu	$5,$21,%lo(g_sc_bssid)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	move	$4,$18
	addiu	$5,$20,%lo(null_mac)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L257
	lui	$2,%hi(sync_pkt_index)

	addiu	$5,$20,%lo(null_mac)
	addiu	$4,$16,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L257
	lui	$2,%hi(sync_pkt_index)

	move	$4,$18
	addiu	$5,$16,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L155
	lui	$2,%hi(g_sc_debug)

	lui	$3,%hi(finish_sync)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L156
	sw	$0,%lo(finish_sync)($3)

	lui	$4,%hi($LC12)
	jal	panic_printk
	addiu	$4,$4,%lo($LC12)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$19,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC13)
	jal	panic_printk
	addiu	$4,$4,%lo($LC13)

	addiu	$4,$16,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L156:
	lbu	$5,40($17)
	jal	rtk_sc_set_value
	li	$4,19			# 0x13

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	lui	$5,%hi(g_sc_ctx+24)
	addiu	$5,$5,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	li	$2,1			# 0x1
	lui	$3,%hi(g_pkt_type)
	sw	$2,%lo(g_pkt_type)($3)
	lui	$3,%hi(fix_sa)
	sw	$2,%lo(fix_sa)($3)
$L155:
	lui	$2,%hi(sync_pkt_index)
$L257:
	li	$4,14			# 0xe
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	move	$5,$0
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$2,%hi(sequence)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	j	$L136
	nop

$L138:
	bne	$3,$4,$L136
	nop

	lbu	$4,1($2)
	bne	$4,$3,$L136
	nop

	lbu	$3,2($2)
	bne	$3,$4,$L136
	nop

	lbu	$4,3($2)
	bne	$4,$3,$L136
	nop

	lbu	$3,4($2)
	bne	$3,$4,$L136
	nop

	lbu	$2,5($2)
	bne	$2,$3,$L136
	nop

	lbu	$2,40($17)
	addiu	$2,$2,-1
	andi	$2,$2,0x00ff
	sltu	$2,$2,2
	beq	$2,$0,$L136
	lui	$2,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($2)
	li	$2,1			# 0x1
	beq	$3,$2,$L136
	lui	$2,%hi(g_sc_config_type)

	lw	$2,%lo(g_sc_config_type)($2)
	andi	$2,$2,0x2
	beq	$2,$0,$L136
	lui	$22,%hi(g_option_sa)

	lui	$20,%hi(g_sc_ctx)
	addiu	$22,$22,%lo(g_option_sa)
	addiu	$20,$20,%lo(g_sc_ctx)
	move	$21,$22
	move	$18,$0
	lui	$4,%hi(g_sc_magic)
	sll	$2,$18,2
$L278:
	addiu	$4,$4,%lo(g_sc_magic)
	addu	$2,$2,$4
	lw	$2,0($2)
	lw	$3,12($17)
	addiu	$2,$2,3
	bne	$3,$2,$L258
	lui	$19,%hi(g_option_sa+12)

	move	$19,$0
	li	$fp,5			# 0x5
	sll	$23,$19,4
$L259:
	lw	$5,28($17)
	li	$6,6			# 0x6
	addu	$23,$22,$23
	jal	memcmp
	move	$4,$23

	lui	$5,%hi(null_mac)
	move	$4,$23
	li	$6,6			# 0x6
	bne	$2,$0,$L158
	addiu	$5,$5,%lo(null_mac)

	lbu	$2,40($17)
	li	$3,1			# 0x1
	bne	$2,$3,$L159
	nop

	sll	$19,$19,4
	addiu	$19,$19,8
	addu	$21,$19,$21
	lw	$2,0($21)
	bne	$2,$0,$L136
	lui	$2,%hi(g_sc_magic)

	sll	$18,$18,2
	addiu	$2,$2,%lo(g_sc_magic)
	addu	$18,$18,$2
	lw	$2,0($18)
	j	$L136
	sw	$2,0($21)

$L159:
	li	$4,2			# 0x2
	bne	$2,$4,$L136
	sll	$19,$19,4

	addiu	$19,$19,8
	addu	$21,$21,$19
	lw	$2,4($21)
	bne	$2,$0,$L136
	lui	$4,%hi(g_sc_magic)

	sll	$18,$18,2
	lui	$2,%hi(g_p4_to_ds_hrate)
	addiu	$4,$4,%lo(g_sc_magic)
	addu	$18,$18,$4
	lw	$5,0($18)
	lw	$4,%lo(g_p4_to_ds_hrate)($2)
	bne	$4,$0,$L136
	sw	$5,4($21)

	lbu	$4,50($17)
	sltu	$4,$4,55
	bne	$4,$0,$L136
	nop

	j	$L136
	sw	$3,%lo(g_p4_to_ds_hrate)($2)

$L158:
	jal	memcmp
	nop

	bne	$2,$0,$L160
	addiu	$19,$19,1

	addiu	$19,$19,-1
	lbu	$2,40($17)
	li	$3,1			# 0x1
	bne	$2,$3,$L161
	li	$4,2			# 0x2

	lui	$3,%hi(g_sc_magic)
	sll	$18,$18,2
	addiu	$3,$3,%lo(g_sc_magic)
	sll	$2,$19,4
	addu	$18,$18,$3
	addu	$21,$21,$2
	lw	$2,0($18)
	j	$L162
	sw	$2,8($21)

$L161:
	bne	$2,$4,$L162
	lui	$5,%hi(g_sc_magic)

	sll	$18,$18,2
	lui	$2,%hi(g_p4_to_ds_hrate)
	addiu	$5,$5,%lo(g_sc_magic)
	sll	$4,$19,4
	addu	$18,$18,$5
	addu	$21,$21,$4
	lw	$5,0($18)
	lw	$4,%lo(g_p4_to_ds_hrate)($2)
	bne	$4,$0,$L162
	sw	$5,12($21)

	lbu	$4,50($17)
	sltu	$4,$4,55
	bne	$4,$0,$L162
	nop

	sw	$3,%lo(g_p4_to_ds_hrate)($2)
$L162:
	lw	$5,28($17)
	move	$4,$23
	jal	memcpy
	li	$6,6			# 0x6

	lui	$2,%hi(g_p4_option_num)
	lw	$4,%lo(g_p4_option_num)($2)
	lui	$3,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$4,$4,1
	beq	$3,$0,$L136
	sw	$4,%lo(g_p4_option_num)($2)

	lui	$4,%hi($LC14)
	sll	$19,$19,4
	jal	panic_printk
	addiu	$4,$4,%lo($LC14)

	lui	$4,%hi(g_option_sa)
	addiu	$4,$4,%lo(g_option_sa)
	li	$5,6			# 0x6
	jal	bytedump
	addu	$4,$4,$19

	j	$L136
	nop

$L160:
	bne	$19,$fp,$L259
	sll	$23,$19,4

	lbu	$2,40($17)
	li	$3,1			# 0x1
	bne	$2,$3,$L164
	li	$3,2			# 0x2

	lui	$3,%hi(g_p4_option_num)
	lui	$6,%hi(g_sc_magic)
	sll	$2,$18,2
	lw	$3,%lo(g_p4_option_num)($3)
	addiu	$6,$6,%lo(g_sc_magic)
	addu	$2,$2,$6
	divu	$0,$3,$19
	lw	$2,0($2)
	mfhi	$19
	sll	$19,$19,4
	addu	$19,$21,$19
	j	$L165
	sw	$2,8($19)

$L164:
	bne	$2,$3,$L260
	lui	$23,%hi(g_p4_option_num)

	lui	$3,%hi(g_p4_option_num)
	lui	$4,%hi(g_sc_magic)
	sll	$2,$18,2
	lw	$3,%lo(g_p4_option_num)($3)
	addiu	$4,$4,%lo(g_sc_magic)
	addu	$2,$2,$4
	divu	$0,$3,$19
	lw	$2,0($2)
	mfhi	$19
	sll	$19,$19,4
	addu	$19,$21,$19
	sw	$2,12($19)
$L165:
	lui	$23,%hi(g_p4_option_num)
$L260:
	li	$19,5			# 0x5
	lw	$4,%lo(g_p4_option_num)($23)
	li	$6,6			# 0x6
	lw	$5,28($17)
	divu	$0,$4,$19
	mfhi	$4
	sll	$4,$4,4
	jal	memcpy
	addu	$4,$22,$4

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_p4_option_num)($23)
	lw	$2,%lo(g_sc_debug)($2)
	addiu	$3,$3,1
	beq	$2,$0,$L157
	sw	$3,%lo(g_p4_option_num)($23)

	lui	$4,%hi($LC14)
	jal	panic_printk
	addiu	$4,$4,%lo($LC14)

	li	$5,6			# 0x6
	lw	$4,%lo(g_p4_option_num)($23)
	divu	$0,$4,$19
	mfhi	$4
	sll	$4,$4,4
	jal	bytedump
	addu	$4,$22,$4

	lui	$4,%hi($LC15)
	lw	$5,%lo(g_p4_option_num)($23)
	lw	$6,12($17)
	jal	panic_printk
	addiu	$4,$4,%lo($LC15)

	lui	$4,%hi($LC16)
	lw	$2,%lo(g_p4_option_num)($23)
	divu	$0,$2,$19
	mfhi	$19
	sll	$19,$19,4
	addiu	$19,$19,8
	addu	$19,$19,$22
	lw	$6,4($19)
	lw	$5,0($19)
	jal	panic_printk
	addiu	$4,$4,%lo($LC16)

$L157:
	lui	$19,%hi(g_option_sa+12)
$L258:
	move	$fp,$0
	addiu	$19,$19,%lo(g_option_sa+12)
	li	$23,1			# 0x1
$L185:
	sll	$4,$fp,4
	lw	$5,28($17)
	li	$6,6			# 0x6
	jal	memcmp
	addu	$4,$22,$4

	bne	$2,$0,$L166
	nop

	lw	$3,-4($19)
	bne	$3,$0,$L167
	nop

	lw	$2,0($19)
	beq	$2,$0,$L166
	nop

$L167:
	lw	$2,0($19)
	lw	$4,12($17)
	sltu	$5,$2,$3
	movn	$2,$3,$5
	move	$5,$2
	addiu	$2,$2,1094
	sltu	$2,$2,$4
	beq	$2,$0,$L261
	addiu	$2,$5,1070

	addiu	$6,$5,1111
	sltu	$6,$6,$4
	beq	$6,$0,$L169
	li	$2,4			# 0x4

	addiu	$2,$5,1070
$L261:
	sltu	$2,$2,$4
	beq	$2,$0,$L262
	addiu	$2,$5,1046

	addiu	$6,$5,1087
	sltu	$6,$6,$4
	beq	$6,$0,$L169
	li	$2,3			# 0x3

	addiu	$2,$5,1046
$L262:
	sltu	$2,$2,$4
	beq	$2,$0,$L263
	addiu	$2,$5,1022

	addiu	$6,$5,1063
	sltu	$6,$6,$4
	beq	$6,$0,$L169
	li	$2,2			# 0x2

	addiu	$2,$5,1022
$L263:
	sltu	$2,$2,$4
	beq	$2,$0,$L166
	addiu	$5,$5,1039

	sltu	$4,$5,$4
	bne	$4,$0,$L166
	li	$2,1			# 0x1

$L169:
	lw	$4,0($19)
	lui	$5,%hi(g_p4_magic_1)
	sw	$3,%lo(g_p4_magic_1)($5)
	lui	$5,%hi(g_p4_magic_2)
	beq	$3,$0,$L172
	sw	$4,%lo(g_p4_magic_2)($5)

	beq	$4,$0,$L172
	nop

	beq	$4,$3,$L172
	sltu	$5,$4,$3

	beq	$5,$0,$L264
	sltu	$5,$3,$4

	addiu	$5,$3,-2
	bne	$4,$5,$L136
	sltu	$5,$3,$4

$L264:
	beq	$5,$0,$L172
	addiu	$4,$4,-2

	bne	$3,$4,$L136
	nop

$L172:
	lbu	$4,40($17)
	bne	$4,$23,$L265
	nop

	beq	$3,$0,$L266
	li	$3,2			# 0x2

	lw	$3,12($17)
	lw	$4,-4($19)
	bne	$2,$23,$L175
	subu	$6,$23,$2

	subu	$3,$3,$4
	sll	$3,$3,4
	addiu	$3,$3,-16368
	j	$L174
	sw	$3,1852($20)

$L175:
	li	$5,24			# 0x18
	mult	$6,$5
	addiu	$7,$2,-1
	li	$6,63			# 0x3f
	subu	$3,$3,$4
	mflo	$5
	mult	$7,$6
	addu	$5,$3,$5
	addiu	$7,$2,-16385
	sll	$3,$5,4
	mflo	$6
	addu	$6,$7,$6
	addu	$5,$6,$3
	sw	$5,1852($20)
$L174:
	lbu	$4,40($17)
$L265:
	li	$3,2			# 0x2
$L266:
	bne	$4,$3,$L176
	lui	$3,%hi(g_p4_magic_2)

	lw	$3,%lo(g_p4_magic_2)($3)
	beq	$3,$0,$L176
	nop

	lw	$3,12($17)
	lw	$4,0($19)
	bne	$2,$23,$L177
	subu	$6,$23,$2

	subu	$3,$3,$4
	sll	$3,$3,4
	addiu	$3,$3,-16368
	j	$L178
	sw	$3,1852($20)

$L177:
	li	$5,24			# 0x18
	mult	$6,$5
	addiu	$7,$2,-1
	li	$6,63			# 0x3f
	subu	$3,$3,$4
	addiu	$2,$2,-16385
	mflo	$5
	mult	$7,$6
	addu	$5,$3,$5
	sll	$5,$5,4
	mflo	$6
	addu	$2,$2,$6
	addu	$2,$2,$5
	sw	$2,1852($20)
$L178:
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	bne	$3,$0,$L176
	nop

	lbu	$3,50($17)
	sltu	$3,$3,55
	bne	$3,$0,$L176
	li	$3,1			# 0x1

	sw	$3,%lo(g_p4_to_ds_hrate)($2)
$L176:
	lw	$5,1852($20)
	sltu	$2,$5,257
	bne	$2,$0,$L179
	move	$4,$16

$L249:
	jal	rtk_sc_restart_simple_config
	nop

	j	$L136
	nop

$L179:
	beq	$5,$0,$L136
	lui	$2,%hi(g_sc_debug)

	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L180
	nop

	lui	$4,%hi($LC17)
	jal	panic_printk
	addiu	$4,$4,%lo($LC17)

$L180:
	lw	$5,28($17)
	lui	$4,%hi(g_sc_ctx+12)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_sc_ctx+12)

	lui	$4,%hi(g_smac)
	lw	$5,28($17)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($17)
	lw	$4,188($2)
	jal	get_bssid
	nop

	lui	$4,%hi(g_sc_ctx+24)
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$2
	li	$6,6			# 0x6
	jal	memcpy
	move	$18,$2

	lui	$4,%hi(g_sc_bssid)
	li	$6,6			# 0x6
	addiu	$4,$4,%lo(g_sc_bssid)
	jal	memcpy
	move	$5,$18

	lui	$5,%hi(g_sc_bssid)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_bssid)

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	li	$6,1			# 0x1
	lui	$4,%hi(finish_sync)
	beq	$2,$0,$L181
	sw	$6,%lo(finish_sync)($4)

	lui	$4,%hi($LC12)
	jal	panic_printk
	addiu	$4,$4,%lo($LC12)

	lui	$4,%hi(g_sc_ctx+24)
	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$4,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC13)
	jal	panic_printk
	addiu	$4,$4,%lo($LC13)

	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L181:
	lbu	$5,40($17)
	lui	$3,%hi(g_sc_ctx+2424)
	addiu	$3,$3,%lo(g_sc_ctx+2424)
	li	$4,19			# 0x13
	sw	$3,16($sp)
	jal	rtk_sc_set_value
	li	$18,2			# 0x2

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	lui	$5,%hi(g_sc_ctx+24)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_ctx+24)

	lui	$2,%hi(fix_sa)
	li	$6,1			# 0x1
	li	$4,14			# 0xe
	sw	$6,%lo(fix_sa)($2)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	move	$5,$0
	lui	$2,%hi(sequence)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	lw	$3,16($sp)
	j	$L182
	nop

$L184:
	lw	$4,0($3)
	addiu	$18,$18,1
	addiu	$3,$3,4
	beq	$4,$0,$L182
	sw	$4,%lo(pp)($2)

	lw	$2,4($4)
	andi	$2,$2,0x2
	beq	$2,$0,$L182
	lui	$5,%hi(g_sc_ctx)

	move	$6,$16
	addiu	$5,$5,%lo(g_sc_ctx)
	jal	rtk_sc_check_pattern
	sw	$3,16($sp)

	lw	$3,16($sp)
	bne	$2,$0,$L182
	li	$2,1			# 0x1

	lui	$3,%hi(fix_sa)
	sw	$2,%lo(fix_sa)($3)
	li	$4,2			# 0x2
	lui	$3,%hi(g_pkt_type)
	sw	$4,%lo(g_pkt_type)($3)
	lui	$3,%hi(finish_sync)
	j	$L136
	sw	$2,%lo(finish_sync)($3)

$L182:
	lw	$2,2672($20)
	slt	$2,$18,$2
	bne	$2,$0,$L184
	lui	$2,%hi(pp)

$L166:
	addiu	$fp,$fp,1
	li	$2,5			# 0x5
	bne	$fp,$2,$L185
	addiu	$19,$19,16

	addiu	$18,$18,1
	slt	$2,$18,8
	beq	$2,$0,$L136
	lui	$4,%hi(g_sc_magic)

	j	$L278
	sll	$2,$18,2

$L137:
	bne	$18,$2,$L136
	li	$2,1			# 0x1

	bne	$3,$2,$L136
	nop

	lw	$2,24($17)
	lbu	$4,0($2)
	bne	$4,$3,$L267
	li	$4,255			# 0xff

	lbu	$3,1($2)
	bne	$3,$0,$L267
	li	$3,94			# 0x5e

	lbu	$4,2($2)
	bne	$4,$3,$L267
	li	$4,255			# 0xff

	move	$3,$0
	move	$18,$0
	li	$4,6			# 0x6
$L188:
	addu	$5,$2,$18
	addiu	$18,$18,1
	lbu	$5,0($5)
	addu	$3,$3,$5
	bne	$18,$4,$L188
	andi	$3,$3,0x00ff

	bne	$3,$0,$L187
	lui	$4,%hi(g_sc_ctx+12)

	li	$6,6			# 0x6
	lw	$5,28($17)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L187
	lui	$2,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($2)
	li	$2,1			# 0x1
	bne	$3,$2,$L187
	nop

	lw	$2,24($17)
	lbu	$5,3($2)
	slt	$2,$5,9
	bne	$2,$0,$L136
	addiu	$19,$5,-9

	lui	$2,%hi(g_sc_ctx)
	mult	$19,$18
	addiu	$2,$2,%lo(g_sc_ctx)
	mflo	$18
	addu	$18,$18,$2
	lbu	$2,314($18)
	bne	$2,$0,$L136
	lui	$2,%hi(g_sc_check_level)

	lw	$3,%lo(g_sc_check_level)($2)
	li	$2,2			# 0x2
	beq	$3,$2,$L189
	li	$2,6			# 0x6

$L268:
	lui	$3,%hi(g_sc_ctx)
	mult	$19,$2
	addiu	$3,$3,%lo(g_sc_ctx)
	move	$2,$0
	li	$4,6			# 0x6
	mflo	$19
	addu	$19,$3,$19
	j	$L190
	addiu	$19,$19,314

$L189:
	move	$4,$17
	jal	rtk_sc_valid_profile_packet
	sw	$5,16($sp)

	lw	$5,16($sp)
	bne	$2,$0,$L268
	li	$2,6			# 0x6

	j	$L136
	nop

$L190:
	lw	$3,24($17)
	addu	$3,$3,$2
	addiu	$2,$2,1
	lbu	$3,0($3)
	sb	$3,0($19)
	bne	$2,$4,$L190
	addiu	$19,$19,1

	lui	$2,%hi(profile_pkt_index)
	lui	$3,%hi(g_sc_debug)
	lw	$7,%lo(profile_pkt_index)($2)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$7,$7,1
	sw	$7,%lo(profile_pkt_index)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L269
	lui	$2,%hi(g_sc_ctx+1852)

	li	$2,10			# 0xa
	div	$0,$7,$2
	mfhi	$2
	bne	$2,$0,$L270
	lui	$2,%hi(g_sc_ctx+1852)

	li	$2,-1207959552			# 0xb8000000
	li	$3,8388608			# 0x800000
	ori	$2,$2,0x311c
	lw	$4,0($2)
	or	$3,$4,$3
	sw	$3,0($2)
	lui	$2,%hi(g_sc_ctx+1852)
$L270:
	lui	$4,%hi($LC18)
	lw	$6,%lo(g_sc_ctx+1852)($2)
	jal	panic_printk
	addiu	$4,$4,%lo($LC18)

	lui	$2,%hi(g_sc_ctx+1852)
$L269:
	lw	$3,%lo(g_sc_ctx+1852)($2)
	lui	$2,%hi(profile_pkt_index)
	lw	$2,%lo(profile_pkt_index)($2)
	sltu	$2,$2,$3
	bne	$2,$0,$L136
	lui	$4,%hi(g_sc_ctx+368)

	li	$2,9			# 0x9
	j	$L194
	addiu	$4,$4,%lo(g_sc_ctx+368)

$L196:
	beq	$4,$0,$L195
	nop

	addiu	$2,$2,1
	addiu	$4,$4,6
$L194:
	sltu	$5,$2,$3
	bne	$5,$0,$L196
	nop

$L195:
	bne	$2,$3,$L136
	nop

	jal	rtk_sc_check_profile
	move	$4,$16

	j	$L136
	nop

$L187:
	lw	$2,24($17)
	li	$4,255			# 0xff
$L267:
	lbu	$3,0($2)
	bne	$3,$4,$L136
	nop

	lbu	$4,1($2)
	bne	$4,$3,$L136
	nop

	lbu	$3,2($2)
	bne	$3,$4,$L136
	nop

	lbu	$4,3($2)
	bne	$4,$3,$L136
	nop

	lbu	$3,4($2)
	bne	$3,$4,$L136
	nop

	lbu	$2,5($2)
	bne	$2,$3,$L136
	lui	$4,%hi(g_sc_ctx+12)

	li	$6,6			# 0x6
	lw	$5,28($17)
	jal	memcmp
	addiu	$4,$4,%lo(g_sc_ctx+12)

	bne	$2,$0,$L136
	nop

	jal	rtk_sc_is_channel_fixed
	move	$4,$16

	beq	$2,$0,$L136
	lui	$2,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L136
	lui	$2,%hi(g_p4_magic_len)

	li	$3,1			# 0x1
	sw	$0,%lo(g_p4_magic_len)($2)
	lbu	$2,40($17)
	bne	$2,$3,$L197
	nop

	lui	$2,%hi(g_p4_magic_1)
	lw	$2,%lo(g_p4_magic_1)($2)
	bne	$2,$0,$L245
	nop

	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$2,%lo(g_p4_to_ds_hrate)($2)
	beq	$2,$0,$L271
	lui	$2,%hi(g_sc_magic)

	lui	$2,%hi(g_sc_ctx+1852)
	lw	$2,%lo(g_sc_ctx+1852)($2)
	sltu	$2,$2,63
	beq	$2,$0,$L199
	lui	$2,%hi(g_sc_magic)

$L271:
	lui	$4,%hi(g_sc_magic+32)
	lw	$5,12($17)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L202:
	lw	$3,0($2)
	addiu	$6,$3,3
	bne	$5,$6,$L201
	addiu	$2,$2,4

	lui	$2,%hi(g_p4_magic_1)
	j	$L136
	sw	$3,%lo(g_p4_magic_1)($2)

$L201:
	bne	$2,$4,$L202
	nop

	j	$L136
	nop

$L197:
	li	$3,2			# 0x2
	bne	$2,$3,$L136
	lui	$2,%hi(g_p4_magic_2)

	lw	$2,%lo(g_p4_magic_2)($2)
	beq	$2,$0,$L203
	nop

$L245:
	lui	$3,%hi(g_p4_magic_len)
	j	$L199
	sw	$2,%lo(g_p4_magic_len)($3)

$L203:
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	bne	$3,$0,$L204
	nop

	lbu	$3,50($17)
	sltu	$3,$3,55
	bne	$3,$0,$L204
	li	$3,1			# 0x1

	sw	$3,%lo(g_p4_to_ds_hrate)($2)
$L204:
	lui	$2,%hi(g_sc_magic)
	lui	$4,%hi(g_sc_magic+32)
	lw	$5,12($17)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L206:
	lw	$3,0($2)
	addiu	$6,$3,3
	bne	$5,$6,$L205
	addiu	$2,$2,4

	lui	$2,%hi(g_p4_magic_2)
	j	$L136
	sw	$3,%lo(g_p4_magic_2)($2)

$L205:
	bne	$2,$4,$L206
	nop

	j	$L136
	nop

$L199:
	lui	$2,%hi(g_p4_magic_len)
	lw	$2,%lo(g_p4_magic_len)($2)
	beq	$2,$0,$L136
	nop

	lw	$3,12($17)
	subu	$2,$3,$2
	andi	$3,$2,0x3f0
	sra	$3,$3,4
	beq	$3,$0,$L207
	slt	$4,$2,1025

	bne	$4,$0,$L208
	lui	$4,%hi(g_p4_group)

$L207:
	lui	$3,%hi(g_p4_group)
	li	$4,-1			# 0xffffffff
	sw	$4,%lo(g_p4_group)($3)
	li	$3,3			# 0x3
	beq	$2,$3,$L209
	nop

	lui	$3,%hi(g_sc_ctx+1852)
	lw	$3,%lo(g_sc_ctx+1852)($3)
	srl	$4,$3,4
	addiu	$4,$4,1023
	bne	$2,$4,$L210
	li	$4,2			# 0x2

$L209:
	lui	$2,%hi(g_p4_group)
	j	$L136
	sw	$0,%lo(g_p4_group)($2)

$L210:
	beq	$2,$4,$L211
	addiu	$4,$3,-63

	srl	$4,$4,4
	addiu	$4,$4,1048
	bne	$2,$4,$L212
	li	$4,11			# 0xb

$L211:
	j	$L247
	li	$3,1			# 0x1

$L212:
	beq	$2,$4,$L213
	addiu	$4,$3,-126

	srl	$4,$4,4
	addiu	$4,$4,1072
	bne	$2,$4,$L214
	li	$4,10			# 0xa

$L213:
	j	$L247
	li	$3,2			# 0x2

$L214:
	beq	$2,$4,$L215
	addiu	$3,$3,-189

	srl	$3,$3,4
	addiu	$3,$3,1096
	bne	$2,$3,$L136
	nop

$L215:
	li	$3,3			# 0x3
$L247:
	lui	$2,%hi(g_p4_group)
	j	$L136
	sw	$3,%lo(g_p4_group)($2)

$L208:
	lw	$4,%lo(g_p4_group)($4)
	bltz	$4,$L136
	li	$5,63			# 0x3f

	mult	$4,$5
	lui	$4,%hi(g_p4_last_seq)
	lw	$6,%lo(g_p4_last_seq)($4)
	mflo	$5
	addiu	$5,$5,-1
	addu	$5,$5,$3
	addiu	$3,$5,15
	slt	$3,$3,$6
	beq	$3,$0,$L272
	lui	$3,%hi(g_sc_ctx)

	slt	$3,$5,64
	bne	$3,$0,$L272
	lui	$3,%hi(g_sc_ctx)

	lui	$3,%hi(g_sc_ctx+1852)
	lw	$3,%lo(g_sc_ctx+1852)($3)
	sltu	$3,$3,127
	bne	$3,$0,$L216
	lui	$3,%hi(g_sc_ctx)

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L273
	li	$3,-1			# 0xffffffff

	lui	$4,%hi($LC19)
	jal	panic_printk
	addiu	$4,$4,%lo($LC19)

	li	$3,-1			# 0xffffffff
$L273:
	lui	$2,%hi(g_p4_group)
	j	$L246
	sw	$3,%lo(g_p4_group)($2)

$L216:
$L272:
	addiu	$3,$3,%lo(g_sc_ctx)
	lw	$4,1852($3)
	sltu	$4,$4,$5
	beq	$4,$0,$L218
	addu	$3,$5,$3

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L274
	lui	$2,%hi(g_sc_ctx+2874)

	lui	$4,%hi($LC20)
	jal	panic_printk
	addiu	$4,$4,%lo($LC20)

	lui	$2,%hi(g_sc_ctx+2874)
$L274:
	lui	$3,%hi(g_sc_ctx+3130)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$3,$3,%lo(g_sc_ctx+3130)
$L220:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$3,$L220
	nop

	lui	$2,%hi(g_p4_group)
	li	$3,-1			# 0xffffffff
	sw	$3,%lo(g_p4_group)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
$L246:
	lui	$2,%hi(g_p4_last_seq)
	j	$L136
	sw	$0,%lo(g_p4_last_seq)($2)

$L218:
	lui	$6,%hi(g_p4_last_seq)
	lbu	$4,3130($3)
	bne	$4,$0,$L221
	sw	$5,%lo(g_p4_last_seq)($6)

	lui	$4,%hi(profile_pkt_index)
	lui	$6,%hi(g_sc_debug)
	andi	$2,$2,0xf
	lw	$7,%lo(profile_pkt_index)($4)
	li	$8,1			# 0x1
	lw	$6,%lo(g_sc_debug)($6)
	addiu	$7,$7,1
	sb	$2,2874($3)
	li	$2,2			# 0x2
	sb	$8,3130($3)
	bne	$6,$2,$L221
	sw	$7,%lo(profile_pkt_index)($4)

	li	$2,10			# 0xa
	div	$0,$7,$2
	mfhi	$2
	bne	$2,$0,$L275
	lui	$2,%hi(g_sc_ctx+1852)

	li	$2,-1207959552			# 0xb8000000
	li	$3,8388608			# 0x800000
	ori	$2,$2,0x311c
	lw	$4,0($2)
	or	$3,$4,$3
	sw	$3,0($2)
	lui	$2,%hi(g_sc_ctx+1852)
$L275:
	lui	$4,%hi($LC21)
	lw	$6,%lo(g_sc_ctx+1852)($2)
	jal	panic_printk
	addiu	$4,$4,%lo($LC21)

$L221:
	lui	$2,%hi(g_sc_ctx)
	lui	$3,%hi(profile_pkt_index)
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$4,%lo(profile_pkt_index)($3)
	lw	$3,1852($2)
	sltu	$4,$4,$3
	beq	$4,$0,$L224
	move	$17,$0

	j	$L253
	lui	$2,%hi(g_p4_group)

$L228:
	lbu	$4,3130($5)
	bne	$4,$0,$L224
	addiu	$17,$17,1

	addiu	$17,$17,-1
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L276
	lui	$2,%hi(profile_pkt_index)

	lui	$4,%hi($LC22)
	move	$5,$17
	jal	panic_printk
	addiu	$4,$4,%lo($LC22)

	lui	$2,%hi(profile_pkt_index)
$L276:
	j	$L227
	sw	$0,%lo(profile_pkt_index)($2)

$L224:
	sltu	$4,$17,$3
	bne	$4,$0,$L228
	addu	$5,$2,$17

$L227:
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$3,1852($2)
	bne	$17,$3,$L223
	lui	$3,%hi(pp)

	lw	$2,2424($2)
	beq	$2,$0,$L229
	sw	$2,%lo(pp)($3)

	lw	$2,4($2)
	andi	$2,$2,0x2
	beq	$2,$0,$L277
	li	$4,-1			# 0xffffffff

	jal	rtk_sc_check_profile
	move	$4,$16

	li	$3,-1			# 0xffffffff
	bne	$2,$3,$L230
	lui	$2,%hi(profile_pkt_index)

$L229:
	li	$4,-1			# 0xffffffff
$L277:
	lui	$3,%hi(g_p4_group)
	sw	$4,%lo(g_p4_group)($3)
	lui	$2,%hi(g_sc_ctx+2874)
	lui	$4,%hi(g_sc_ctx+3130)
	lui	$3,%hi(profile_pkt_index)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$4,$4,%lo(g_sc_ctx+3130)
	sw	$0,%lo(profile_pkt_index)($3)
$L231:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$4,$L231
	nop

	j	$L136
	nop

$L230:
	sw	$0,%lo(profile_pkt_index)($2)
$L223:
	lui	$2,%hi(g_p4_group)
$L253:
	lw	$3,%lo(g_p4_group)($2)
	lui	$2,%hi(g_p4_last_group)
	sw	$3,%lo(g_p4_last_group)($2)
$L136:
	lw	$31,60($sp)
	move	$2,$0
	lw	$fp,56($sp)
	lw	$23,52($sp)
	lw	$22,48($sp)
	lw	$21,44($sp)
	lw	$20,40($sp)
	lw	$19,36($sp)
	lw	$18,32($sp)
	lw	$17,28($sp)
	lw	$16,24($sp)
	j	$31
	addiu	$sp,$sp,64

	.set	macro
	.set	reorder
	.end	rtk_sc_start_parse_packet
	.size	rtk_sc_start_parse_packet, .-rtk_sc_start_parse_packet
	.section	.rodata.str1.4
	.align	2
$LC23:
	.ascii	"The simple config don't support this type in prifole now"
	.ascii	"\012\000"
	.align	2
$LC24:
	.ascii	"the profile don't include necessary info\012\000"
	.section	.text.parse_tlv_info,"ax",@progbits
	.align	2
	.globl	parse_tlv_info
	.set	nomips16
	.ent	parse_tlv_info
	.type	parse_tlv_info, @function
parse_tlv_info:
	.frame	$sp,72,$31		# vars= 16, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-72
	sw	$31,68($sp)
	sw	$fp,64($sp)
	sw	$23,60($sp)
	sw	$22,56($sp)
	sw	$21,52($sp)
	sw	$20,48($sp)
	sw	$19,44($sp)
	sw	$18,40($sp)
	sw	$17,36($sp)
	sw	$16,32($sp)
	li	$2,1			# 0x1
	andi	$7,$7,0x00ff
	move	$17,$4
	move	$21,$5
	bne	$7,$2,$L280
	andi	$19,$6,0x00ff

	addiu	$2,$4,30
	addiu	$6,$17,256
	move	$18,$5
	addiu	$4,$4,94
	move	$fp,$0
	sw	$2,24($sp)
	move	$20,$0
	sw	$4,20($sp)
	move	$23,$0
	sw	$6,16($sp)
	move	$16,$0
	j	$L281
	li	$22,4			# 0x4

$L293:
	lbu	$2,0($18)
	andi	$3,$2,0x3
	bne	$3,$4,$L282
	li	$6,2			# 0x2

	bne	$23,$0,$L283
	srl	$23,$2,2

	slt	$2,$23,33
	beq	$2,$0,$L283
	move	$5,$0

	lw	$4,24($sp)
	jal	memset
	li	$6,64			# 0x40

	addiu	$3,$18,1
	j	$L284
	move	$2,$0

$L285:
	lbu	$4,1($6)
	addiu	$2,$2,1
	sb	$4,30($5)
$L284:
	sltu	$4,$2,$23
	addu	$6,$18,$2
	bne	$4,$0,$L285
	addu	$5,$17,$2

	addiu	$16,$16,1
	addu	$18,$3,$23
	addu	$16,$16,$23
	j	$L286
	li	$23,1			# 0x1

$L282:
	bne	$3,$6,$L287
	li	$4,3			# 0x3

	bne	$20,$0,$L283
	addiu	$3,$18,1

	lw	$4,20($sp)
	srl	$20,$2,2
	li	$6,64			# 0x40
	move	$5,$0
	sw	$3,28($sp)
	jal	memset
	movz	$20,$6,$20

	move	$2,$0
	lw	$3,28($sp)
$L289:
	addu	$5,$18,$2
	addu	$4,$17,$2
	lbu	$5,1($5)
	addiu	$2,$2,1
	bne	$2,$20,$L289
	sb	$5,94($4)

	addiu	$16,$16,1
	addu	$18,$3,$2
	addu	$16,$16,$2
	j	$L286
	li	$20,1			# 0x1

$L287:
	bne	$3,$4,$L290
	nop

	bne	$fp,$0,$L283
	srl	$2,$2,2

	bne	$2,$22,$L283
	addiu	$3,$18,1

	move	$2,$0
$L291:
	addu	$5,$18,$2
	lw	$6,16($sp)
	lbu	$5,1($5)
	addu	$4,$6,$2
	addiu	$2,$2,1
	bne	$2,$22,$L291
	sb	$5,0($4)

	addiu	$18,$3,4
	addiu	$16,$16,5
	j	$L286
	li	$fp,1			# 0x1

$L290:
	beq	$2,$0,$L292
	addu	$21,$21,$16

	j	$L307
	li	$2,-1			# 0xffffffff

$L286:
	slt	$2,$19,$16
	bne	$2,$0,$L307
	li	$2,-1			# 0xffffffff

$L281:
	slt	$2,$16,$19
	bne	$2,$0,$L293
	li	$4,1			# 0x1

	j	$L316
	addu	$21,$21,$16

$L295:
	lbu	$2,0($21)
	beq	$2,$0,$L294
	addiu	$21,$21,1

	j	$L307
	li	$2,-1			# 0xffffffff

$L292:
$L294:
	slt	$2,$16,$19
$L316:
	bne	$2,$0,$L295
	addiu	$16,$16,1

	j	$L296
	nop

$L280:
	bne	$7,$0,$L296
	addiu	$2,$4,30

	addiu	$4,$4,94
	sw	$2,20($sp)
	addiu	$fp,$17,256
	sw	$4,16($sp)
	move	$16,$0
	li	$23,1			# 0x1
	li	$22,2			# 0x2
	j	$L313
	li	$20,3			# 0x3

$L308:
	lbu	$2,0($21)
	bne	$2,$23,$L298
	addiu	$3,$21,2

	lw	$4,20($sp)
	move	$5,$0
	li	$6,64			# 0x40
	lbu	$18,1($21)
	jal	memset
	sw	$3,28($sp)

	lw	$3,28($sp)
	j	$L299
	move	$2,$0

$L300:
	lbu	$4,2($6)
	addiu	$2,$2,1
	sb	$4,30($5)
$L299:
	sltu	$4,$2,$18
	addu	$6,$21,$2
	bne	$4,$0,$L300
	addu	$5,$17,$2

	j	$L317
	addiu	$16,$16,2

$L298:
	bne	$2,$22,$L301
	move	$5,$0

	lw	$4,16($sp)
	li	$6,64			# 0x40
	lbu	$18,1($21)
	jal	memset
	sw	$3,28($sp)

	lw	$3,28($sp)
	j	$L302
	move	$2,$0

$L303:
	lbu	$4,2($6)
	addiu	$2,$2,1
	sb	$4,94($5)
$L302:
	sltu	$4,$2,$18
	addu	$6,$21,$2
	bne	$4,$0,$L303
	addu	$5,$17,$2

	addiu	$16,$16,2
$L317:
	addu	$21,$3,$18
	j	$L313
	addu	$16,$16,$18

$L301:
	bne	$2,$20,$L304
	addiu	$4,$21,2

	lbu	$3,1($21)
	j	$L305
	move	$2,$0

$L306:
	lbu	$5,2($7)
	addiu	$2,$2,1
	sb	$5,0($6)
$L305:
	sltu	$5,$2,$3
	addu	$7,$21,$2
	bne	$5,$0,$L306
	addu	$6,$fp,$2

	addiu	$16,$16,2
	addu	$21,$4,$3
	j	$L313
	addu	$16,$16,$3

$L304:
	beq	$2,$0,$L296
	lui	$4,%hi($LC23)

	j	$L315
	addiu	$4,$4,%lo($LC23)

$L313:
	slt	$2,$16,$19
	bne	$2,$0,$L308
	nop

$L296:
	lw	$5,256($17)
	bne	$5,$0,$L309
	lui	$4,%hi($LC24)

	addiu	$4,$4,%lo($LC24)
$L315:
	jal	panic_printk
	nop

	j	$L307
	li	$2,-1			# 0xffffffff

$L309:
	jal	rtk_sc_set_value
	li	$4,12			# 0xc

	j	$L307
	move	$2,$0

$L283:
	li	$2,-1			# 0xffffffff
$L307:
	lw	$31,68($sp)
	lw	$fp,64($sp)
	lw	$23,60($sp)
	lw	$22,56($sp)
	lw	$21,52($sp)
	lw	$20,48($sp)
	lw	$19,44($sp)
	lw	$18,40($sp)
	lw	$17,36($sp)
	lw	$16,32($sp)
	j	$31
	addiu	$sp,$sp,72

	.set	macro
	.set	reorder
	.end	parse_tlv_info
	.size	parse_tlv_info, .-parse_tlv_info
	.section	.rodata.str1.4
	.align	2
$LC25:
	.ascii	"sc_mcast_udp\000"
	.section	.text.mcast_udp_get_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_profile
	.set	nomips16
	.ent	mcast_udp_get_profile
	.type	mcast_udp_get_profile, @function
mcast_udp_get_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$2,%hi($LC25)
	move	$17,$5
	addiu	$3,$4,8
	addiu	$6,$2,%lo($LC25)
	addiu	$5,$5,1856
#APP
 # 75 "/home/kai_wang/3466/branch-rtl819x-sdk-v3.4.6.6/linux-2.6.30/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
	lbu	$2,($3)
1:	lbu	$1,($6)
	addiu	$3,1
	bne	$1,$2,2f
	addiu	$6,1
	bnez	$2,1b
	lbu	$2,($3)
	move	$2,$1
2:	subu	$2,$1
3:	.set	at
	.set	reorder
 # 0 "" 2
#NO_APP
	lw	$16,2112($17)
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L319
	move	$4,$17
	.set	macro
	.set	reorder

	move	$4,$5
	lui	$5,%hi(default_key_iv)
	li	$6,8			# 0x8
	.set	noreorder
	.set	nomacro
	jal	memcmp
	addiu	$5,$5,%lo(default_key_iv)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L320
	li	$2,-1			# 0xffffffff
	.set	macro
	.set	reorder

	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

$L320:
	addiu	$6,$16,-8
	move	$4,$17
	move	$7,$0
	andi	$6,$6,0x00ff
	.set	noreorder
	.set	nomacro
	j	$L323
	addiu	$5,$17,1864
	.set	macro
	.set	reorder

$L319:
	li	$7,1			# 0x1
	andi	$6,$16,0x00ff
$L323:
	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	.set	noreorder
	.set	nomacro
	j	parse_tlv_info
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

	.end	mcast_udp_get_profile
	.size	mcast_udp_get_profile, .-mcast_udp_get_profile
	.section	.text.mcast_udp_decode_profile,"ax",@progbits
	.align	2
	.globl	mcast_udp_decode_profile
	.set	nomips16
	.ent	mcast_udp_decode_profile
	.type	mcast_udp_decode_profile, @function
mcast_udp_decode_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 2/0, args= 24, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$16,24($sp)
	move	$16,$5
	lw	$7,2148($16)
	addiu	$2,$16,1856
	lw	$5,2408($5)
	addiu	$4,$16,2152
	addiu	$6,$16,2116
	jal	AES_UnWRAP
	sw	$2,16($sp)

	move	$2,$0
	lw	$3,2408($16)
	sw	$3,2112($16)
	lw	$31,28($sp)
	lw	$16,24($sp)
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	mcast_udp_decode_profile
	.size	mcast_udp_decode_profile, .-mcast_udp_decode_profile
	.section	.rodata.str1.4
	.align	2
$LC26:
	.ascii	"the pin code is %s, the pin length is %d\012\000"
	.section	.text.bcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	bcast_udp_get_pattern
	.set	nomips16
	.ent	bcast_udp_get_pattern
	.type	bcast_udp_get_pattern, @function
bcast_udp_get_pattern:
	.frame	$sp,248,$31		# vars= 200, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-248
	sw	$31,244($sp)
	sw	$21,240($sp)
	sw	$20,236($sp)
	sw	$19,232($sp)
	sw	$18,228($sp)
	sw	$17,224($sp)
	sw	$16,220($sp)
	li	$4,6			# 0x6
	move	$16,$5
	addiu	$17,$sp,80
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	addiu	$19,$sp,148
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	move	$5,$17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$21,$2
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	move	$5,$19
	lui	$18,%hi(g_sc_pin_len)
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$20,$16,2676
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	li	$2,5			# 0x5
	move	$4,$19
	sw	$2,8($16)
	lui	$2,%hi(g_sc_ctx+1852)
	sb	$21,2806($16)
	lw	$2,%lo(g_sc_ctx+1852)($2)
	.set	noreorder
	.set	nomacro
	jal	strlen
	sw	$2,1852($16)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	bne	$21,$0,$L327
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	move	$5,$17
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$20
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	move	$5,$17
	addiu	$4,$16,2741
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L328
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

$L327:
	move	$4,$20
	move	$5,$19
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

$L328:
	lui	$2,%hi(g_sc_pin_len)
	lw	$3,%lo(g_sc_pin_len)($2)
	addu	$3,$16,$3
	sb	$0,2676($3)
	lui	$3,%hi(g_sc_debug)
	lw	$4,%lo(g_sc_debug)($3)
	li	$3,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$4,$3,$L329
	lui	$4,%hi($LC26)
	.set	macro
	.set	reorder

	addiu	$5,$16,2676
	lw	$6,%lo(g_sc_pin_len)($2)
	.set	noreorder
	.set	nomacro
	jal	panic_printk
	addiu	$4,$4,%lo($LC26)
	.set	macro
	.set	reorder

$L329:
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	addiu	$3,$16,2810
	sh	$2,2808($16)
	addiu	$2,$sp,16
#APP
 # 25 "/home/kai_wang/3466/branch-rtl819x-sdk-v3.4.6.6/linux-2.6.30/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($2)
	addiu	$2,1
	sb	$1,($3)
	bnez	$1,1b
	addiu	$3,1
	.set	at
	.set	reorder
 # 0 "" 2
#NO_APP
	lui	$4,%hi(radom_value)
	li	$5,50			# 0x32
	addiu	$3,$4,%lo(radom_value)
	li	$2,53			# 0x35
	sb	$5,%lo(radom_value)($4)
	li	$4,51			# 0x33
	sb	$4,1($3)
	li	$4,52			# 0x34
	sb	$2,3($3)
	move	$2,$0
	sb	$4,2($3)
	lw	$31,244($sp)
	lw	$21,240($sp)
	lw	$20,236($sp)
	lw	$19,232($sp)
	lw	$18,228($sp)
	lw	$17,224($sp)
	lw	$16,220($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,248
	.set	macro
	.set	reorder

	.end	bcast_udp_get_pattern
	.size	bcast_udp_get_pattern, .-bcast_udp_get_pattern
	.section	.rodata.str1.4
	.align	2
$LC27:
	.ascii	"It is not invalid pattern\012\000"
	.align	2
$LC28:
	.ascii	"this client MUST have pin\012\000"
	.section	.text.mcast_udp_get_pattern,"ax",@progbits
	.align	2
	.globl	mcast_udp_get_pattern
	.set	nomips16
	.ent	mcast_udp_get_pattern
	.type	mcast_udp_get_pattern, @function
mcast_udp_get_pattern:
	.frame	$sp,248,$31		# vars= 200, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-248
	sw	$31,244($sp)
	sw	$21,240($sp)
	sw	$20,236($sp)
	sw	$19,232($sp)
	sw	$18,228($sp)
	sw	$17,224($sp)
	sw	$16,220($sp)
	li	$4,6			# 0x6
	move	$16,$5
	addiu	$17,$sp,80
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	addiu	$20,$sp,148
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	move	$5,$17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$19,$2
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$20
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$5,$sp,16
	.set	macro
	.set	reorder

	lbu	$4,271($16)
	lbu	$2,265($16)
	sll	$4,$4,8
	lbu	$3,277($16)
	sll	$2,$2,16
	addu	$2,$4,$2
	li	$4,2			# 0x2
	addu	$2,$2,$3
	.set	noreorder
	.set	nomacro
	bne	$2,$4,$L332
	li	$4,3			# 0x3
	.set	macro
	.set	reorder

	lbu	$4,263($16)
	lbu	$5,270($16)
	addu	$3,$4,$3
	lbu	$4,283($16)
	addu	$3,$3,$5
	lbu	$5,289($16)
	addu	$3,$3,$4
	andi	$3,$3,0xff
	.set	noreorder
	.set	nomacro
	bne	$3,$5,$L333
	addiu	$3,$4,-9
	.set	macro
	.set	reorder

	move	$4,$17
	sw	$3,1852($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	sw	$2,8($16)
	.set	macro
	.set	reorder

	move	$5,$17
	addiu	$4,$16,2741
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	lui	$4,%hi(g_sc_pin_len)
	addu	$3,$16,$2
	sw	$2,%lo(g_sc_pin_len)($4)
	sb	$0,2741($3)
	.set	noreorder
	.set	nomacro
	j	$L333
	sb	$0,2806($16)
	.set	macro
	.set	reorder

$L332:
	bne	$2,$4,$L334
	lbu	$4,263($16)
	lbu	$5,270($16)
	addu	$3,$4,$3
	lbu	$4,283($16)
	addu	$3,$3,$5
	lbu	$5,289($16)
	addu	$3,$3,$4
	andi	$3,$3,0xff
	.set	noreorder
	.set	nomacro
	bne	$3,$5,$L333
	addiu	$3,$4,-9
	.set	macro
	.set	reorder

	move	$4,$20
	lui	$18,%hi(g_sc_pin_len)
	sw	$2,8($16)
	li	$2,1			# 0x1
	sw	$3,1852($16)
	addiu	$21,$16,2676
	.set	noreorder
	.set	nomacro
	jal	strlen
	sb	$2,2806($16)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L335
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	move	$4,$21
	move	$5,$17
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L336
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

$L335:
	move	$4,$21
	move	$5,$20
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$6,$2
	.set	macro
	.set	reorder

$L336:
	lui	$2,%hi(g_sc_pin_len)
	lw	$3,%lo(g_sc_pin_len)($2)
	addu	$3,$16,$3
	sb	$0,2676($3)
	lui	$3,%hi(g_sc_debug)
	lw	$4,%lo(g_sc_debug)($3)
	li	$3,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$4,$3,$L333
	lui	$4,%hi($LC26)
	.set	macro
	.set	reorder

	lw	$6,%lo(g_sc_pin_len)($2)
	addiu	$4,$4,%lo($LC26)
	.set	noreorder
	.set	nomacro
	jal	panic_printk
	addiu	$5,$16,2676
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L344
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

$L334:
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L337
	lui	$4,%hi($LC27)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L343
	addiu	$4,$4,%lo($LC27)
	.set	macro
	.set	reorder

$L333:
	li	$2,1			# 0x1
$L344:
	.set	noreorder
	.set	nomacro
	bne	$19,$2,$L345
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

	lbu	$2,2806($16)
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L339
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L337
	lui	$4,%hi($LC28)
	.set	macro
	.set	reorder

	addiu	$4,$4,%lo($LC28)
$L343:
	jal	panic_printk
	.set	noreorder
	.set	nomacro
	j	$L338
	li	$2,-1			# 0xffffffff
	.set	macro
	.set	reorder

$L339:
$L345:
	lui	$4,%hi(radom_value+4)
	move	$3,$16
	addiu	$2,$2,%lo(radom_value)
	addiu	$4,$4,%lo(radom_value+4)
$L340:
	lbu	$5,295($3)
	sb	$5,0($2)
	addiu	$2,$2,1
	.set	noreorder
	.set	nomacro
	bne	$2,$4,$L340
	addiu	$3,$3,6
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	addiu	$3,$16,2810
	sh	$2,2808($16)
	addiu	$2,$sp,16
#APP
 # 25 "/home/kai_wang/3466/branch-rtl819x-sdk-v3.4.6.6/linux-2.6.30/arch/rlx/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($2)
	addiu	$2,1
	sb	$1,($3)
	bnez	$1,1b
	addiu	$3,1
	.set	at
	.set	reorder
 # 0 "" 2
#NO_APP
	.set	noreorder
	.set	nomacro
	j	$L338
	move	$2,$0
	.set	macro
	.set	reorder

$L337:
	li	$2,-1			# 0xffffffff
$L338:
	lw	$31,244($sp)
	lw	$21,240($sp)
	lw	$20,236($sp)
	lw	$19,232($sp)
	lw	$18,228($sp)
	lw	$17,224($sp)
	lw	$16,220($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,248
	.set	macro
	.set	reorder

	.end	mcast_udp_get_pattern
	.size	mcast_udp_get_pattern, .-mcast_udp_get_pattern
	.section	.text.mcast_udp_generate_key,"ax",@progbits
	.align	2
	.globl	mcast_udp_generate_key
	.set	nomips16
	.ent	mcast_udp_generate_key
	.type	mcast_udp_generate_key, @function
mcast_udp_generate_key:
	.frame	$sp,416,$31		# vars= 360, regs= 8/0, args= 24, gp= 0
	.mask	0x807f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-416
	sw	$31,412($sp)
	sw	$22,408($sp)
	sw	$21,404($sp)
	sw	$20,400($sp)
	sw	$19,396($sp)
	sw	$18,392($sp)
	sw	$17,388($sp)
	sw	$16,384($sp)
	addiu	$17,$sp,128
	move	$19,$4
	li	$6,256			# 0x100
	move	$16,$5
	move	$5,$0
	jal	memset
	move	$4,$17

	lui	$2,%hi(use_ios7_mac)
	lw	$2,%lo(use_ios7_mac)($2)
	beq	$2,$0,$L347
	lui	$5,%hi(g_ios_mac)

	move	$4,$17
	li	$6,6			# 0x6
	j	$L352
	addiu	$5,$5,%lo(g_ios_mac)

$L347:
	move	$4,$17
	addiu	$5,$16,12
	li	$6,6			# 0x6
$L352:
	jal	memcpy
	nop

	addiu	$4,$sp,134
	lbu	$3,2806($16)
	beq	$3,$0,$L349
	lui	$2,%hi(g_sc_pin_len)

	lw	$6,%lo(g_sc_pin_len)($2)
	j	$L353
	addiu	$5,$16,2676

$L349:
	lw	$6,%lo(g_sc_pin_len)($2)
	addiu	$5,$16,2741
$L353:
	jal	memcpy
	lui	$21,%hi(mcast_udp_buffer)

	lui	$2,%hi(g_sc_pin_len)
	addiu	$21,$21,%lo(mcast_udp_buffer)
	lw	$18,%lo(g_sc_pin_len)($2)
	move	$4,$21
	jal	strlen
	addiu	$17,$sp,128

	move	$5,$21
	addiu	$20,$sp,40
	addiu	$18,$18,6
	move	$6,$2
	addiu	$22,$sp,24
	addu	$4,$17,$18
	jal	memcpy
	addiu	$19,$19,8

	jal	strlen
	move	$4,$21

	lui	$5,%hi(radom_value)
	addu	$18,$2,$18
	addiu	$5,$5,%lo(radom_value)
	addu	$4,$17,$18
	jal	memcpy
	li	$6,4			# 0x4

	addiu	$18,$18,4
	jal	wlan_MD5_Init
	move	$4,$20

	move	$6,$18
	move	$4,$20
	jal	wlan_MD5_Update
	move	$5,$17

	move	$5,$20
	jal	wlan_MD5_Final
	move	$4,$22

	jal	strlen
	move	$4,$19

	move	$5,$19
	addu	$4,$17,$18
	jal	memcpy
	move	$6,$2

	jal	strlen
	move	$4,$19

	addiu	$3,$16,2116
	move	$4,$17
	addu	$5,$18,$2
	move	$6,$22
	li	$7,16			# 0x10
	jal	hmac_sha1
	sw	$3,16($sp)

	li	$2,16			# 0x10
	sw	$2,2148($16)
	move	$2,$0
	lw	$31,412($sp)
	lw	$22,408($sp)
	lw	$21,404($sp)
	lw	$20,400($sp)
	lw	$19,396($sp)
	lw	$18,392($sp)
	lw	$17,388($sp)
	lw	$16,384($sp)
	j	$31
	addiu	$sp,$sp,416

	.set	macro
	.set	reorder
	.end	mcast_udp_generate_key
	.size	mcast_udp_generate_key, .-mcast_udp_generate_key
	.globl	sync_pkt_index
	.section	.bss,"aw",@nobits
	.align	2
	.type	sync_pkt_index, @object
	.size	sync_pkt_index, 4
sync_pkt_index:
	.space	4
	.globl	profile_pkt_index
	.align	2
	.type	profile_pkt_index, @object
	.size	profile_pkt_index, 4
profile_pkt_index:
	.space	4
	.globl	finish_sync
	.align	2
	.type	finish_sync, @object
	.size	finish_sync, 4
finish_sync:
	.space	4
	.globl	use_ios7_mac
	.align	2
	.type	use_ios7_mac, @object
	.size	use_ios7_mac, 4
use_ios7_mac:
	.space	4
	.globl	sequence
	.align	2
	.type	sequence, @object
	.size	sequence, 4
sequence:
	.space	4
	.globl	g_sc_send_ack_round
	.align	2
	.type	g_sc_send_ack_round, @object
	.size	g_sc_send_ack_round, 4
g_sc_send_ack_round:
	.space	4
	.globl	g_sc_is_vxd
	.align	2
	.type	g_sc_is_vxd, @object
	.size	g_sc_is_vxd, 4
g_sc_is_vxd:
	.space	4
	.globl	g_ios_mac
	.data
	.align	2
	.type	g_ios_mac, @object
	.size	g_ios_mac, 6
g_ios_mac:
	.byte	2
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	null_mac
	.section	.bss
	.align	2
	.type	null_mac, @object
	.size	null_mac, 6
null_mac:
	.space	6
	.globl	g_sc_debug
	.align	2
	.type	g_sc_debug, @object
	.size	g_sc_debug, 4
g_sc_debug:
	.space	4
	.globl	g_sc_check_level
	.align	2
	.type	g_sc_check_level, @object
	.size	g_sc_check_level, 4
g_sc_check_level:
	.space	4
	.globl	g_sc_ignore_overlap
	.align	2
	.type	g_sc_ignore_overlap, @object
	.size	g_sc_ignore_overlap, 4
g_sc_ignore_overlap:
	.space	4
	.globl	default_key_iv
	.data
	.align	2
	.type	default_key_iv, @object
	.size	default_key_iv, 8
default_key_iv:
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.globl	udp_mcast
	.align	2
	.type	udp_mcast, @object
	.size	udp_mcast, 64
udp_mcast:
	.word	2
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast_pin
	.align	2
	.type	udp_mcast_pin, @object
	.size	udp_mcast_pin, 64
udp_mcast_pin:
	.word	3
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast
	.align	2
	.type	udp_bcast, @object
	.size	udp_bcast, 64
udp_bcast:
	.word	4
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast_pin
	.align	2
	.type	udp_bcast_pin, @object
	.size	udp_bcast_pin, 64
udp_bcast_pin:
	.word	5
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.local	radom_value
	.comm	radom_value,4,4
	.align	2
	.type	mcast_udp_buffer, @object
	.size	mcast_udp_buffer, 65
mcast_udp_buffer:
	.ascii	"8CmT/ J(3_aE R_UFR}`mtwF=)Qfjtn^S_1/ffg<_C7yw's}?'_'n&2~"
	.ascii	"Blm&_k?6\000"
	.local	g_sc_ctx
	.comm	g_sc_ctx,3388,4
	.globl	fix_sa
	.section	.bss
	.align	2
	.type	fix_sa, @object
	.size	fix_sa, 4
fix_sa:
	.space	4
	.globl	g_sc_pin_len
	.align	2
	.type	g_sc_pin_len, @object
	.size	g_sc_pin_len, 4
g_sc_pin_len:
	.space	4
	.globl	g_sc_bssid
	.align	2
	.type	g_sc_bssid, @object
	.size	g_sc_bssid, 6
g_sc_bssid:
	.space	6
	.globl	g_smac
	.align	2
	.type	g_smac, @object
	.size	g_smac, 6
g_smac:
	.space	6
	.globl	g_dmac
	.align	2
	.type	g_dmac, @object
	.size	g_dmac, 6
g_dmac:
	.space	6
	.globl	g_sc_ifname
	.align	2
	.type	g_sc_ifname, @object
	.size	g_sc_ifname, 32
g_sc_ifname:
	.space	32
	.globl	g_sc_magic
	.align	2
	.type	g_sc_magic, @object
	.size	g_sc_magic, 32
g_sc_magic:
	.space	32
	.globl	g_option_sa
	.align	2
	.type	g_option_sa, @object
	.size	g_option_sa, 80
g_option_sa:
	.space	80
	.globl	g_p4_option_num
	.align	2
	.type	g_p4_option_num, @object
	.size	g_p4_option_num, 4
g_p4_option_num:
	.space	4
	.globl	g_p4_magic_1
	.align	2
	.type	g_p4_magic_1, @object
	.size	g_p4_magic_1, 4
g_p4_magic_1:
	.space	4
	.globl	g_p4_magic_2
	.align	2
	.type	g_p4_magic_2, @object
	.size	g_p4_magic_2, 4
g_p4_magic_2:
	.space	4
	.globl	g_p4_have_pin
	.align	2
	.type	g_p4_have_pin, @object
	.size	g_p4_have_pin, 4
g_p4_have_pin:
	.space	4
	.globl	g_p4_magic_len
	.align	2
	.type	g_p4_magic_len, @object
	.size	g_p4_magic_len, 4
g_p4_magic_len:
	.space	4
	.globl	g_p4_group
	.align	2
	.type	g_p4_group, @object
	.size	g_p4_group, 4
g_p4_group:
	.space	4
	.globl	g_p4_last_group
	.align	2
	.type	g_p4_last_group, @object
	.size	g_p4_last_group, 4
g_p4_last_group:
	.space	4
	.globl	g_p4_last_seq
	.align	2
	.type	g_p4_last_seq, @object
	.size	g_p4_last_seq, 4
g_p4_last_seq:
	.space	4
	.globl	g_p4_option_idx
	.align	2
	.type	g_p4_option_idx, @object
	.size	g_p4_option_idx, 4
g_p4_option_idx:
	.space	4
	.globl	g_p4_to_ds_hrate
	.align	2
	.type	g_p4_to_ds_hrate, @object
	.size	g_p4_to_ds_hrate, 4
g_p4_to_ds_hrate:
	.space	4
	.globl	g_pkt_type
	.align	2
	.type	g_pkt_type, @object
	.size	g_pkt_type, 4
g_pkt_type:
	.space	4
	.globl	g_sc_config_type
	.align	2
	.type	g_sc_config_type, @object
	.size	g_sc_config_type, 4
g_sc_config_type:
	.space	4
	.globl	pp
	.align	2
	.type	pp, @object
	.size	pp, 4
pp:
	.space	4
	.globl	ack_pkt
	.align	2
	.type	ack_pkt, @object
	.size	ack_pkt, 108
ack_pkt:
	.space	108
	.ident	"GCC: (GNU) 4.4.5-1.5.5p4"
